"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/set-cookie-parser";
exports.ids = ["vendor-chunks/set-cookie-parser"];
exports.modules = {

/***/ "(action-browser)/./node_modules/set-cookie-parser/lib/set-cookie.js":
/*!**********************************************************!*\
  !*** ./node_modules/set-cookie-parser/lib/set-cookie.js ***!
  \**********************************************************/
/***/ ((module) => {

eval("\nvar defaultParseOptions = {\n    decodeValues: true,\n    map: false,\n    silent: false\n};\nfunction isNonEmptyString(str) {\n    return typeof str === \"string\" && !!str.trim();\n}\nfunction parseString(setCookieValue, options) {\n    var parts = setCookieValue.split(\";\").filter(isNonEmptyString);\n    var nameValuePairStr = parts.shift();\n    var parsed = parseNameValuePair(nameValuePairStr);\n    var name = parsed.name;\n    var value = parsed.value;\n    options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions;\n    try {\n        value = options.decodeValues ? decodeURIComponent(value) : value; // decode cookie value\n    } catch (e) {\n        console.error(\"set-cookie-parser encountered an error while decoding a cookie with value '\" + value + \"'. Set options.decodeValues to false to disable this feature.\", e);\n    }\n    var cookie = {\n        name: name,\n        value: value\n    };\n    parts.forEach(function(part) {\n        var sides = part.split(\"=\");\n        var key = sides.shift().trimLeft().toLowerCase();\n        var value = sides.join(\"=\");\n        if (key === \"expires\") {\n            cookie.expires = new Date(value);\n        } else if (key === \"max-age\") {\n            cookie.maxAge = parseInt(value, 10);\n        } else if (key === \"secure\") {\n            cookie.secure = true;\n        } else if (key === \"httponly\") {\n            cookie.httpOnly = true;\n        } else if (key === \"samesite\") {\n            cookie.sameSite = value;\n        } else {\n            cookie[key] = value;\n        }\n    });\n    return cookie;\n}\nfunction parseNameValuePair(nameValuePairStr) {\n    // Parses name-value-pair according to rfc6265bis draft\n    var name = \"\";\n    var value = \"\";\n    var nameValueArr = nameValuePairStr.split(\"=\");\n    if (nameValueArr.length > 1) {\n        name = nameValueArr.shift();\n        value = nameValueArr.join(\"=\"); // everything after the first =, joined by a \"=\" if there was more than one part\n    } else {\n        value = nameValuePairStr;\n    }\n    return {\n        name: name,\n        value: value\n    };\n}\nfunction parse(input, options) {\n    options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions;\n    if (!input) {\n        if (!options.map) {\n            return [];\n        } else {\n            return {};\n        }\n    }\n    if (input.headers) {\n        if (typeof input.headers.getSetCookie === \"function\") {\n            // for fetch responses - they combine headers of the same type in the headers array,\n            // but getSetCookie returns an uncombined array\n            input = input.headers.getSetCookie();\n        } else if (input.headers[\"set-cookie\"]) {\n            // fast-path for node.js (which automatically normalizes header names to lower-case\n            input = input.headers[\"set-cookie\"];\n        } else {\n            // slow-path for other environments - see #25\n            var sch = input.headers[Object.keys(input.headers).find(function(key) {\n                return key.toLowerCase() === \"set-cookie\";\n            })];\n            // warn if called on a request-like object with a cookie header rather than a set-cookie header - see #34, 36\n            if (!sch && input.headers.cookie && !options.silent) {\n                console.warn(\"Warning: set-cookie-parser appears to have been called on a request object. It is designed to parse Set-Cookie headers from responses, not Cookie headers from requests. Set the option {silent: true} to suppress this warning.\");\n            }\n            input = sch;\n        }\n    }\n    if (!Array.isArray(input)) {\n        input = [\n            input\n        ];\n    }\n    options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions;\n    if (!options.map) {\n        return input.filter(isNonEmptyString).map(function(str) {\n            return parseString(str, options);\n        });\n    } else {\n        var cookies = {};\n        return input.filter(isNonEmptyString).reduce(function(cookies, str) {\n            var cookie = parseString(str, options);\n            cookies[cookie.name] = cookie;\n            return cookies;\n        }, cookies);\n    }\n}\n/*\n  Set-Cookie header field-values are sometimes comma joined in one string. This splits them without choking on commas\n  that are within a single set-cookie field-value, such as in the Expires portion.\n\n  This is uncommon, but explicitly allowed - see https://tools.ietf.org/html/rfc2616#section-4.2\n  Node.js does this for every header *except* set-cookie - see https://github.com/nodejs/node/blob/d5e363b77ebaf1caf67cd7528224b651c86815c1/lib/_http_incoming.js#L128\n  React Native's fetch does this for *every* header, including set-cookie.\n\n  Based on: https://github.com/google/j2objc/commit/16820fdbc8f76ca0c33472810ce0cb03d20efe25\n  Credits to: https://github.com/tomball for original and https://github.com/chrusart for JavaScript implementation\n*/ function splitCookiesString(cookiesString) {\n    if (Array.isArray(cookiesString)) {\n        return cookiesString;\n    }\n    if (typeof cookiesString !== \"string\") {\n        return [];\n    }\n    var cookiesStrings = [];\n    var pos = 0;\n    var start;\n    var ch;\n    var lastComma;\n    var nextStart;\n    var cookiesSeparatorFound;\n    function skipWhitespace() {\n        while(pos < cookiesString.length && /\\s/.test(cookiesString.charAt(pos))){\n            pos += 1;\n        }\n        return pos < cookiesString.length;\n    }\n    function notSpecialChar() {\n        ch = cookiesString.charAt(pos);\n        return ch !== \"=\" && ch !== \";\" && ch !== \",\";\n    }\n    while(pos < cookiesString.length){\n        start = pos;\n        cookiesSeparatorFound = false;\n        while(skipWhitespace()){\n            ch = cookiesString.charAt(pos);\n            if (ch === \",\") {\n                // ',' is a cookie separator if we have later first '=', not ';' or ','\n                lastComma = pos;\n                pos += 1;\n                skipWhitespace();\n                nextStart = pos;\n                while(pos < cookiesString.length && notSpecialChar()){\n                    pos += 1;\n                }\n                // currently special character\n                if (pos < cookiesString.length && cookiesString.charAt(pos) === \"=\") {\n                    // we found cookies separator\n                    cookiesSeparatorFound = true;\n                    // pos is inside the next cookie, so back up and return it.\n                    pos = nextStart;\n                    cookiesStrings.push(cookiesString.substring(start, lastComma));\n                    start = pos;\n                } else {\n                    // in param ',' or param separator ';',\n                    // we continue from that comma\n                    pos = lastComma + 1;\n                }\n            } else {\n                pos += 1;\n            }\n        }\n        if (!cookiesSeparatorFound || pos >= cookiesString.length) {\n            cookiesStrings.push(cookiesString.substring(start, cookiesString.length));\n        }\n    }\n    return cookiesStrings;\n}\nmodule.exports = parse;\nmodule.exports.parse = parse;\nmodule.exports.parseString = parseString;\nmodule.exports.splitCookiesString = splitCookiesString;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/set-cookie-parser/lib/set-cookie.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/set-cookie-parser/lib/set-cookie.js":
/*!**********************************************************!*\
  !*** ./node_modules/set-cookie-parser/lib/set-cookie.js ***!
  \**********************************************************/
/***/ ((module) => {

eval("\nvar defaultParseOptions = {\n    decodeValues: true,\n    map: false,\n    silent: false\n};\nfunction isNonEmptyString(str) {\n    return typeof str === \"string\" && !!str.trim();\n}\nfunction parseString(setCookieValue, options) {\n    var parts = setCookieValue.split(\";\").filter(isNonEmptyString);\n    var nameValuePairStr = parts.shift();\n    var parsed = parseNameValuePair(nameValuePairStr);\n    var name = parsed.name;\n    var value = parsed.value;\n    options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions;\n    try {\n        value = options.decodeValues ? decodeURIComponent(value) : value; // decode cookie value\n    } catch (e) {\n        console.error(\"set-cookie-parser encountered an error while decoding a cookie with value '\" + value + \"'. Set options.decodeValues to false to disable this feature.\", e);\n    }\n    var cookie = {\n        name: name,\n        value: value\n    };\n    parts.forEach(function(part) {\n        var sides = part.split(\"=\");\n        var key = sides.shift().trimLeft().toLowerCase();\n        var value = sides.join(\"=\");\n        if (key === \"expires\") {\n            cookie.expires = new Date(value);\n        } else if (key === \"max-age\") {\n            cookie.maxAge = parseInt(value, 10);\n        } else if (key === \"secure\") {\n            cookie.secure = true;\n        } else if (key === \"httponly\") {\n            cookie.httpOnly = true;\n        } else if (key === \"samesite\") {\n            cookie.sameSite = value;\n        } else {\n            cookie[key] = value;\n        }\n    });\n    return cookie;\n}\nfunction parseNameValuePair(nameValuePairStr) {\n    // Parses name-value-pair according to rfc6265bis draft\n    var name = \"\";\n    var value = \"\";\n    var nameValueArr = nameValuePairStr.split(\"=\");\n    if (nameValueArr.length > 1) {\n        name = nameValueArr.shift();\n        value = nameValueArr.join(\"=\"); // everything after the first =, joined by a \"=\" if there was more than one part\n    } else {\n        value = nameValuePairStr;\n    }\n    return {\n        name: name,\n        value: value\n    };\n}\nfunction parse(input, options) {\n    options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions;\n    if (!input) {\n        if (!options.map) {\n            return [];\n        } else {\n            return {};\n        }\n    }\n    if (input.headers) {\n        if (typeof input.headers.getSetCookie === \"function\") {\n            // for fetch responses - they combine headers of the same type in the headers array,\n            // but getSetCookie returns an uncombined array\n            input = input.headers.getSetCookie();\n        } else if (input.headers[\"set-cookie\"]) {\n            // fast-path for node.js (which automatically normalizes header names to lower-case\n            input = input.headers[\"set-cookie\"];\n        } else {\n            // slow-path for other environments - see #25\n            var sch = input.headers[Object.keys(input.headers).find(function(key) {\n                return key.toLowerCase() === \"set-cookie\";\n            })];\n            // warn if called on a request-like object with a cookie header rather than a set-cookie header - see #34, 36\n            if (!sch && input.headers.cookie && !options.silent) {\n                console.warn(\"Warning: set-cookie-parser appears to have been called on a request object. It is designed to parse Set-Cookie headers from responses, not Cookie headers from requests. Set the option {silent: true} to suppress this warning.\");\n            }\n            input = sch;\n        }\n    }\n    if (!Array.isArray(input)) {\n        input = [\n            input\n        ];\n    }\n    options = options ? Object.assign({}, defaultParseOptions, options) : defaultParseOptions;\n    if (!options.map) {\n        return input.filter(isNonEmptyString).map(function(str) {\n            return parseString(str, options);\n        });\n    } else {\n        var cookies = {};\n        return input.filter(isNonEmptyString).reduce(function(cookies, str) {\n            var cookie = parseString(str, options);\n            cookies[cookie.name] = cookie;\n            return cookies;\n        }, cookies);\n    }\n}\n/*\n  Set-Cookie header field-values are sometimes comma joined in one string. This splits them without choking on commas\n  that are within a single set-cookie field-value, such as in the Expires portion.\n\n  This is uncommon, but explicitly allowed - see https://tools.ietf.org/html/rfc2616#section-4.2\n  Node.js does this for every header *except* set-cookie - see https://github.com/nodejs/node/blob/d5e363b77ebaf1caf67cd7528224b651c86815c1/lib/_http_incoming.js#L128\n  React Native's fetch does this for *every* header, including set-cookie.\n\n  Based on: https://github.com/google/j2objc/commit/16820fdbc8f76ca0c33472810ce0cb03d20efe25\n  Credits to: https://github.com/tomball for original and https://github.com/chrusart for JavaScript implementation\n*/ function splitCookiesString(cookiesString) {\n    if (Array.isArray(cookiesString)) {\n        return cookiesString;\n    }\n    if (typeof cookiesString !== \"string\") {\n        return [];\n    }\n    var cookiesStrings = [];\n    var pos = 0;\n    var start;\n    var ch;\n    var lastComma;\n    var nextStart;\n    var cookiesSeparatorFound;\n    function skipWhitespace() {\n        while(pos < cookiesString.length && /\\s/.test(cookiesString.charAt(pos))){\n            pos += 1;\n        }\n        return pos < cookiesString.length;\n    }\n    function notSpecialChar() {\n        ch = cookiesString.charAt(pos);\n        return ch !== \"=\" && ch !== \";\" && ch !== \",\";\n    }\n    while(pos < cookiesString.length){\n        start = pos;\n        cookiesSeparatorFound = false;\n        while(skipWhitespace()){\n            ch = cookiesString.charAt(pos);\n            if (ch === \",\") {\n                // ',' is a cookie separator if we have later first '=', not ';' or ','\n                lastComma = pos;\n                pos += 1;\n                skipWhitespace();\n                nextStart = pos;\n                while(pos < cookiesString.length && notSpecialChar()){\n                    pos += 1;\n                }\n                // currently special character\n                if (pos < cookiesString.length && cookiesString.charAt(pos) === \"=\") {\n                    // we found cookies separator\n                    cookiesSeparatorFound = true;\n                    // pos is inside the next cookie, so back up and return it.\n                    pos = nextStart;\n                    cookiesStrings.push(cookiesString.substring(start, lastComma));\n                    start = pos;\n                } else {\n                    // in param ',' or param separator ';',\n                    // we continue from that comma\n                    pos = lastComma + 1;\n                }\n            } else {\n                pos += 1;\n            }\n        }\n        if (!cookiesSeparatorFound || pos >= cookiesString.length) {\n            cookiesStrings.push(cookiesString.substring(start, cookiesString.length));\n        }\n    }\n    return cookiesStrings;\n}\nmodule.exports = parse;\nmodule.exports.parse = parse;\nmodule.exports.parseString = parseString;\nmodule.exports.splitCookiesString = splitCookiesString;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/set-cookie-parser/lib/set-cookie.js\n");

/***/ })

};
;