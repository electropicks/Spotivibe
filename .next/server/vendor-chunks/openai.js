"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/openai";
exports.ids = ["vendor-chunks/openai"];
exports.modules = {

/***/ "(action-browser)/./node_modules/openai/_shims/MultipartBody.mjs":
/*!******************************************************!*\
  !*** ./node_modules/openai/_shims/MultipartBody.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MultipartBody: () => (/* binding */ MultipartBody)\n/* harmony export */ });\n/**\n * Disclaimer: modules in _shims aren't intended to be imported by SDK users.\n */ class MultipartBody {\n    constructor(body){\n        this.body = body;\n    }\n    get [Symbol.toStringTag]() {\n        return \"MultipartBody\";\n    }\n} //# sourceMappingURL=MultipartBody.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvX3NoaW1zL011bHRpcGFydEJvZHkubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Q0FFQyxHQUNNLE1BQU1BO0lBQ1RDLFlBQVlDLElBQUksQ0FBRTtRQUNkLElBQUksQ0FBQ0EsSUFBSSxHQUFHQTtJQUNoQjtJQUNBLElBQUksQ0FBQ0MsT0FBT0MsV0FBVyxDQUFDLEdBQUc7UUFDdkIsT0FBTztJQUNYO0FBQ0osRUFDQSwwQ0FBMEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb3BlbmFpL19zaGltcy9NdWx0aXBhcnRCb2R5Lm1qcz83ZGFmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRGlzY2xhaW1lcjogbW9kdWxlcyBpbiBfc2hpbXMgYXJlbid0IGludGVuZGVkIHRvIGJlIGltcG9ydGVkIGJ5IFNESyB1c2Vycy5cbiAqL1xuZXhwb3J0IGNsYXNzIE11bHRpcGFydEJvZHkge1xuICAgIGNvbnN0cnVjdG9yKGJvZHkpIHtcbiAgICAgICAgdGhpcy5ib2R5ID0gYm9keTtcbiAgICB9XG4gICAgZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkge1xuICAgICAgICByZXR1cm4gJ011bHRpcGFydEJvZHknO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU11bHRpcGFydEJvZHkubWpzLm1hcCJdLCJuYW1lcyI6WyJNdWx0aXBhcnRCb2R5IiwiY29uc3RydWN0b3IiLCJib2R5IiwiU3ltYm9sIiwidG9TdHJpbmdUYWciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/openai/_shims/MultipartBody.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/openai/_shims/auto/runtime-node.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/openai/_shims/auto/runtime-node.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_runtime_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../node-runtime.mjs */ \"(action-browser)/./node_modules/openai/_shims/node-runtime.mjs\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _node_runtime_mjs__WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _node_runtime_mjs__WEBPACK_IMPORTED_MODULE_0__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n //# sourceMappingURL=runtime-node.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvX3NoaW1zL2F1dG8vcnVudGltZS1ub2RlLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFvQyxDQUNwQyx5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb3BlbmFpL19zaGltcy9hdXRvL3J1bnRpbWUtbm9kZS5tanM/OGI5ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tIFwiLi4vbm9kZS1ydW50aW1lLm1qc1wiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cnVudGltZS1ub2RlLm1qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/openai/_shims/auto/runtime-node.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/openai/_shims/index.mjs":
/*!**********************************************!*\
  !*** ./node_modules/openai/_shims/index.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _registry_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./registry.mjs */ \"(action-browser)/./node_modules/openai/_shims/registry.mjs\");\n/* harmony import */ var openai_shims_auto_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/_shims/auto/runtime */ \"(action-browser)/./node_modules/openai/_shims/auto/runtime-node.mjs\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _registry_mjs__WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _registry_mjs__WEBPACK_IMPORTED_MODULE_0__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/**\n * Disclaimer: modules in _shims aren't intended to be imported by SDK users.\n */ \n\nif (!_registry_mjs__WEBPACK_IMPORTED_MODULE_0__.kind) _registry_mjs__WEBPACK_IMPORTED_MODULE_0__.setShims(openai_shims_auto_runtime__WEBPACK_IMPORTED_MODULE_1__.getRuntime(), {\n    auto: true\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvX3NoaW1zL2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7Q0FFQyxHQUN1QztBQUNXO0FBQ25ELElBQUksQ0FBQ0EsK0NBQVUsRUFBRUEsbURBQWMsQ0FBQ0MsaUVBQWUsSUFBSTtJQUFFQSxNQUFNO0FBQUs7QUFDakMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb3BlbmFpL19zaGltcy9pbmRleC5tanM/N2Y5MCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIERpc2NsYWltZXI6IG1vZHVsZXMgaW4gX3NoaW1zIGFyZW4ndCBpbnRlbmRlZCB0byBiZSBpbXBvcnRlZCBieSBTREsgdXNlcnMuXG4gKi9cbmltcG9ydCAqIGFzIHNoaW1zIGZyb20gJy4vcmVnaXN0cnkubWpzJztcbmltcG9ydCAqIGFzIGF1dG8gZnJvbSAnb3BlbmFpL19zaGltcy9hdXRvL3J1bnRpbWUnO1xuaWYgKCFzaGltcy5raW5kKSBzaGltcy5zZXRTaGltcyhhdXRvLmdldFJ1bnRpbWUoKSwgeyBhdXRvOiB0cnVlIH0pO1xuZXhwb3J0ICogZnJvbSAnLi9yZWdpc3RyeS5tanMnO1xuIl0sIm5hbWVzIjpbInNoaW1zIiwiYXV0byIsImtpbmQiLCJzZXRTaGltcyIsImdldFJ1bnRpbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/openai/_shims/index.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/openai/_shims/node-runtime.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/openai/_shims/node-runtime.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getRuntime: () => (/* binding */ getRuntime)\n/* harmony export */ });\n/* harmony import */ var node_fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node-fetch */ \"(action-browser)/./node_modules/node-fetch/lib/index.js\");\n/* harmony import */ var formdata_node__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! formdata-node */ \"(action-browser)/./node_modules/formdata-node/lib/esm/index.js\");\n/* harmony import */ var agentkeepalive__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! agentkeepalive */ \"(action-browser)/./node_modules/agentkeepalive/index.js\");\n/* harmony import */ var abort_controller__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! abort-controller */ \"(action-browser)/./node_modules/abort-controller/dist/abort-controller.js\");\n/* harmony import */ var node_fs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! node:fs */ \"node:fs\");\n/* harmony import */ var form_data_encoder__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! form-data-encoder */ \"(action-browser)/./node_modules/form-data-encoder/lib/esm/index.js\");\n/* harmony import */ var node_stream__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! node:stream */ \"node:stream\");\n/* harmony import */ var _MultipartBody_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./MultipartBody.mjs */ \"(action-browser)/./node_modules/openai/_shims/MultipartBody.mjs\");\n/* harmony import */ var web_streams_polyfill_dist_ponyfill_es2018_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! web-streams-polyfill/dist/ponyfill.es2018.js */ \"(action-browser)/./node_modules/web-streams-polyfill/dist/ponyfill.es2018.js\");\n\n\n\n\n\n\n\n\n\nlet fileFromPathWarned = false;\nasync function fileFromPath(path, ...args) {\n    // this import fails in environments that don't handle export maps correctly, like old versions of Jest\n    const { fileFromPath: _fileFromPath } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/formdata-node\"), __webpack_require__.e(\"vendor-chunks/node-domexception\")]).then(__webpack_require__.bind(__webpack_require__, /*! formdata-node/file-from-path */ \"(action-browser)/./node_modules/formdata-node/lib/esm/fileFromPath.js\"));\n    if (!fileFromPathWarned) {\n        console.warn(`fileFromPath is deprecated; use fs.createReadStream(${JSON.stringify(path)}) instead`);\n        fileFromPathWarned = true;\n    }\n    // @ts-ignore\n    return await _fileFromPath(path, ...args);\n}\nconst defaultHttpAgent = new agentkeepalive__WEBPACK_IMPORTED_MODULE_2__({\n    keepAlive: true,\n    timeout: 5 * 60 * 1000\n});\nconst defaultHttpsAgent = new agentkeepalive__WEBPACK_IMPORTED_MODULE_2__.HttpsAgent({\n    keepAlive: true,\n    timeout: 5 * 60 * 1000\n});\nasync function getMultipartRequestOptions(form, opts) {\n    const encoder = new form_data_encoder__WEBPACK_IMPORTED_MODULE_5__.FormDataEncoder(form);\n    const readable = node_stream__WEBPACK_IMPORTED_MODULE_6__.Readable.from(encoder);\n    const body = new _MultipartBody_mjs__WEBPACK_IMPORTED_MODULE_8__.MultipartBody(readable);\n    const headers = {\n        ...opts.headers,\n        ...encoder.headers,\n        \"Content-Length\": encoder.contentLength\n    };\n    return {\n        ...opts,\n        body: body,\n        headers\n    };\n}\nfunction getRuntime() {\n    // Polyfill global object if needed.\n    if (typeof AbortController === \"undefined\") {\n        // @ts-expect-error (the types are subtly different, but compatible in practice)\n        globalThis.AbortController = abort_controller__WEBPACK_IMPORTED_MODULE_3__.AbortController;\n    }\n    return {\n        kind: \"node\",\n        fetch: node_fetch__WEBPACK_IMPORTED_MODULE_0__,\n        Request: node_fetch__WEBPACK_IMPORTED_MODULE_0__.Request,\n        Response: node_fetch__WEBPACK_IMPORTED_MODULE_0__.Response,\n        Headers: node_fetch__WEBPACK_IMPORTED_MODULE_0__.Headers,\n        FormData: formdata_node__WEBPACK_IMPORTED_MODULE_1__.FormData,\n        Blob: formdata_node__WEBPACK_IMPORTED_MODULE_1__.Blob,\n        File: formdata_node__WEBPACK_IMPORTED_MODULE_1__.File,\n        ReadableStream: web_streams_polyfill_dist_ponyfill_es2018_js__WEBPACK_IMPORTED_MODULE_7__.ReadableStream,\n        getMultipartRequestOptions,\n        getDefaultAgent: (url)=>url.startsWith(\"https\") ? defaultHttpsAgent : defaultHttpAgent,\n        fileFromPath,\n        isFsReadStream: (value)=>value instanceof node_fs__WEBPACK_IMPORTED_MODULE_4__.ReadStream\n    };\n} //# sourceMappingURL=node-runtime.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvX3NoaW1zL25vZGUtcnVudGltZS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFpQztBQUNHO0FBQ1E7QUFDa0M7QUFDekI7QUFDRDtBQUNiO0FBQ2E7QUFDMEI7QUFDOUUsSUFBSVcscUJBQXFCO0FBQ3pCLGVBQWVDLGFBQWFDLElBQUksRUFBRSxHQUFHQyxJQUFJO0lBQ3JDLHVHQUF1RztJQUN2RyxNQUFNLEVBQUVGLGNBQWNHLGFBQWEsRUFBRSxHQUFHLE1BQU0sNlNBQU87SUFDckQsSUFBSSxDQUFDSixvQkFBb0I7UUFDckJLLFFBQVFDLElBQUksQ0FBQyxDQUFDLG9EQUFvRCxFQUFFQyxLQUFLQyxTQUFTLENBQUNOLE1BQU0sU0FBUyxDQUFDO1FBQ25HRixxQkFBcUI7SUFDekI7SUFDQSxhQUFhO0lBQ2IsT0FBTyxNQUFNSSxjQUFjRixTQUFTQztBQUN4QztBQUNBLE1BQU1NLG1CQUFtQixJQUFJbEIsMkNBQWNBLENBQUM7SUFBRW1CLFdBQVc7SUFBTUMsU0FBUyxJQUFJLEtBQUs7QUFBSztBQUN0RixNQUFNQyxvQkFBb0IsSUFBSXJCLHNEQUF5QixDQUFDO0lBQUVtQixXQUFXO0lBQU1DLFNBQVMsSUFBSSxLQUFLO0FBQUs7QUFDbEcsZUFBZUcsMkJBQTJCQyxJQUFJLEVBQUVDLElBQUk7SUFDaEQsTUFBTUMsVUFBVSxJQUFJckIsOERBQWVBLENBQUNtQjtJQUNwQyxNQUFNRyxXQUFXckIsaURBQVFBLENBQUNzQixJQUFJLENBQUNGO0lBQy9CLE1BQU1HLE9BQU8sSUFBSXRCLDZEQUFhQSxDQUFDb0I7SUFDL0IsTUFBTUcsVUFBVTtRQUNaLEdBQUdMLEtBQUtLLE9BQU87UUFDZixHQUFHSixRQUFRSSxPQUFPO1FBQ2xCLGtCQUFrQkosUUFBUUssYUFBYTtJQUMzQztJQUNBLE9BQU87UUFBRSxHQUFHTixJQUFJO1FBQUVJLE1BQU1BO1FBQU1DO0lBQVE7QUFDMUM7QUFDTyxTQUFTRTtJQUNaLG9DQUFvQztJQUNwQyxJQUFJLE9BQU8vQixvQkFBb0IsYUFBYTtRQUN4QyxnRkFBZ0Y7UUFDaEZnQyxXQUFXaEMsZUFBZSxHQUFHQyw2REFBdUJBO0lBQ3hEO0lBQ0EsT0FBTztRQUNIZ0MsTUFBTTtRQUNOQyxPQUFPckMsdUNBQVU7UUFDakJ1QyxTQUFTdkMsK0NBQVU7UUFDbkJ3QyxVQUFVeEMsZ0RBQVc7UUFDckJ5QyxTQUFTekMsK0NBQVU7UUFDbkIwQyxVQUFVekMsbURBQVc7UUFDckIwQyxNQUFNMUMsK0NBQU87UUFDYjJDLE1BQU0zQywrQ0FBTztRQUNiUyxjQUFjQSwwRkFBQUE7UUFDZGU7UUFDQW9CLGlCQUFpQixDQUFDQyxNQUFTQSxJQUFJQyxVQUFVLENBQUMsV0FBV3hCLG9CQUFvQkg7UUFDekVSO1FBQ0FvQyxnQkFBZ0IsQ0FBQ0MsUUFBVUEsaUJBQWlCM0MsK0NBQVlBO0lBQzVEO0FBQ0osRUFDQSx5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb3BlbmFpL19zaGltcy9ub2RlLXJ1bnRpbWUubWpzPzRhNjEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgbmYgZnJvbSAnbm9kZS1mZXRjaCc7XG5pbXBvcnQgKiBhcyBmZCBmcm9tICdmb3JtZGF0YS1ub2RlJztcbmltcG9ydCBLZWVwQWxpdmVBZ2VudCBmcm9tICdhZ2VudGtlZXBhbGl2ZSc7XG5pbXBvcnQgeyBBYm9ydENvbnRyb2xsZXIgYXMgQWJvcnRDb250cm9sbGVyUG9seWZpbGwgfSBmcm9tICdhYm9ydC1jb250cm9sbGVyJztcbmltcG9ydCB7IFJlYWRTdHJlYW0gYXMgRnNSZWFkU3RyZWFtIH0gZnJvbSAnbm9kZTpmcyc7XG5pbXBvcnQgeyBGb3JtRGF0YUVuY29kZXIgfSBmcm9tICdmb3JtLWRhdGEtZW5jb2Rlcic7XG5pbXBvcnQgeyBSZWFkYWJsZSB9IGZyb20gJ25vZGU6c3RyZWFtJztcbmltcG9ydCB7IE11bHRpcGFydEJvZHkgfSBmcm9tIFwiLi9NdWx0aXBhcnRCb2R5Lm1qc1wiO1xuaW1wb3J0IHsgUmVhZGFibGVTdHJlYW0gfSBmcm9tICd3ZWItc3RyZWFtcy1wb2x5ZmlsbC9kaXN0L3BvbnlmaWxsLmVzMjAxOC5qcyc7XG5sZXQgZmlsZUZyb21QYXRoV2FybmVkID0gZmFsc2U7XG5hc3luYyBmdW5jdGlvbiBmaWxlRnJvbVBhdGgocGF0aCwgLi4uYXJncykge1xuICAgIC8vIHRoaXMgaW1wb3J0IGZhaWxzIGluIGVudmlyb25tZW50cyB0aGF0IGRvbid0IGhhbmRsZSBleHBvcnQgbWFwcyBjb3JyZWN0bHksIGxpa2Ugb2xkIHZlcnNpb25zIG9mIEplc3RcbiAgICBjb25zdCB7IGZpbGVGcm9tUGF0aDogX2ZpbGVGcm9tUGF0aCB9ID0gYXdhaXQgaW1wb3J0KCdmb3JtZGF0YS1ub2RlL2ZpbGUtZnJvbS1wYXRoJyk7XG4gICAgaWYgKCFmaWxlRnJvbVBhdGhXYXJuZWQpIHtcbiAgICAgICAgY29uc29sZS53YXJuKGBmaWxlRnJvbVBhdGggaXMgZGVwcmVjYXRlZDsgdXNlIGZzLmNyZWF0ZVJlYWRTdHJlYW0oJHtKU09OLnN0cmluZ2lmeShwYXRoKX0pIGluc3RlYWRgKTtcbiAgICAgICAgZmlsZUZyb21QYXRoV2FybmVkID0gdHJ1ZTtcbiAgICB9XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHJldHVybiBhd2FpdCBfZmlsZUZyb21QYXRoKHBhdGgsIC4uLmFyZ3MpO1xufVxuY29uc3QgZGVmYXVsdEh0dHBBZ2VudCA9IG5ldyBLZWVwQWxpdmVBZ2VudCh7IGtlZXBBbGl2ZTogdHJ1ZSwgdGltZW91dDogNSAqIDYwICogMTAwMCB9KTtcbmNvbnN0IGRlZmF1bHRIdHRwc0FnZW50ID0gbmV3IEtlZXBBbGl2ZUFnZW50Lkh0dHBzQWdlbnQoeyBrZWVwQWxpdmU6IHRydWUsIHRpbWVvdXQ6IDUgKiA2MCAqIDEwMDAgfSk7XG5hc3luYyBmdW5jdGlvbiBnZXRNdWx0aXBhcnRSZXF1ZXN0T3B0aW9ucyhmb3JtLCBvcHRzKSB7XG4gICAgY29uc3QgZW5jb2RlciA9IG5ldyBGb3JtRGF0YUVuY29kZXIoZm9ybSk7XG4gICAgY29uc3QgcmVhZGFibGUgPSBSZWFkYWJsZS5mcm9tKGVuY29kZXIpO1xuICAgIGNvbnN0IGJvZHkgPSBuZXcgTXVsdGlwYXJ0Qm9keShyZWFkYWJsZSk7XG4gICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgLi4ub3B0cy5oZWFkZXJzLFxuICAgICAgICAuLi5lbmNvZGVyLmhlYWRlcnMsXG4gICAgICAgICdDb250ZW50LUxlbmd0aCc6IGVuY29kZXIuY29udGVudExlbmd0aCxcbiAgICB9O1xuICAgIHJldHVybiB7IC4uLm9wdHMsIGJvZHk6IGJvZHksIGhlYWRlcnMgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRSdW50aW1lKCkge1xuICAgIC8vIFBvbHlmaWxsIGdsb2JhbCBvYmplY3QgaWYgbmVlZGVkLlxuICAgIGlmICh0eXBlb2YgQWJvcnRDb250cm9sbGVyID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yICh0aGUgdHlwZXMgYXJlIHN1YnRseSBkaWZmZXJlbnQsIGJ1dCBjb21wYXRpYmxlIGluIHByYWN0aWNlKVxuICAgICAgICBnbG9iYWxUaGlzLkFib3J0Q29udHJvbGxlciA9IEFib3J0Q29udHJvbGxlclBvbHlmaWxsO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBraW5kOiAnbm9kZScsXG4gICAgICAgIGZldGNoOiBuZi5kZWZhdWx0LFxuICAgICAgICBSZXF1ZXN0OiBuZi5SZXF1ZXN0LFxuICAgICAgICBSZXNwb25zZTogbmYuUmVzcG9uc2UsXG4gICAgICAgIEhlYWRlcnM6IG5mLkhlYWRlcnMsXG4gICAgICAgIEZvcm1EYXRhOiBmZC5Gb3JtRGF0YSxcbiAgICAgICAgQmxvYjogZmQuQmxvYixcbiAgICAgICAgRmlsZTogZmQuRmlsZSxcbiAgICAgICAgUmVhZGFibGVTdHJlYW0sXG4gICAgICAgIGdldE11bHRpcGFydFJlcXVlc3RPcHRpb25zLFxuICAgICAgICBnZXREZWZhdWx0QWdlbnQ6ICh1cmwpID0+ICh1cmwuc3RhcnRzV2l0aCgnaHR0cHMnKSA/IGRlZmF1bHRIdHRwc0FnZW50IDogZGVmYXVsdEh0dHBBZ2VudCksXG4gICAgICAgIGZpbGVGcm9tUGF0aCxcbiAgICAgICAgaXNGc1JlYWRTdHJlYW06ICh2YWx1ZSkgPT4gdmFsdWUgaW5zdGFuY2VvZiBGc1JlYWRTdHJlYW0sXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vZGUtcnVudGltZS5tanMubWFwIl0sIm5hbWVzIjpbIm5mIiwiZmQiLCJLZWVwQWxpdmVBZ2VudCIsIkFib3J0Q29udHJvbGxlciIsIkFib3J0Q29udHJvbGxlclBvbHlmaWxsIiwiUmVhZFN0cmVhbSIsIkZzUmVhZFN0cmVhbSIsIkZvcm1EYXRhRW5jb2RlciIsIlJlYWRhYmxlIiwiTXVsdGlwYXJ0Qm9keSIsIlJlYWRhYmxlU3RyZWFtIiwiZmlsZUZyb21QYXRoV2FybmVkIiwiZmlsZUZyb21QYXRoIiwicGF0aCIsImFyZ3MiLCJfZmlsZUZyb21QYXRoIiwiY29uc29sZSIsIndhcm4iLCJKU09OIiwic3RyaW5naWZ5IiwiZGVmYXVsdEh0dHBBZ2VudCIsImtlZXBBbGl2ZSIsInRpbWVvdXQiLCJkZWZhdWx0SHR0cHNBZ2VudCIsIkh0dHBzQWdlbnQiLCJnZXRNdWx0aXBhcnRSZXF1ZXN0T3B0aW9ucyIsImZvcm0iLCJvcHRzIiwiZW5jb2RlciIsInJlYWRhYmxlIiwiZnJvbSIsImJvZHkiLCJoZWFkZXJzIiwiY29udGVudExlbmd0aCIsImdldFJ1bnRpbWUiLCJnbG9iYWxUaGlzIiwia2luZCIsImZldGNoIiwiZGVmYXVsdCIsIlJlcXVlc3QiLCJSZXNwb25zZSIsIkhlYWRlcnMiLCJGb3JtRGF0YSIsIkJsb2IiLCJGaWxlIiwiZ2V0RGVmYXVsdEFnZW50IiwidXJsIiwic3RhcnRzV2l0aCIsImlzRnNSZWFkU3RyZWFtIiwidmFsdWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/openai/_shims/node-runtime.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/openai/_shims/registry.mjs":
/*!*************************************************!*\
  !*** ./node_modules/openai/_shims/registry.mjs ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Blob: () => (/* binding */ Blob),\n/* harmony export */   File: () => (/* binding */ File),\n/* harmony export */   FormData: () => (/* binding */ FormData),\n/* harmony export */   Headers: () => (/* binding */ Headers),\n/* harmony export */   ReadableStream: () => (/* binding */ ReadableStream),\n/* harmony export */   Request: () => (/* binding */ Request),\n/* harmony export */   Response: () => (/* binding */ Response),\n/* harmony export */   auto: () => (/* binding */ auto),\n/* harmony export */   fetch: () => (/* binding */ fetch),\n/* harmony export */   fileFromPath: () => (/* binding */ fileFromPath),\n/* harmony export */   getDefaultAgent: () => (/* binding */ getDefaultAgent),\n/* harmony export */   getMultipartRequestOptions: () => (/* binding */ getMultipartRequestOptions),\n/* harmony export */   isFsReadStream: () => (/* binding */ isFsReadStream),\n/* harmony export */   kind: () => (/* binding */ kind),\n/* harmony export */   setShims: () => (/* binding */ setShims)\n/* harmony export */ });\nlet auto = false;\nlet kind = undefined;\nlet fetch = undefined;\nlet Request = undefined;\nlet Response = undefined;\nlet Headers = undefined;\nlet FormData = undefined;\nlet Blob = undefined;\nlet File = undefined;\nlet ReadableStream = undefined;\nlet getMultipartRequestOptions = undefined;\nlet getDefaultAgent = undefined;\nlet fileFromPath = undefined;\nlet isFsReadStream = undefined;\nfunction setShims(shims, options = {\n    auto: false\n}) {\n    if (auto) {\n        throw new Error(`you must \\`import 'openai/shims/${shims.kind}'\\` before importing anything else from openai`);\n    }\n    if (kind) {\n        throw new Error(`can't \\`import 'openai/shims/${shims.kind}'\\` after \\`import 'openai/shims/${kind}'\\``);\n    }\n    auto = options.auto;\n    kind = shims.kind;\n    fetch = shims.fetch;\n    Request = shims.Request;\n    Response = shims.Response;\n    Headers = shims.Headers;\n    FormData = shims.FormData;\n    Blob = shims.Blob;\n    File = shims.File;\n    ReadableStream = shims.ReadableStream;\n    getMultipartRequestOptions = shims.getMultipartRequestOptions;\n    getDefaultAgent = shims.getDefaultAgent;\n    fileFromPath = shims.fileFromPath;\n    isFsReadStream = shims.isFsReadStream;\n} //# sourceMappingURL=registry.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvX3NoaW1zL3JlZ2lzdHJ5Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBTyxJQUFJQSxPQUFPLE1BQU07QUFDakIsSUFBSUMsT0FBT0MsVUFBVTtBQUNyQixJQUFJQyxRQUFRRCxVQUFVO0FBQ3RCLElBQUlFLFVBQVVGLFVBQVU7QUFDeEIsSUFBSUcsV0FBV0gsVUFBVTtBQUN6QixJQUFJSSxVQUFVSixVQUFVO0FBQ3hCLElBQUlLLFdBQVdMLFVBQVU7QUFDekIsSUFBSU0sT0FBT04sVUFBVTtBQUNyQixJQUFJTyxPQUFPUCxVQUFVO0FBQ3JCLElBQUlRLGlCQUFpQlIsVUFBVTtBQUMvQixJQUFJUyw2QkFBNkJULFVBQVU7QUFDM0MsSUFBSVUsa0JBQWtCVixVQUFVO0FBQ2hDLElBQUlXLGVBQWVYLFVBQVU7QUFDN0IsSUFBSVksaUJBQWlCWixVQUFVO0FBQy9CLFNBQVNhLFNBQVNDLEtBQUssRUFBRUMsVUFBVTtJQUFFakIsTUFBTTtBQUFNLENBQUM7SUFDckQsSUFBSUEsTUFBTTtRQUNOLE1BQU0sSUFBSWtCLE1BQU0sQ0FBQyxnQ0FBZ0MsRUFBRUYsTUFBTWYsSUFBSSxDQUFDLDhDQUE4QyxDQUFDO0lBQ2pIO0lBQ0EsSUFBSUEsTUFBTTtRQUNOLE1BQU0sSUFBSWlCLE1BQU0sQ0FBQyw2QkFBNkIsRUFBRUYsTUFBTWYsSUFBSSxDQUFDLGlDQUFpQyxFQUFFQSxLQUFLLEdBQUcsQ0FBQztJQUMzRztJQUNBRCxPQUFPaUIsUUFBUWpCLElBQUk7SUFDbkJDLE9BQU9lLE1BQU1mLElBQUk7SUFDakJFLFFBQVFhLE1BQU1iLEtBQUs7SUFDbkJDLFVBQVVZLE1BQU1aLE9BQU87SUFDdkJDLFdBQVdXLE1BQU1YLFFBQVE7SUFDekJDLFVBQVVVLE1BQU1WLE9BQU87SUFDdkJDLFdBQVdTLE1BQU1ULFFBQVE7SUFDekJDLE9BQU9RLE1BQU1SLElBQUk7SUFDakJDLE9BQU9PLE1BQU1QLElBQUk7SUFDakJDLGlCQUFpQk0sTUFBTU4sY0FBYztJQUNyQ0MsNkJBQTZCSyxNQUFNTCwwQkFBMEI7SUFDN0RDLGtCQUFrQkksTUFBTUosZUFBZTtJQUN2Q0MsZUFBZUcsTUFBTUgsWUFBWTtJQUNqQ0MsaUJBQWlCRSxNQUFNRixjQUFjO0FBQ3pDLEVBQ0EscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29wZW5haS9fc2hpbXMvcmVnaXN0cnkubWpzP2I0YzAiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGxldCBhdXRvID0gZmFsc2U7XG5leHBvcnQgbGV0IGtpbmQgPSB1bmRlZmluZWQ7XG5leHBvcnQgbGV0IGZldGNoID0gdW5kZWZpbmVkO1xuZXhwb3J0IGxldCBSZXF1ZXN0ID0gdW5kZWZpbmVkO1xuZXhwb3J0IGxldCBSZXNwb25zZSA9IHVuZGVmaW5lZDtcbmV4cG9ydCBsZXQgSGVhZGVycyA9IHVuZGVmaW5lZDtcbmV4cG9ydCBsZXQgRm9ybURhdGEgPSB1bmRlZmluZWQ7XG5leHBvcnQgbGV0IEJsb2IgPSB1bmRlZmluZWQ7XG5leHBvcnQgbGV0IEZpbGUgPSB1bmRlZmluZWQ7XG5leHBvcnQgbGV0IFJlYWRhYmxlU3RyZWFtID0gdW5kZWZpbmVkO1xuZXhwb3J0IGxldCBnZXRNdWx0aXBhcnRSZXF1ZXN0T3B0aW9ucyA9IHVuZGVmaW5lZDtcbmV4cG9ydCBsZXQgZ2V0RGVmYXVsdEFnZW50ID0gdW5kZWZpbmVkO1xuZXhwb3J0IGxldCBmaWxlRnJvbVBhdGggPSB1bmRlZmluZWQ7XG5leHBvcnQgbGV0IGlzRnNSZWFkU3RyZWFtID0gdW5kZWZpbmVkO1xuZXhwb3J0IGZ1bmN0aW9uIHNldFNoaW1zKHNoaW1zLCBvcHRpb25zID0geyBhdXRvOiBmYWxzZSB9KSB7XG4gICAgaWYgKGF1dG8pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB5b3UgbXVzdCBcXGBpbXBvcnQgJ29wZW5haS9zaGltcy8ke3NoaW1zLmtpbmR9J1xcYCBiZWZvcmUgaW1wb3J0aW5nIGFueXRoaW5nIGVsc2UgZnJvbSBvcGVuYWlgKTtcbiAgICB9XG4gICAgaWYgKGtpbmQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBjYW4ndCBcXGBpbXBvcnQgJ29wZW5haS9zaGltcy8ke3NoaW1zLmtpbmR9J1xcYCBhZnRlciBcXGBpbXBvcnQgJ29wZW5haS9zaGltcy8ke2tpbmR9J1xcYGApO1xuICAgIH1cbiAgICBhdXRvID0gb3B0aW9ucy5hdXRvO1xuICAgIGtpbmQgPSBzaGltcy5raW5kO1xuICAgIGZldGNoID0gc2hpbXMuZmV0Y2g7XG4gICAgUmVxdWVzdCA9IHNoaW1zLlJlcXVlc3Q7XG4gICAgUmVzcG9uc2UgPSBzaGltcy5SZXNwb25zZTtcbiAgICBIZWFkZXJzID0gc2hpbXMuSGVhZGVycztcbiAgICBGb3JtRGF0YSA9IHNoaW1zLkZvcm1EYXRhO1xuICAgIEJsb2IgPSBzaGltcy5CbG9iO1xuICAgIEZpbGUgPSBzaGltcy5GaWxlO1xuICAgIFJlYWRhYmxlU3RyZWFtID0gc2hpbXMuUmVhZGFibGVTdHJlYW07XG4gICAgZ2V0TXVsdGlwYXJ0UmVxdWVzdE9wdGlvbnMgPSBzaGltcy5nZXRNdWx0aXBhcnRSZXF1ZXN0T3B0aW9ucztcbiAgICBnZXREZWZhdWx0QWdlbnQgPSBzaGltcy5nZXREZWZhdWx0QWdlbnQ7XG4gICAgZmlsZUZyb21QYXRoID0gc2hpbXMuZmlsZUZyb21QYXRoO1xuICAgIGlzRnNSZWFkU3RyZWFtID0gc2hpbXMuaXNGc1JlYWRTdHJlYW07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWdpc3RyeS5tanMubWFwIl0sIm5hbWVzIjpbImF1dG8iLCJraW5kIiwidW5kZWZpbmVkIiwiZmV0Y2giLCJSZXF1ZXN0IiwiUmVzcG9uc2UiLCJIZWFkZXJzIiwiRm9ybURhdGEiLCJCbG9iIiwiRmlsZSIsIlJlYWRhYmxlU3RyZWFtIiwiZ2V0TXVsdGlwYXJ0UmVxdWVzdE9wdGlvbnMiLCJnZXREZWZhdWx0QWdlbnQiLCJmaWxlRnJvbVBhdGgiLCJpc0ZzUmVhZFN0cmVhbSIsInNldFNoaW1zIiwic2hpbXMiLCJvcHRpb25zIiwiRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/openai/_shims/registry.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/openai/core.mjs":
/*!**************************************!*\
  !*** ./node_modules/openai/core.mjs ***!
  \**************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIClient: () => (/* binding */ APIClient),\n/* harmony export */   APIPromise: () => (/* binding */ APIPromise),\n/* harmony export */   AbstractPage: () => (/* binding */ AbstractPage),\n/* harmony export */   PagePromise: () => (/* binding */ PagePromise),\n/* harmony export */   castToError: () => (/* binding */ castToError),\n/* harmony export */   coerceBoolean: () => (/* binding */ coerceBoolean),\n/* harmony export */   coerceFloat: () => (/* binding */ coerceFloat),\n/* harmony export */   coerceInteger: () => (/* binding */ coerceInteger),\n/* harmony export */   createForm: () => (/* reexport safe */ _uploads_mjs__WEBPACK_IMPORTED_MODULE_1__.createForm),\n/* harmony export */   createResponseHeaders: () => (/* binding */ createResponseHeaders),\n/* harmony export */   debug: () => (/* binding */ debug),\n/* harmony export */   ensurePresent: () => (/* binding */ ensurePresent),\n/* harmony export */   getRequiredHeader: () => (/* binding */ getRequiredHeader),\n/* harmony export */   hasOwn: () => (/* binding */ hasOwn),\n/* harmony export */   isEmptyObj: () => (/* binding */ isEmptyObj),\n/* harmony export */   isHeadersProtocol: () => (/* binding */ isHeadersProtocol),\n/* harmony export */   isRequestOptions: () => (/* binding */ isRequestOptions),\n/* harmony export */   isRunningInBrowser: () => (/* binding */ isRunningInBrowser),\n/* harmony export */   maybeCoerceBoolean: () => (/* binding */ maybeCoerceBoolean),\n/* harmony export */   maybeCoerceFloat: () => (/* binding */ maybeCoerceFloat),\n/* harmony export */   maybeCoerceInteger: () => (/* binding */ maybeCoerceInteger),\n/* harmony export */   maybeMultipartFormRequestOptions: () => (/* reexport safe */ _uploads_mjs__WEBPACK_IMPORTED_MODULE_1__.maybeMultipartFormRequestOptions),\n/* harmony export */   multipartFormRequestOptions: () => (/* reexport safe */ _uploads_mjs__WEBPACK_IMPORTED_MODULE_1__.multipartFormRequestOptions),\n/* harmony export */   readEnv: () => (/* binding */ readEnv),\n/* harmony export */   safeJSON: () => (/* binding */ safeJSON),\n/* harmony export */   sleep: () => (/* binding */ sleep),\n/* harmony export */   toBase64: () => (/* binding */ toBase64)\n/* harmony export */ });\n/* harmony import */ var _version_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./version.mjs */ \"(action-browser)/./node_modules/openai/version.mjs\");\n/* harmony import */ var _streaming_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./streaming.mjs */ \"(action-browser)/./node_modules/openai/streaming.mjs\");\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./error.mjs */ \"(action-browser)/./node_modules/openai/error.mjs\");\n/* harmony import */ var _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_shims/index.mjs */ \"(action-browser)/./node_modules/openai/_shims/index.mjs\");\n/* harmony import */ var _uploads_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./uploads.mjs */ \"(action-browser)/./node_modules/openai/uploads.mjs\");\nvar __classPrivateFieldSet = undefined && undefined.__classPrivateFieldSet || function(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = undefined && undefined.__classPrivateFieldGet || function(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _AbstractPage_client;\n\n\n\n\n\n\nasync function defaultParseResponse(props) {\n    const { response } = props;\n    if (props.options.stream) {\n        debug(\"response\", response.status, response.url, response.headers, response.body);\n        // Note: there is an invariant here that isn't represented in the type system\n        // that if you set `stream: true` the response type must also be `Stream<T>`\n        return _streaming_mjs__WEBPACK_IMPORTED_MODULE_2__.Stream.fromSSEResponse(response, props.controller);\n    }\n    // fetch refuses to read the body when the status code is 204.\n    if (response.status === 204) {\n        return null;\n    }\n    if (props.options.__binaryResponse) {\n        return response;\n    }\n    const contentType = response.headers.get(\"content-type\");\n    if (contentType?.includes(\"application/json\")) {\n        const json = await response.json();\n        debug(\"response\", response.status, response.url, response.headers, json);\n        return json;\n    }\n    const text = await response.text();\n    debug(\"response\", response.status, response.url, response.headers, text);\n    // TODO handle blob, arraybuffer, other content types, etc.\n    return text;\n}\n/**\n * A subclass of `Promise` providing additional helper methods\n * for interacting with the SDK.\n */ class APIPromise extends Promise {\n    constructor(responsePromise, parseResponse = defaultParseResponse){\n        super((resolve)=>{\n            // this is maybe a bit weird but this has to be a no-op to not implicitly\n            // parse the response body; instead .then, .catch, .finally are overridden\n            // to parse the response\n            resolve(null);\n        });\n        this.responsePromise = responsePromise;\n        this.parseResponse = parseResponse;\n    }\n    _thenUnwrap(transform) {\n        return new APIPromise(this.responsePromise, async (props)=>transform(await this.parseResponse(props)));\n    }\n    /**\n     * Gets the raw `Response` instance instead of parsing the response\n     * data.\n     *\n     * If you want to parse the response body but still get the `Response`\n     * instance, you can use {@link withResponse()}.\n     *\n     * 👋 Getting the wrong TypeScript type for `Response`?\n     * Try setting `\"moduleResolution\": \"NodeNext\"` if you can,\n     * or add one of these imports before your first `import … from 'openai'`:\n     * - `import 'openai/shims/node'` (if you're running on Node)\n     * - `import 'openai/shims/web'` (otherwise)\n     */ asResponse() {\n        return this.responsePromise.then((p)=>p.response);\n    }\n    /**\n     * Gets the parsed response data and the raw `Response` instance.\n     *\n     * If you just want to get the raw `Response` instance without parsing it,\n     * you can use {@link asResponse()}.\n     *\n     *\n     * 👋 Getting the wrong TypeScript type for `Response`?\n     * Try setting `\"moduleResolution\": \"NodeNext\"` if you can,\n     * or add one of these imports before your first `import … from 'openai'`:\n     * - `import 'openai/shims/node'` (if you're running on Node)\n     * - `import 'openai/shims/web'` (otherwise)\n     */ async withResponse() {\n        const [data, response] = await Promise.all([\n            this.parse(),\n            this.asResponse()\n        ]);\n        return {\n            data,\n            response\n        };\n    }\n    parse() {\n        if (!this.parsedPromise) {\n            this.parsedPromise = this.responsePromise.then(this.parseResponse);\n        }\n        return this.parsedPromise;\n    }\n    then(onfulfilled, onrejected) {\n        return this.parse().then(onfulfilled, onrejected);\n    }\n    catch(onrejected) {\n        return this.parse().catch(onrejected);\n    }\n    finally(onfinally) {\n        return this.parse().finally(onfinally);\n    }\n}\nclass APIClient {\n    constructor({ baseURL, maxRetries = 2, timeout = 600000, httpAgent, fetch: overridenFetch }){\n        this.baseURL = baseURL;\n        this.maxRetries = validatePositiveInteger(\"maxRetries\", maxRetries);\n        this.timeout = validatePositiveInteger(\"timeout\", timeout);\n        this.httpAgent = httpAgent;\n        this.fetch = overridenFetch ?? _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.fetch;\n    }\n    authHeaders(opts) {\n        return {};\n    }\n    /**\n     * Override this to add your own default headers, for example:\n     *\n     *  {\n     *    ...super.defaultHeaders(),\n     *    Authorization: 'Bearer 123',\n     *  }\n     */ defaultHeaders(opts) {\n        return {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n            \"User-Agent\": this.getUserAgent(),\n            ...getPlatformHeaders(),\n            ...this.authHeaders(opts)\n        };\n    }\n    /**\n     * Override this to add your own headers validation:\n     */ validateHeaders(headers, customHeaders) {}\n    defaultIdempotencyKey() {\n        return `stainless-node-retry-${uuid4()}`;\n    }\n    get(path, opts) {\n        return this.methodRequest(\"get\", path, opts);\n    }\n    post(path, opts) {\n        return this.methodRequest(\"post\", path, opts);\n    }\n    patch(path, opts) {\n        return this.methodRequest(\"patch\", path, opts);\n    }\n    put(path, opts) {\n        return this.methodRequest(\"put\", path, opts);\n    }\n    delete(path, opts) {\n        return this.methodRequest(\"delete\", path, opts);\n    }\n    methodRequest(method, path, opts) {\n        return this.request(Promise.resolve(opts).then((opts)=>({\n                method,\n                path,\n                ...opts\n            })));\n    }\n    getAPIList(path, Page, opts) {\n        return this.requestAPIList(Page, {\n            method: \"get\",\n            path,\n            ...opts\n        });\n    }\n    calculateContentLength(body) {\n        if (typeof body === \"string\") {\n            if (typeof Buffer !== \"undefined\") {\n                return Buffer.byteLength(body, \"utf8\").toString();\n            }\n            if (typeof TextEncoder !== \"undefined\") {\n                const encoder = new TextEncoder();\n                const encoded = encoder.encode(body);\n                return encoded.length.toString();\n            }\n        }\n        return null;\n    }\n    buildRequest(options) {\n        const { method, path, query, headers: headers = {} } = options;\n        const body = (0,_uploads_mjs__WEBPACK_IMPORTED_MODULE_1__.isMultipartBody)(options.body) ? options.body.body : options.body ? JSON.stringify(options.body, null, 2) : null;\n        const contentLength = this.calculateContentLength(body);\n        const url = this.buildURL(path, query);\n        if (\"timeout\" in options) validatePositiveInteger(\"timeout\", options.timeout);\n        const timeout = options.timeout ?? this.timeout;\n        const httpAgent = options.httpAgent ?? this.httpAgent ?? (0,_shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.getDefaultAgent)(url);\n        const minAgentTimeout = timeout + 1000;\n        if (typeof httpAgent?.options?.timeout === \"number\" && minAgentTimeout > (httpAgent.options.timeout ?? 0)) {\n            // Allow any given request to bump our agent active socket timeout.\n            // This may seem strange, but leaking active sockets should be rare and not particularly problematic,\n            // and without mutating agent we would need to create more of them.\n            // This tradeoff optimizes for performance.\n            httpAgent.options.timeout = minAgentTimeout;\n        }\n        if (this.idempotencyHeader && method !== \"get\") {\n            if (!options.idempotencyKey) options.idempotencyKey = this.defaultIdempotencyKey();\n            headers[this.idempotencyHeader] = options.idempotencyKey;\n        }\n        const reqHeaders = {\n            ...contentLength && {\n                \"Content-Length\": contentLength\n            },\n            ...this.defaultHeaders(options),\n            ...headers\n        };\n        // let builtin fetch set the Content-Type for multipart bodies\n        if ((0,_uploads_mjs__WEBPACK_IMPORTED_MODULE_1__.isMultipartBody)(options.body) && _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.kind !== \"node\") {\n            delete reqHeaders[\"Content-Type\"];\n        }\n        // Strip any headers being explicitly omitted with null\n        Object.keys(reqHeaders).forEach((key)=>reqHeaders[key] === null && delete reqHeaders[key]);\n        const req = {\n            method,\n            ...body && {\n                body: body\n            },\n            headers: reqHeaders,\n            ...httpAgent && {\n                agent: httpAgent\n            },\n            // @ts-ignore node-fetch uses a custom AbortSignal type that is\n            // not compatible with standard web types\n            signal: options.signal ?? null\n        };\n        this.validateHeaders(reqHeaders, headers);\n        return {\n            req,\n            url,\n            timeout\n        };\n    }\n    /**\n     * Used as a callback for mutating the given `RequestInit` object.\n     *\n     * This is useful for cases where you want to add certain headers based off of\n     * the request properties, e.g. `method` or `url`.\n     */ async prepareRequest(request, { url, options }) {}\n    parseHeaders(headers) {\n        return !headers ? {} : Symbol.iterator in headers ? Object.fromEntries(Array.from(headers).map((header)=>[\n                ...header\n            ])) : {\n            ...headers\n        };\n    }\n    makeStatusError(status, error, message, headers) {\n        return _error_mjs__WEBPACK_IMPORTED_MODULE_3__.APIError.generate(status, error, message, headers);\n    }\n    request(options, remainingRetries = null) {\n        return new APIPromise(this.makeRequest(options, remainingRetries));\n    }\n    async makeRequest(optionsInput, retriesRemaining) {\n        const options = await optionsInput;\n        if (retriesRemaining == null) {\n            retriesRemaining = options.maxRetries ?? this.maxRetries;\n        }\n        const { req, url, timeout } = this.buildRequest(options);\n        await this.prepareRequest(req, {\n            url,\n            options\n        });\n        debug(\"request\", url, options, req.headers);\n        if (options.signal?.aborted) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.APIUserAbortError();\n        }\n        const controller = new AbortController();\n        const response = await this.fetchWithTimeout(url, req, timeout, controller).catch(castToError);\n        if (response instanceof Error) {\n            if (options.signal?.aborted) {\n                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.APIUserAbortError();\n            }\n            if (retriesRemaining) {\n                return this.retryRequest(options, retriesRemaining);\n            }\n            if (response.name === \"AbortError\") {\n                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.APIConnectionTimeoutError();\n            }\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.APIConnectionError({\n                cause: response\n            });\n        }\n        const responseHeaders = createResponseHeaders(response.headers);\n        if (!response.ok) {\n            if (retriesRemaining && this.shouldRetry(response)) {\n                return this.retryRequest(options, retriesRemaining, responseHeaders);\n            }\n            const errText = await response.text().catch((e)=>castToError(e).message);\n            const errJSON = safeJSON(errText);\n            const errMessage = errJSON ? undefined : errText;\n            debug(\"response\", response.status, url, responseHeaders, errMessage);\n            const err = this.makeStatusError(response.status, errJSON, errMessage, responseHeaders);\n            throw err;\n        }\n        return {\n            response,\n            options,\n            controller\n        };\n    }\n    requestAPIList(Page, options) {\n        const request = this.makeRequest(options, null);\n        return new PagePromise(this, request, Page);\n    }\n    buildURL(path, query) {\n        const url = isAbsoluteURL(path) ? new URL(path) : new URL(this.baseURL + (this.baseURL.endsWith(\"/\") && path.startsWith(\"/\") ? path.slice(1) : path));\n        const defaultQuery = this.defaultQuery();\n        if (!isEmptyObj(defaultQuery)) {\n            query = {\n                ...defaultQuery,\n                ...query\n            };\n        }\n        if (query) {\n            url.search = this.stringifyQuery(query);\n        }\n        return url.toString();\n    }\n    stringifyQuery(query) {\n        return Object.entries(query).filter(([_, value])=>typeof value !== \"undefined\").map(([key, value])=>{\n            if (typeof value === \"string\" || typeof value === \"number\" || typeof value === \"boolean\") {\n                return `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;\n            }\n            if (value === null) {\n                return `${encodeURIComponent(key)}=`;\n            }\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.OpenAIError(`Cannot stringify type ${typeof value}; Expected string, number, boolean, or null. If you need to pass nested query parameters, you can manually encode them, e.g. { query: { 'foo[key1]': value1, 'foo[key2]': value2 } }, and please open a GitHub issue requesting better support for your use case.`);\n        }).join(\"&\");\n    }\n    async fetchWithTimeout(url, init, ms, controller) {\n        const { signal, ...options } = init || {};\n        if (signal) signal.addEventListener(\"abort\", ()=>controller.abort());\n        const timeout = setTimeout(()=>controller.abort(), ms);\n        return this.getRequestClient()// use undefined this binding; fetch errors if bound to something else in browser/cloudflare\n        .fetch.call(undefined, url, {\n            signal: controller.signal,\n            ...options\n        }).finally(()=>{\n            clearTimeout(timeout);\n        });\n    }\n    getRequestClient() {\n        return {\n            fetch: this.fetch\n        };\n    }\n    shouldRetry(response) {\n        // Note this is not a standard header.\n        const shouldRetryHeader = response.headers.get(\"x-should-retry\");\n        // If the server explicitly says whether or not to retry, obey.\n        if (shouldRetryHeader === \"true\") return true;\n        if (shouldRetryHeader === \"false\") return false;\n        // Retry on request timeouts.\n        if (response.status === 408) return true;\n        // Retry on lock timeouts.\n        if (response.status === 409) return true;\n        // Retry on rate limits.\n        if (response.status === 429) return true;\n        // Retry internal errors.\n        if (response.status >= 500) return true;\n        return false;\n    }\n    async retryRequest(options, retriesRemaining, responseHeaders) {\n        // About the Retry-After header: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After\n        let timeoutMillis;\n        const retryAfterHeader = responseHeaders?.[\"retry-after\"];\n        if (retryAfterHeader) {\n            const timeoutSeconds = parseInt(retryAfterHeader);\n            if (!Number.isNaN(timeoutSeconds)) {\n                timeoutMillis = timeoutSeconds * 1000;\n            } else {\n                timeoutMillis = Date.parse(retryAfterHeader) - Date.now();\n            }\n        }\n        // If the API asks us to wait a certain amount of time (and it's a reasonable amount),\n        // just do what it says, but otherwise calculate a default\n        if (!timeoutMillis || !Number.isInteger(timeoutMillis) || timeoutMillis <= 0 || timeoutMillis > 60 * 1000) {\n            const maxRetries = options.maxRetries ?? this.maxRetries;\n            timeoutMillis = this.calculateDefaultRetryTimeoutMillis(retriesRemaining, maxRetries);\n        }\n        await sleep(timeoutMillis);\n        return this.makeRequest(options, retriesRemaining - 1);\n    }\n    calculateDefaultRetryTimeoutMillis(retriesRemaining, maxRetries) {\n        const initialRetryDelay = 0.5;\n        const maxRetryDelay = 8.0;\n        const numRetries = maxRetries - retriesRemaining;\n        // Apply exponential backoff, but not more than the max.\n        const sleepSeconds = Math.min(initialRetryDelay * Math.pow(2, numRetries), maxRetryDelay);\n        // Apply some jitter, take up to at most 25 percent of the retry time.\n        const jitter = 1 - Math.random() * 0.25;\n        return sleepSeconds * jitter * 1000;\n    }\n    getUserAgent() {\n        return `${this.constructor.name}/JS ${_version_mjs__WEBPACK_IMPORTED_MODULE_4__.VERSION}`;\n    }\n}\nclass AbstractPage {\n    constructor(client, response, body, options){\n        _AbstractPage_client.set(this, void 0);\n        __classPrivateFieldSet(this, _AbstractPage_client, client, \"f\");\n        this.options = options;\n        this.response = response;\n        this.body = body;\n    }\n    hasNextPage() {\n        const items = this.getPaginatedItems();\n        if (!items.length) return false;\n        return this.nextPageInfo() != null;\n    }\n    async getNextPage() {\n        const nextInfo = this.nextPageInfo();\n        if (!nextInfo) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.OpenAIError(\"No next page expected; please check `.hasNextPage()` before calling `.getNextPage()`.\");\n        }\n        const nextOptions = {\n            ...this.options\n        };\n        if (\"params\" in nextInfo) {\n            nextOptions.query = {\n                ...nextOptions.query,\n                ...nextInfo.params\n            };\n        } else if (\"url\" in nextInfo) {\n            const params = [\n                ...Object.entries(nextOptions.query || {}),\n                ...nextInfo.url.searchParams.entries()\n            ];\n            for (const [key, value] of params){\n                nextInfo.url.searchParams.set(key, value);\n            }\n            nextOptions.query = undefined;\n            nextOptions.path = nextInfo.url.toString();\n        }\n        return await __classPrivateFieldGet(this, _AbstractPage_client, \"f\").requestAPIList(this.constructor, nextOptions);\n    }\n    async *iterPages() {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        let page = this;\n        yield page;\n        while(page.hasNextPage()){\n            page = await page.getNextPage();\n            yield page;\n        }\n    }\n    async *[(_AbstractPage_client = new WeakMap(), Symbol.asyncIterator)]() {\n        for await (const page of this.iterPages()){\n            for (const item of page.getPaginatedItems()){\n                yield item;\n            }\n        }\n    }\n}\n/**\n * This subclass of Promise will resolve to an instantiated Page once the request completes.\n *\n * It also implements AsyncIterable to allow auto-paginating iteration on an unawaited list call, eg:\n *\n *    for await (const item of client.items.list()) {\n *      console.log(item)\n *    }\n */ class PagePromise extends APIPromise {\n    constructor(client, request, Page){\n        super(request, async (props)=>new Page(client, props.response, await defaultParseResponse(props), props.options));\n    }\n    /**\n     * Allow auto-paginating iteration on an unawaited list call, eg:\n     *\n     *    for await (const item of client.items.list()) {\n     *      console.log(item)\n     *    }\n     */ async *[Symbol.asyncIterator]() {\n        const page = await this;\n        for await (const item of page){\n            yield item;\n        }\n    }\n}\nconst createResponseHeaders = (headers)=>{\n    return new Proxy(Object.fromEntries(// @ts-ignore\n    headers.entries()), {\n        get (target, name) {\n            const key = name.toString();\n            return target[key.toLowerCase()] || target[key];\n        }\n    });\n};\n// This is required so that we can determine if a given object matches the RequestOptions\n// type at runtime. While this requires duplication, it is enforced by the TypeScript\n// compiler such that any missing / extraneous keys will cause an error.\nconst requestOptionsKeys = {\n    method: true,\n    path: true,\n    query: true,\n    body: true,\n    headers: true,\n    maxRetries: true,\n    stream: true,\n    timeout: true,\n    httpAgent: true,\n    signal: true,\n    idempotencyKey: true,\n    __binaryResponse: true\n};\nconst isRequestOptions = (obj)=>{\n    return typeof obj === \"object\" && obj !== null && !isEmptyObj(obj) && Object.keys(obj).every((k)=>hasOwn(requestOptionsKeys, k));\n};\nconst getPlatformProperties = ()=>{\n    if (typeof Deno !== \"undefined\" && Deno.build != null) {\n        return {\n            \"X-Stainless-Lang\": \"js\",\n            \"X-Stainless-Package-Version\": _version_mjs__WEBPACK_IMPORTED_MODULE_4__.VERSION,\n            \"X-Stainless-OS\": normalizePlatform(Deno.build.os),\n            \"X-Stainless-Arch\": normalizeArch(Deno.build.arch),\n            \"X-Stainless-Runtime\": \"deno\",\n            \"X-Stainless-Runtime-Version\": Deno.version\n        };\n    }\n    if (typeof EdgeRuntime !== \"undefined\") {\n        return {\n            \"X-Stainless-Lang\": \"js\",\n            \"X-Stainless-Package-Version\": _version_mjs__WEBPACK_IMPORTED_MODULE_4__.VERSION,\n            \"X-Stainless-OS\": \"Unknown\",\n            \"X-Stainless-Arch\": `other:${EdgeRuntime}`,\n            \"X-Stainless-Runtime\": \"edge\",\n            \"X-Stainless-Runtime-Version\": process.version\n        };\n    }\n    // Check if Node.js\n    if (Object.prototype.toString.call(typeof process !== \"undefined\" ? process : 0) === \"[object process]\") {\n        return {\n            \"X-Stainless-Lang\": \"js\",\n            \"X-Stainless-Package-Version\": _version_mjs__WEBPACK_IMPORTED_MODULE_4__.VERSION,\n            \"X-Stainless-OS\": normalizePlatform(process.platform),\n            \"X-Stainless-Arch\": normalizeArch(process.arch),\n            \"X-Stainless-Runtime\": \"node\",\n            \"X-Stainless-Runtime-Version\": process.version\n        };\n    }\n    const browserInfo = getBrowserInfo();\n    if (browserInfo) {\n        return {\n            \"X-Stainless-Lang\": \"js\",\n            \"X-Stainless-Package-Version\": _version_mjs__WEBPACK_IMPORTED_MODULE_4__.VERSION,\n            \"X-Stainless-OS\": \"Unknown\",\n            \"X-Stainless-Arch\": \"unknown\",\n            \"X-Stainless-Runtime\": `browser:${browserInfo.browser}`,\n            \"X-Stainless-Runtime-Version\": browserInfo.version\n        };\n    }\n    // TODO add support for Cloudflare workers, etc.\n    return {\n        \"X-Stainless-Lang\": \"js\",\n        \"X-Stainless-Package-Version\": _version_mjs__WEBPACK_IMPORTED_MODULE_4__.VERSION,\n        \"X-Stainless-OS\": \"Unknown\",\n        \"X-Stainless-Arch\": \"unknown\",\n        \"X-Stainless-Runtime\": \"unknown\",\n        \"X-Stainless-Runtime-Version\": \"unknown\"\n    };\n};\n// Note: modified from https://github.com/JS-DevTools/host-environment/blob/b1ab79ecde37db5d6e163c050e54fe7d287d7c92/src/isomorphic.browser.ts\nfunction getBrowserInfo() {\n    if (typeof navigator === \"undefined\" || !navigator) {\n        return null;\n    }\n    // NOTE: The order matters here!\n    const browserPatterns = [\n        {\n            key: \"edge\",\n            pattern: /Edge(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n        },\n        {\n            key: \"ie\",\n            pattern: /MSIE(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n        },\n        {\n            key: \"ie\",\n            pattern: /Trident(?:.*rv\\:(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n        },\n        {\n            key: \"chrome\",\n            pattern: /Chrome(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n        },\n        {\n            key: \"firefox\",\n            pattern: /Firefox(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n        },\n        {\n            key: \"safari\",\n            pattern: /(?:Version\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?(?:\\W+Mobile\\S*)?\\W+Safari/\n        }\n    ];\n    // Find the FIRST matching browser\n    for (const { key, pattern } of browserPatterns){\n        const match = pattern.exec(navigator.userAgent);\n        if (match) {\n            const major = match[1] || 0;\n            const minor = match[2] || 0;\n            const patch = match[3] || 0;\n            return {\n                browser: key,\n                version: `${major}.${minor}.${patch}`\n            };\n        }\n    }\n    return null;\n}\nconst normalizeArch = (arch)=>{\n    // Node docs:\n    // - https://nodejs.org/api/process.html#processarch\n    // Deno docs:\n    // - https://doc.deno.land/deno/stable/~/Deno.build\n    if (arch === \"x32\") return \"x32\";\n    if (arch === \"x86_64\" || arch === \"x64\") return \"x64\";\n    if (arch === \"arm\") return \"arm\";\n    if (arch === \"aarch64\" || arch === \"arm64\") return \"arm64\";\n    if (arch) return `other:${arch}`;\n    return \"unknown\";\n};\nconst normalizePlatform = (platform)=>{\n    // Node platforms:\n    // - https://nodejs.org/api/process.html#processplatform\n    // Deno platforms:\n    // - https://doc.deno.land/deno/stable/~/Deno.build\n    // - https://github.com/denoland/deno/issues/14799\n    platform = platform.toLowerCase();\n    // NOTE: this iOS check is untested and may not work\n    // Node does not work natively on IOS, there is a fork at\n    // https://github.com/nodejs-mobile/nodejs-mobile\n    // however it is unknown at the time of writing how to detect if it is running\n    if (platform.includes(\"ios\")) return \"iOS\";\n    if (platform === \"android\") return \"Android\";\n    if (platform === \"darwin\") return \"MacOS\";\n    if (platform === \"win32\") return \"Windows\";\n    if (platform === \"freebsd\") return \"FreeBSD\";\n    if (platform === \"openbsd\") return \"OpenBSD\";\n    if (platform === \"linux\") return \"Linux\";\n    if (platform) return `Other:${platform}`;\n    return \"Unknown\";\n};\nlet _platformHeaders;\nconst getPlatformHeaders = ()=>{\n    return _platformHeaders ?? (_platformHeaders = getPlatformProperties());\n};\nconst safeJSON = (text)=>{\n    try {\n        return JSON.parse(text);\n    } catch (err) {\n        return undefined;\n    }\n};\n// https://stackoverflow.com/a/19709846\nconst startsWithSchemeRegexp = new RegExp(\"^(?:[a-z]+:)?//\", \"i\");\nconst isAbsoluteURL = (url)=>{\n    return startsWithSchemeRegexp.test(url);\n};\nconst sleep = (ms)=>new Promise((resolve)=>setTimeout(resolve, ms));\nconst validatePositiveInteger = (name, n)=>{\n    if (typeof n !== \"number\" || !Number.isInteger(n)) {\n        throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.OpenAIError(`${name} must be an integer`);\n    }\n    if (n < 0) {\n        throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.OpenAIError(`${name} must be a positive integer`);\n    }\n    return n;\n};\nconst castToError = (err)=>{\n    if (err instanceof Error) return err;\n    return new Error(err);\n};\nconst ensurePresent = (value)=>{\n    if (value == null) throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.OpenAIError(`Expected a value to be given but received ${value} instead.`);\n    return value;\n};\n/**\n * Read an environment variable.\n *\n * Will return undefined if the environment variable doesn't exist or cannot be accessed.\n */ const readEnv = (env)=>{\n    if (typeof process !== \"undefined\") {\n        return process.env?.[env] ?? undefined;\n    }\n    if (typeof Deno !== \"undefined\") {\n        return Deno.env?.get?.(env);\n    }\n    return undefined;\n};\nconst coerceInteger = (value)=>{\n    if (typeof value === \"number\") return Math.round(value);\n    if (typeof value === \"string\") return parseInt(value, 10);\n    throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.OpenAIError(`Could not coerce ${value} (type: ${typeof value}) into a number`);\n};\nconst coerceFloat = (value)=>{\n    if (typeof value === \"number\") return value;\n    if (typeof value === \"string\") return parseFloat(value);\n    throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.OpenAIError(`Could not coerce ${value} (type: ${typeof value}) into a number`);\n};\nconst coerceBoolean = (value)=>{\n    if (typeof value === \"boolean\") return value;\n    if (typeof value === \"string\") return value === \"true\";\n    return Boolean(value);\n};\nconst maybeCoerceInteger = (value)=>{\n    if (value === undefined) {\n        return undefined;\n    }\n    return coerceInteger(value);\n};\nconst maybeCoerceFloat = (value)=>{\n    if (value === undefined) {\n        return undefined;\n    }\n    return coerceFloat(value);\n};\nconst maybeCoerceBoolean = (value)=>{\n    if (value === undefined) {\n        return undefined;\n    }\n    return coerceBoolean(value);\n};\n// https://stackoverflow.com/a/34491287\nfunction isEmptyObj(obj) {\n    if (!obj) return true;\n    for(const _k in obj)return false;\n    return true;\n}\n// https://eslint.org/docs/latest/rules/no-prototype-builtins\nfunction hasOwn(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key);\n}\nfunction debug(action, ...args) {\n    if (typeof process !== \"undefined\" && process.env[\"DEBUG\"] === \"true\") {\n        console.log(`OpenAI:DEBUG:${action}`, ...args);\n    }\n}\n/**\n * https://stackoverflow.com/a/2117523\n */ const uuid4 = ()=>{\n    return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c)=>{\n        const r = Math.random() * 16 | 0;\n        const v = c === \"x\" ? r : r & 0x3 | 0x8;\n        return v.toString(16);\n    });\n};\nconst isRunningInBrowser = ()=>{\n    return(// @ts-ignore\n     false && // @ts-ignore\n    0);\n};\nconst isHeadersProtocol = (headers)=>{\n    return typeof headers?.get === \"function\";\n};\nconst getRequiredHeader = (headers, header)=>{\n    const lowerCasedHeader = header.toLowerCase();\n    if (isHeadersProtocol(headers)) {\n        // to deal with the case where the header looks like Stainless-Event-Id\n        const intercapsHeader = header[0]?.toUpperCase() + header.substring(1).replace(/([^\\w])(\\w)/g, (_m, g1, g2)=>g1 + g2.toUpperCase());\n        for (const key of [\n            header,\n            lowerCasedHeader,\n            header.toUpperCase(),\n            intercapsHeader\n        ]){\n            const value = headers.get(key);\n            if (value) {\n                return value;\n            }\n        }\n    }\n    for (const [key, value] of Object.entries(headers)){\n        if (key.toLowerCase() === lowerCasedHeader) {\n            if (Array.isArray(value)) {\n                if (value.length <= 1) return value[0];\n                console.warn(`Received ${value.length} entries for the ${header} header, using the first entry.`);\n                return value[0];\n            }\n            return value;\n        }\n    }\n    throw new Error(`Could not find ${header} header`);\n};\n/**\n * Encodes a string to Base64 format.\n */ const toBase64 = (str)=>{\n    if (!str) return \"\";\n    if (typeof Buffer !== \"undefined\") {\n        return Buffer.from(str).toString(\"base64\");\n    }\n    if (typeof btoa !== \"undefined\") {\n        return btoa(str);\n    }\n    throw new _error_mjs__WEBPACK_IMPORTED_MODULE_3__.OpenAIError(\"Cannot generate b64 string; Expected `Buffer` or `btoa` to be defined\");\n}; //# sourceMappingURL=core.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/openai/core.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/openai/error.mjs":
/*!***************************************!*\
  !*** ./node_modules/openai/error.mjs ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIConnectionError: () => (/* binding */ APIConnectionError),\n/* harmony export */   APIConnectionTimeoutError: () => (/* binding */ APIConnectionTimeoutError),\n/* harmony export */   APIError: () => (/* binding */ APIError),\n/* harmony export */   APIUserAbortError: () => (/* binding */ APIUserAbortError),\n/* harmony export */   AuthenticationError: () => (/* binding */ AuthenticationError),\n/* harmony export */   BadRequestError: () => (/* binding */ BadRequestError),\n/* harmony export */   ConflictError: () => (/* binding */ ConflictError),\n/* harmony export */   InternalServerError: () => (/* binding */ InternalServerError),\n/* harmony export */   NotFoundError: () => (/* binding */ NotFoundError),\n/* harmony export */   OpenAIError: () => (/* binding */ OpenAIError),\n/* harmony export */   PermissionDeniedError: () => (/* binding */ PermissionDeniedError),\n/* harmony export */   RateLimitError: () => (/* binding */ RateLimitError),\n/* harmony export */   UnprocessableEntityError: () => (/* binding */ UnprocessableEntityError)\n/* harmony export */ });\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core.mjs */ \"(action-browser)/./node_modules/openai/core.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\nclass OpenAIError extends Error {\n}\nclass APIError extends OpenAIError {\n    constructor(status, error, message, headers){\n        super(`${APIError.makeMessage(status, error, message)}`);\n        this.status = status;\n        this.headers = headers;\n        const data = error;\n        this.error = data;\n        this.code = data?.[\"code\"];\n        this.param = data?.[\"param\"];\n        this.type = data?.[\"type\"];\n    }\n    static makeMessage(status, error, message) {\n        const msg = error?.message ? typeof error.message === \"string\" ? error.message : JSON.stringify(error.message) : error ? JSON.stringify(error) : message;\n        if (status && msg) {\n            return `${status} ${msg}`;\n        }\n        if (status) {\n            return `${status} status code (no body)`;\n        }\n        if (msg) {\n            return msg;\n        }\n        return \"(no status code or body)\";\n    }\n    static generate(status, errorResponse, message, headers) {\n        if (!status) {\n            return new APIConnectionError({\n                cause: (0,_core_mjs__WEBPACK_IMPORTED_MODULE_0__.castToError)(errorResponse)\n            });\n        }\n        const error = errorResponse?.[\"error\"];\n        if (status === 400) {\n            return new BadRequestError(status, error, message, headers);\n        }\n        if (status === 401) {\n            return new AuthenticationError(status, error, message, headers);\n        }\n        if (status === 403) {\n            return new PermissionDeniedError(status, error, message, headers);\n        }\n        if (status === 404) {\n            return new NotFoundError(status, error, message, headers);\n        }\n        if (status === 409) {\n            return new ConflictError(status, error, message, headers);\n        }\n        if (status === 422) {\n            return new UnprocessableEntityError(status, error, message, headers);\n        }\n        if (status === 429) {\n            return new RateLimitError(status, error, message, headers);\n        }\n        if (status >= 500) {\n            return new InternalServerError(status, error, message, headers);\n        }\n        return new APIError(status, error, message, headers);\n    }\n}\nclass APIUserAbortError extends APIError {\n    constructor({ message } = {}){\n        super(undefined, undefined, message || \"Request was aborted.\", undefined);\n        this.status = undefined;\n    }\n}\nclass APIConnectionError extends APIError {\n    constructor({ message, cause }){\n        super(undefined, undefined, message || \"Connection error.\", undefined);\n        this.status = undefined;\n        // in some environments the 'cause' property is already declared\n        // @ts-ignore\n        if (cause) this.cause = cause;\n    }\n}\nclass APIConnectionTimeoutError extends APIConnectionError {\n    constructor({ message } = {}){\n        super({\n            message: message ?? \"Request timed out.\"\n        });\n    }\n}\nclass BadRequestError extends APIError {\n    constructor(){\n        super(...arguments);\n        this.status = 400;\n    }\n}\nclass AuthenticationError extends APIError {\n    constructor(){\n        super(...arguments);\n        this.status = 401;\n    }\n}\nclass PermissionDeniedError extends APIError {\n    constructor(){\n        super(...arguments);\n        this.status = 403;\n    }\n}\nclass NotFoundError extends APIError {\n    constructor(){\n        super(...arguments);\n        this.status = 404;\n    }\n}\nclass ConflictError extends APIError {\n    constructor(){\n        super(...arguments);\n        this.status = 409;\n    }\n}\nclass UnprocessableEntityError extends APIError {\n    constructor(){\n        super(...arguments);\n        this.status = 422;\n    }\n}\nclass RateLimitError extends APIError {\n    constructor(){\n        super(...arguments);\n        this.status = 429;\n    }\n}\nclass InternalServerError extends APIError {\n} //# sourceMappingURL=error.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/openai/error.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/openai/index.mjs":
/*!***************************************!*\
  !*** ./node_modules/openai/index.mjs ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIConnectionError: () => (/* binding */ APIConnectionError),\n/* harmony export */   APIConnectionTimeoutError: () => (/* binding */ APIConnectionTimeoutError),\n/* harmony export */   APIError: () => (/* binding */ APIError),\n/* harmony export */   APIUserAbortError: () => (/* binding */ APIUserAbortError),\n/* harmony export */   AuthenticationError: () => (/* binding */ AuthenticationError),\n/* harmony export */   BadRequestError: () => (/* binding */ BadRequestError),\n/* harmony export */   ConflictError: () => (/* binding */ ConflictError),\n/* harmony export */   InternalServerError: () => (/* binding */ InternalServerError),\n/* harmony export */   NotFoundError: () => (/* binding */ NotFoundError),\n/* harmony export */   OpenAI: () => (/* binding */ OpenAI),\n/* harmony export */   OpenAIError: () => (/* binding */ OpenAIError),\n/* harmony export */   PermissionDeniedError: () => (/* binding */ PermissionDeniedError),\n/* harmony export */   RateLimitError: () => (/* binding */ RateLimitError),\n/* harmony export */   UnprocessableEntityError: () => (/* binding */ UnprocessableEntityError),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   fileFromPath: () => (/* binding */ fileFromPath),\n/* harmony export */   toFile: () => (/* binding */ toFile)\n/* harmony export */ });\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core.mjs */ \"(action-browser)/./node_modules/openai/core.mjs\");\n/* harmony import */ var _pagination_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./pagination.mjs */ \"(action-browser)/./node_modules/openai/pagination.mjs\");\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./error.mjs */ \"(action-browser)/./node_modules/openai/error.mjs\");\n/* harmony import */ var _uploads_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./uploads.mjs */ \"(action-browser)/./node_modules/openai/uploads.mjs\");\n/* harmony import */ var openai_resources_index__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai/resources/index */ \"(action-browser)/./node_modules/openai/resources/index.mjs\");\n// File generated from our OpenAPI spec by Stainless.\nvar _a;\n\n\n\n\n\n/** API Client for interfacing with the OpenAI API. */ class OpenAI extends _core_mjs__WEBPACK_IMPORTED_MODULE_0__.APIClient {\n    /**\n     * API Client for interfacing with the OpenAI API.\n     *\n     * @param {string} [opts.apiKey==process.env['OPENAI_API_KEY'] ?? undefined]\n     * @param {string | null} [opts.organization==process.env['OPENAI_ORG_ID'] ?? null]\n     * @param {string} [opts.baseURL] - Override the default base URL for the API.\n     * @param {number} [opts.timeout=10 minutes] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.\n     * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.\n     * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.\n     * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.\n     * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.\n     * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.\n     * @param {boolean} [opts.dangerouslyAllowBrowser=false] - By default, client-side use of this library is not allowed, as it risks exposing your secret API credentials to attackers.\n     */ constructor({ apiKey = _core_mjs__WEBPACK_IMPORTED_MODULE_0__.readEnv(\"OPENAI_API_KEY\"), organization = _core_mjs__WEBPACK_IMPORTED_MODULE_0__.readEnv(\"OPENAI_ORG_ID\") ?? null, ...opts } = {}){\n        if (apiKey === undefined) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(\"The OPENAI_API_KEY environment variable is missing or empty; either provide it, or instantiate the OpenAI client with an apiKey option, like new OpenAI({ apiKey: 'My API Key' }).\");\n        }\n        const options = {\n            apiKey,\n            organization,\n            ...opts,\n            baseURL: opts.baseURL ?? `https://api.openai.com/v1`\n        };\n        if (!options.dangerouslyAllowBrowser && _core_mjs__WEBPACK_IMPORTED_MODULE_0__.isRunningInBrowser()) {\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(\"It looks like you're running in a browser-like environment.\\n\\nThis is disabled by default, as it risks exposing your secret API credentials to attackers.\\nIf you understand the risks and have appropriate mitigations in place,\\nyou can set the `dangerouslyAllowBrowser` option to `true`, e.g.,\\n\\nnew OpenAI({ apiKey, dangerouslyAllowBrowser: true });\\n\\nhttps://help.openai.com/en/articles/5112595-best-practices-for-api-key-safety\\n\");\n        }\n        super({\n            baseURL: options.baseURL,\n            timeout: options.timeout ?? 600000 /* 10 minutes */ ,\n            httpAgent: options.httpAgent,\n            maxRetries: options.maxRetries,\n            fetch: options.fetch\n        });\n        this.completions = new openai_resources_index__WEBPACK_IMPORTED_MODULE_2__.Completions(this);\n        this.chat = new openai_resources_index__WEBPACK_IMPORTED_MODULE_2__.Chat(this);\n        this.edits = new openai_resources_index__WEBPACK_IMPORTED_MODULE_2__.Edits(this);\n        this.embeddings = new openai_resources_index__WEBPACK_IMPORTED_MODULE_2__.Embeddings(this);\n        this.files = new openai_resources_index__WEBPACK_IMPORTED_MODULE_2__.Files(this);\n        this.images = new openai_resources_index__WEBPACK_IMPORTED_MODULE_2__.Images(this);\n        this.audio = new openai_resources_index__WEBPACK_IMPORTED_MODULE_2__.Audio(this);\n        this.moderations = new openai_resources_index__WEBPACK_IMPORTED_MODULE_2__.Moderations(this);\n        this.models = new openai_resources_index__WEBPACK_IMPORTED_MODULE_2__.Models(this);\n        this.fineTuning = new openai_resources_index__WEBPACK_IMPORTED_MODULE_2__.FineTuning(this);\n        this.fineTunes = new openai_resources_index__WEBPACK_IMPORTED_MODULE_2__.FineTunes(this);\n        this.beta = new openai_resources_index__WEBPACK_IMPORTED_MODULE_2__.Beta(this);\n        this._options = options;\n        this.apiKey = apiKey;\n        this.organization = organization;\n    }\n    defaultQuery() {\n        return this._options.defaultQuery;\n    }\n    defaultHeaders(opts) {\n        return {\n            ...super.defaultHeaders(opts),\n            \"OpenAI-Organization\": this.organization,\n            ...this._options.defaultHeaders\n        };\n    }\n    authHeaders(opts) {\n        return {\n            Authorization: `Bearer ${this.apiKey}`\n        };\n    }\n}\n_a = OpenAI;\nOpenAI.OpenAI = _a;\nOpenAI.OpenAIError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError;\nOpenAI.APIError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.APIError;\nOpenAI.APIConnectionError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.APIConnectionError;\nOpenAI.APIConnectionTimeoutError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.APIConnectionTimeoutError;\nOpenAI.APIUserAbortError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.APIUserAbortError;\nOpenAI.NotFoundError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.NotFoundError;\nOpenAI.ConflictError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.ConflictError;\nOpenAI.RateLimitError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.RateLimitError;\nOpenAI.BadRequestError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.BadRequestError;\nOpenAI.AuthenticationError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.AuthenticationError;\nOpenAI.InternalServerError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.InternalServerError;\nOpenAI.PermissionDeniedError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.PermissionDeniedError;\nOpenAI.UnprocessableEntityError = _error_mjs__WEBPACK_IMPORTED_MODULE_1__.UnprocessableEntityError;\nconst { OpenAIError, APIError, APIConnectionError, APIConnectionTimeoutError, APIUserAbortError, NotFoundError, ConflictError, RateLimitError, BadRequestError, AuthenticationError, InternalServerError, PermissionDeniedError, UnprocessableEntityError } = _error_mjs__WEBPACK_IMPORTED_MODULE_1__;\nvar toFile = _uploads_mjs__WEBPACK_IMPORTED_MODULE_3__.toFile;\nvar fileFromPath = _uploads_mjs__WEBPACK_IMPORTED_MODULE_3__.fileFromPath;\n(function(OpenAI) {\n    // Helper functions\n    OpenAI.toFile = _uploads_mjs__WEBPACK_IMPORTED_MODULE_3__.toFile;\n    OpenAI.fileFromPath = _uploads_mjs__WEBPACK_IMPORTED_MODULE_3__.fileFromPath;\n    OpenAI.Page = _pagination_mjs__WEBPACK_IMPORTED_MODULE_4__.Page;\n    OpenAI.CursorPage = _pagination_mjs__WEBPACK_IMPORTED_MODULE_4__.CursorPage;\n    OpenAI.Completions = openai_resources_index__WEBPACK_IMPORTED_MODULE_2__.Completions;\n    OpenAI.Chat = openai_resources_index__WEBPACK_IMPORTED_MODULE_2__.Chat;\n    OpenAI.Edits = openai_resources_index__WEBPACK_IMPORTED_MODULE_2__.Edits;\n    OpenAI.Embeddings = openai_resources_index__WEBPACK_IMPORTED_MODULE_2__.Embeddings;\n    OpenAI.Files = openai_resources_index__WEBPACK_IMPORTED_MODULE_2__.Files;\n    OpenAI.FileObjectsPage = openai_resources_index__WEBPACK_IMPORTED_MODULE_2__.FileObjectsPage;\n    OpenAI.Images = openai_resources_index__WEBPACK_IMPORTED_MODULE_2__.Images;\n    OpenAI.Audio = openai_resources_index__WEBPACK_IMPORTED_MODULE_2__.Audio;\n    OpenAI.Moderations = openai_resources_index__WEBPACK_IMPORTED_MODULE_2__.Moderations;\n    OpenAI.Models = openai_resources_index__WEBPACK_IMPORTED_MODULE_2__.Models;\n    OpenAI.ModelsPage = openai_resources_index__WEBPACK_IMPORTED_MODULE_2__.ModelsPage;\n    OpenAI.FineTuning = openai_resources_index__WEBPACK_IMPORTED_MODULE_2__.FineTuning;\n    OpenAI.FineTunes = openai_resources_index__WEBPACK_IMPORTED_MODULE_2__.FineTunes;\n    OpenAI.FineTunesPage = openai_resources_index__WEBPACK_IMPORTED_MODULE_2__.FineTunesPage;\n    OpenAI.Beta = openai_resources_index__WEBPACK_IMPORTED_MODULE_2__.Beta;\n})(OpenAI || (OpenAI = {}));\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (OpenAI); //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/openai/index.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/openai/lib/AbstractChatCompletionRunner.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/openai/lib/AbstractChatCompletionRunner.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbstractChatCompletionRunner: () => (/* binding */ AbstractChatCompletionRunner)\n/* harmony export */ });\n/* harmony import */ var openai_error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/error */ \"(action-browser)/./node_modules/openai/error.mjs\");\n/* harmony import */ var _RunnableFunction_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./RunnableFunction.mjs */ \"(action-browser)/./node_modules/openai/lib/RunnableFunction.mjs\");\n/* harmony import */ var _chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chatCompletionUtils.mjs */ \"(action-browser)/./node_modules/openai/lib/chatCompletionUtils.mjs\");\nvar __classPrivateFieldSet = undefined && undefined.__classPrivateFieldSet || function(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = undefined && undefined.__classPrivateFieldGet || function(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _AbstractChatCompletionRunner_instances, _AbstractChatCompletionRunner_connectedPromise, _AbstractChatCompletionRunner_resolveConnectedPromise, _AbstractChatCompletionRunner_rejectConnectedPromise, _AbstractChatCompletionRunner_endPromise, _AbstractChatCompletionRunner_resolveEndPromise, _AbstractChatCompletionRunner_rejectEndPromise, _AbstractChatCompletionRunner_listeners, _AbstractChatCompletionRunner_ended, _AbstractChatCompletionRunner_errored, _AbstractChatCompletionRunner_aborted, _AbstractChatCompletionRunner_catchingPromiseCreated, _AbstractChatCompletionRunner_getFinalContent, _AbstractChatCompletionRunner_getFinalMessage, _AbstractChatCompletionRunner_getFinalFunctionCall, _AbstractChatCompletionRunner_getFinalFunctionCallResult, _AbstractChatCompletionRunner_calculateTotalUsage, _AbstractChatCompletionRunner_handleError, _AbstractChatCompletionRunner_validateParams, _AbstractChatCompletionRunner_stringifyFunctionCallResult;\n\n\n\nconst DEFAULT_MAX_CHAT_COMPLETIONS = 10;\nclass AbstractChatCompletionRunner {\n    constructor(){\n        _AbstractChatCompletionRunner_instances.add(this);\n        this.controller = new AbortController();\n        _AbstractChatCompletionRunner_connectedPromise.set(this, void 0);\n        _AbstractChatCompletionRunner_resolveConnectedPromise.set(this, ()=>{});\n        _AbstractChatCompletionRunner_rejectConnectedPromise.set(this, ()=>{});\n        _AbstractChatCompletionRunner_endPromise.set(this, void 0);\n        _AbstractChatCompletionRunner_resolveEndPromise.set(this, ()=>{});\n        _AbstractChatCompletionRunner_rejectEndPromise.set(this, ()=>{});\n        _AbstractChatCompletionRunner_listeners.set(this, {});\n        this._chatCompletions = [];\n        this.messages = [];\n        _AbstractChatCompletionRunner_ended.set(this, false);\n        _AbstractChatCompletionRunner_errored.set(this, false);\n        _AbstractChatCompletionRunner_aborted.set(this, false);\n        _AbstractChatCompletionRunner_catchingPromiseCreated.set(this, false);\n        _AbstractChatCompletionRunner_handleError.set(this, (error)=>{\n            __classPrivateFieldSet(this, _AbstractChatCompletionRunner_errored, true, \"f\");\n            if (error instanceof Error && error.name === \"AbortError\") {\n                error = new openai_error__WEBPACK_IMPORTED_MODULE_0__.APIUserAbortError();\n            }\n            if (error instanceof openai_error__WEBPACK_IMPORTED_MODULE_0__.APIUserAbortError) {\n                __classPrivateFieldSet(this, _AbstractChatCompletionRunner_aborted, true, \"f\");\n                return this._emit(\"abort\", error);\n            }\n            if (error instanceof openai_error__WEBPACK_IMPORTED_MODULE_0__.OpenAIError) {\n                return this._emit(\"error\", error);\n            }\n            if (error instanceof Error) {\n                const openAIError = new openai_error__WEBPACK_IMPORTED_MODULE_0__.OpenAIError(error.message);\n                // @ts-ignore\n                openAIError.cause = error;\n                return this._emit(\"error\", openAIError);\n            }\n            return this._emit(\"error\", new openai_error__WEBPACK_IMPORTED_MODULE_0__.OpenAIError(String(error)));\n        });\n        __classPrivateFieldSet(this, _AbstractChatCompletionRunner_connectedPromise, new Promise((resolve, reject)=>{\n            __classPrivateFieldSet(this, _AbstractChatCompletionRunner_resolveConnectedPromise, resolve, \"f\");\n            __classPrivateFieldSet(this, _AbstractChatCompletionRunner_rejectConnectedPromise, reject, \"f\");\n        }), \"f\");\n        __classPrivateFieldSet(this, _AbstractChatCompletionRunner_endPromise, new Promise((resolve, reject)=>{\n            __classPrivateFieldSet(this, _AbstractChatCompletionRunner_resolveEndPromise, resolve, \"f\");\n            __classPrivateFieldSet(this, _AbstractChatCompletionRunner_rejectEndPromise, reject, \"f\");\n        }), \"f\");\n        // Don't let these promises cause unhandled rejection errors.\n        // we will manually cause an unhandled rejection error later\n        // if the user hasn't registered any error listener or called\n        // any promise-returning method.\n        __classPrivateFieldGet(this, _AbstractChatCompletionRunner_connectedPromise, \"f\").catch(()=>{});\n        __classPrivateFieldGet(this, _AbstractChatCompletionRunner_endPromise, \"f\").catch(()=>{});\n    }\n    _run(executor) {\n        // Unfortunately if we call `executor()` immediately we get runtime errors about\n        // references to `this` before the `super()` constructor call returns.\n        setTimeout(()=>{\n            executor().then(()=>{\n                this._emitFinal();\n                this._emit(\"end\");\n            }, __classPrivateFieldGet(this, _AbstractChatCompletionRunner_handleError, \"f\"));\n        }, 0);\n    }\n    _addChatCompletion(chatCompletion) {\n        this._chatCompletions.push(chatCompletion);\n        this._emit(\"chatCompletion\", chatCompletion);\n        const message = chatCompletion.choices[0]?.message;\n        if (message) this._addMessage(message);\n        return chatCompletion;\n    }\n    _addMessage(message, emit = true) {\n        this.messages.push(message);\n        if (emit) {\n            this._emit(\"message\", message);\n            if (((0,_chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.isFunctionMessage)(message) || (0,_chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.isToolMessage)(message)) && message.content) {\n                // Note, this assumes that {role: 'tool', content: …} is always the result of a call of tool of type=function.\n                this._emit(\"functionCallResult\", message.content);\n            } else if ((0,_chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.isAssistantMessage)(message) && message.function_call) {\n                this._emit(\"functionCall\", message.function_call);\n            } else if ((0,_chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.isAssistantMessage)(message) && message.tool_calls) {\n                for (const tool_call of message.tool_calls){\n                    if (tool_call.type === \"function\") {\n                        this._emit(\"functionCall\", tool_call.function);\n                    }\n                }\n            }\n        }\n    }\n    _connected() {\n        if (this.ended) return;\n        __classPrivateFieldGet(this, _AbstractChatCompletionRunner_resolveConnectedPromise, \"f\").call(this);\n        this._emit(\"connect\");\n    }\n    get ended() {\n        return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_ended, \"f\");\n    }\n    get errored() {\n        return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_errored, \"f\");\n    }\n    get aborted() {\n        return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_aborted, \"f\");\n    }\n    abort() {\n        this.controller.abort();\n    }\n    /**\n     * Adds the listener function to the end of the listeners array for the event.\n     * No checks are made to see if the listener has already been added. Multiple calls passing\n     * the same combination of event and listener will result in the listener being added, and\n     * called, multiple times.\n     * @returns this ChatCompletionStream, so that calls can be chained\n     */ on(event, listener) {\n        const listeners = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_listeners, \"f\")[event] || (__classPrivateFieldGet(this, _AbstractChatCompletionRunner_listeners, \"f\")[event] = []);\n        listeners.push({\n            listener\n        });\n        return this;\n    }\n    /**\n     * Removes the specified listener from the listener array for the event.\n     * off() will remove, at most, one instance of a listener from the listener array. If any single\n     * listener has been added multiple times to the listener array for the specified event, then\n     * off() must be called multiple times to remove each instance.\n     * @returns this ChatCompletionStream, so that calls can be chained\n     */ off(event, listener) {\n        const listeners = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_listeners, \"f\")[event];\n        if (!listeners) return this;\n        const index = listeners.findIndex((l)=>l.listener === listener);\n        if (index >= 0) listeners.splice(index, 1);\n        return this;\n    }\n    /**\n     * Adds a one-time listener function for the event. The next time the event is triggered,\n     * this listener is removed and then invoked.\n     * @returns this ChatCompletionStream, so that calls can be chained\n     */ once(event, listener) {\n        const listeners = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_listeners, \"f\")[event] || (__classPrivateFieldGet(this, _AbstractChatCompletionRunner_listeners, \"f\")[event] = []);\n        listeners.push({\n            listener,\n            once: true\n        });\n        return this;\n    }\n    /**\n     * This is similar to `.once()`, but returns a Promise that resolves the next time\n     * the event is triggered, instead of calling a listener callback.\n     * @returns a Promise that resolves the next time given event is triggered,\n     * or rejects if an error is emitted.  (If you request the 'error' event,\n     * returns a promise that resolves with the error).\n     *\n     * Example:\n     *\n     *   const message = await stream.emitted('message') // rejects if the stream errors\n     */ emitted(event) {\n        return new Promise((resolve, reject)=>{\n            __classPrivateFieldSet(this, _AbstractChatCompletionRunner_catchingPromiseCreated, true, \"f\");\n            if (event !== \"error\") this.once(\"error\", reject);\n            this.once(event, resolve);\n        });\n    }\n    async done() {\n        __classPrivateFieldSet(this, _AbstractChatCompletionRunner_catchingPromiseCreated, true, \"f\");\n        await __classPrivateFieldGet(this, _AbstractChatCompletionRunner_endPromise, \"f\");\n    }\n    /**\n     * @returns a promise that resolves with the final ChatCompletion, or rejects\n     * if an error occurred or the stream ended prematurely without producing a ChatCompletion.\n     */ async finalChatCompletion() {\n        await this.done();\n        const completion = this._chatCompletions[this._chatCompletions.length - 1];\n        if (!completion) throw new openai_error__WEBPACK_IMPORTED_MODULE_0__.OpenAIError(\"stream ended without producing a ChatCompletion\");\n        return completion;\n    }\n    /**\n     * @returns a promise that resolves with the content of the final ChatCompletionMessage, or rejects\n     * if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\n     */ async finalContent() {\n        await this.done();\n        return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalContent).call(this);\n    }\n    /**\n     * @returns a promise that resolves with the the final assistant ChatCompletionMessage response,\n     * or rejects if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\n     */ async finalMessage() {\n        await this.done();\n        return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalMessage).call(this);\n    }\n    /**\n     * @returns a promise that resolves with the content of the final FunctionCall, or rejects\n     * if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\n     */ async finalFunctionCall() {\n        await this.done();\n        return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalFunctionCall).call(this);\n    }\n    async finalFunctionCallResult() {\n        await this.done();\n        return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalFunctionCallResult).call(this);\n    }\n    async totalUsage() {\n        await this.done();\n        return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_calculateTotalUsage).call(this);\n    }\n    allChatCompletions() {\n        return [\n            ...this._chatCompletions\n        ];\n    }\n    _emit(event, ...args) {\n        // make sure we don't emit any events after end\n        if (__classPrivateFieldGet(this, _AbstractChatCompletionRunner_ended, \"f\")) return;\n        if (event === \"end\") {\n            __classPrivateFieldSet(this, _AbstractChatCompletionRunner_ended, true, \"f\");\n            __classPrivateFieldGet(this, _AbstractChatCompletionRunner_resolveEndPromise, \"f\").call(this);\n        }\n        const listeners = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_listeners, \"f\")[event];\n        if (listeners) {\n            __classPrivateFieldGet(this, _AbstractChatCompletionRunner_listeners, \"f\")[event] = listeners.filter((l)=>!l.once);\n            listeners.forEach(({ listener })=>listener(...args));\n        }\n        if (event === \"abort\") {\n            const error = args[0];\n            if (!__classPrivateFieldGet(this, _AbstractChatCompletionRunner_catchingPromiseCreated, \"f\") && !listeners?.length) {\n                Promise.reject(error);\n            }\n            __classPrivateFieldGet(this, _AbstractChatCompletionRunner_rejectConnectedPromise, \"f\").call(this, error);\n            __classPrivateFieldGet(this, _AbstractChatCompletionRunner_rejectEndPromise, \"f\").call(this, error);\n            this._emit(\"end\");\n            return;\n        }\n        if (event === \"error\") {\n            // NOTE: _emit('error', error) should only be called from #handleError().\n            const error = args[0];\n            if (!__classPrivateFieldGet(this, _AbstractChatCompletionRunner_catchingPromiseCreated, \"f\") && !listeners?.length) {\n                // Trigger an unhandled rejection if the user hasn't registered any error handlers.\n                // If you are seeing stack traces here, make sure to handle errors via either:\n                // - runner.on('error', () => ...)\n                // - await runner.done()\n                // - await runner.finalChatCompletion()\n                // - etc.\n                Promise.reject(error);\n            }\n            __classPrivateFieldGet(this, _AbstractChatCompletionRunner_rejectConnectedPromise, \"f\").call(this, error);\n            __classPrivateFieldGet(this, _AbstractChatCompletionRunner_rejectEndPromise, \"f\").call(this, error);\n            this._emit(\"end\");\n        }\n    }\n    _emitFinal() {\n        const completion = this._chatCompletions[this._chatCompletions.length - 1];\n        if (completion) this._emit(\"finalChatCompletion\", completion);\n        const finalMessage = this.messages[this.messages.length - 1];\n        if (finalMessage) this._emit(\"finalMessage\", finalMessage);\n        const finalContent = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalContent).call(this);\n        if (finalContent) this._emit(\"finalContent\", finalContent);\n        const finalFunctionCall = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalFunctionCall).call(this);\n        if (finalFunctionCall) this._emit(\"finalFunctionCall\", finalFunctionCall);\n        const finalFunctionCallResult = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalFunctionCallResult).call(this);\n        if (finalFunctionCallResult != null) this._emit(\"finalFunctionCallResult\", finalFunctionCallResult);\n        if (this._chatCompletions.some((c)=>c.usage)) {\n            this._emit(\"totalUsage\", __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_calculateTotalUsage).call(this));\n        }\n    }\n    async _createChatCompletion(completions, params, options) {\n        const signal = options?.signal;\n        if (signal) {\n            if (signal.aborted) this.controller.abort();\n            signal.addEventListener(\"abort\", ()=>this.controller.abort());\n        }\n        __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_validateParams).call(this, params);\n        const chatCompletion = await completions.create({\n            ...params,\n            stream: false\n        }, {\n            ...options,\n            signal: this.controller.signal\n        });\n        this._connected();\n        return this._addChatCompletion(chatCompletion);\n    }\n    async _runChatCompletion(completions, params, options) {\n        for (const message of params.messages){\n            this._addMessage(message, false);\n        }\n        return await this._createChatCompletion(completions, params, options);\n    }\n    async _runFunctions(completions, params, options) {\n        const role = \"function\";\n        const { function_call = \"auto\", stream, ...restParams } = params;\n        const singleFunctionToCall = typeof function_call !== \"string\" && function_call?.name;\n        const { maxChatCompletions = DEFAULT_MAX_CHAT_COMPLETIONS } = options || {};\n        const functionsByName = {};\n        for (const f of params.functions){\n            functionsByName[f.name || f.function.name] = f;\n        }\n        const functions = params.functions.map((f)=>({\n                name: f.name || f.function.name,\n                parameters: f.parameters,\n                description: f.description\n            }));\n        for (const message of params.messages){\n            this._addMessage(message, false);\n        }\n        for(let i = 0; i < maxChatCompletions; ++i){\n            const chatCompletion = await this._createChatCompletion(completions, {\n                ...restParams,\n                function_call,\n                functions,\n                messages: [\n                    ...this.messages\n                ]\n            }, options);\n            const message = chatCompletion.choices[0]?.message;\n            if (!message) {\n                throw new openai_error__WEBPACK_IMPORTED_MODULE_0__.OpenAIError(`missing message in ChatCompletion response`);\n            }\n            if (!message.function_call) return;\n            const { name, arguments: args } = message.function_call;\n            const fn = functionsByName[name];\n            if (!fn) {\n                const content = `Invalid function_call: ${JSON.stringify(name)}. Available options are: ${functions.map((f)=>JSON.stringify(f.name)).join(\", \")}. Please try again`;\n                this._addMessage({\n                    role,\n                    name,\n                    content\n                });\n                continue;\n            } else if (singleFunctionToCall && singleFunctionToCall !== name) {\n                const content = `Invalid function_call: ${JSON.stringify(name)}. ${JSON.stringify(singleFunctionToCall)} requested. Please try again`;\n                this._addMessage({\n                    role,\n                    name,\n                    content\n                });\n                continue;\n            }\n            let parsed;\n            try {\n                parsed = (0,_RunnableFunction_mjs__WEBPACK_IMPORTED_MODULE_2__.isRunnableFunctionWithParse)(fn) ? await fn.parse(args) : args;\n            } catch (error) {\n                this._addMessage({\n                    role,\n                    name,\n                    content: error instanceof Error ? error.message : String(error)\n                });\n                continue;\n            }\n            // @ts-expect-error it can't rule out `never` type.\n            const rawContent = await fn.function(parsed, this);\n            const content = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_stringifyFunctionCallResult).call(this, rawContent);\n            this._addMessage({\n                role,\n                name,\n                content\n            });\n            if (singleFunctionToCall) return;\n        }\n    }\n    async _runTools(completions, params, options) {\n        const role = \"tool\";\n        const { tool_choice = \"auto\", stream, ...restParams } = params;\n        const singleFunctionToCall = typeof tool_choice !== \"string\" && tool_choice?.function?.name;\n        const { maxChatCompletions = DEFAULT_MAX_CHAT_COMPLETIONS } = options || {};\n        const functionsByName = {};\n        for (const f of params.tools){\n            if (f.type === \"function\") {\n                functionsByName[f.function.name || f.function.function.name] = f.function;\n            }\n        }\n        const tools = \"tools\" in params ? params.tools.map((t)=>t.type === \"function\" ? {\n                type: \"function\",\n                function: {\n                    name: t.function.name || t.function.function.name,\n                    parameters: t.function.parameters,\n                    description: t.function.description\n                }\n            } : t) : undefined;\n        for (const message of params.messages){\n            this._addMessage(message, false);\n        }\n        for(let i = 0; i < maxChatCompletions; ++i){\n            const chatCompletion = await this._createChatCompletion(completions, {\n                ...restParams,\n                tool_choice,\n                tools,\n                messages: [\n                    ...this.messages\n                ]\n            }, options);\n            const message = chatCompletion.choices[0]?.message;\n            if (!message) {\n                throw new openai_error__WEBPACK_IMPORTED_MODULE_0__.OpenAIError(`missing message in ChatCompletion response`);\n            }\n            if (!message.tool_calls) return;\n            for (const tool_call of message.tool_calls){\n                if (tool_call.type !== \"function\") continue;\n                const tool_call_id = tool_call.id;\n                const { name, arguments: args } = tool_call.function;\n                const fn = functionsByName[name];\n                if (!fn) {\n                    const content = `Invalid tool_call: ${JSON.stringify(name)}. Available options are: ${tools.map((f)=>JSON.stringify(f.function.name)).join(\", \")}. Please try again`;\n                    this._addMessage({\n                        role,\n                        tool_call_id,\n                        content\n                    });\n                    continue;\n                } else if (singleFunctionToCall && singleFunctionToCall !== name) {\n                    const content = `Invalid tool_call: ${JSON.stringify(name)}. ${JSON.stringify(singleFunctionToCall)} requested. Please try again`;\n                    this._addMessage({\n                        role,\n                        tool_call_id,\n                        content\n                    });\n                    continue;\n                }\n                let parsed;\n                try {\n                    parsed = (0,_RunnableFunction_mjs__WEBPACK_IMPORTED_MODULE_2__.isRunnableFunctionWithParse)(fn) ? await fn.parse(args) : args;\n                } catch (error) {\n                    const content = error instanceof Error ? error.message : String(error);\n                    this._addMessage({\n                        role,\n                        tool_call_id,\n                        content\n                    });\n                    continue;\n                }\n                // @ts-expect-error it can't rule out `never` type.\n                const rawContent = await fn.function(parsed, this);\n                const content = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_stringifyFunctionCallResult).call(this, rawContent);\n                this._addMessage({\n                    role,\n                    tool_call_id,\n                    content\n                });\n                if (singleFunctionToCall) return;\n            }\n        }\n    }\n}\n_AbstractChatCompletionRunner_connectedPromise = new WeakMap(), _AbstractChatCompletionRunner_resolveConnectedPromise = new WeakMap(), _AbstractChatCompletionRunner_rejectConnectedPromise = new WeakMap(), _AbstractChatCompletionRunner_endPromise = new WeakMap(), _AbstractChatCompletionRunner_resolveEndPromise = new WeakMap(), _AbstractChatCompletionRunner_rejectEndPromise = new WeakMap(), _AbstractChatCompletionRunner_listeners = new WeakMap(), _AbstractChatCompletionRunner_ended = new WeakMap(), _AbstractChatCompletionRunner_errored = new WeakMap(), _AbstractChatCompletionRunner_aborted = new WeakMap(), _AbstractChatCompletionRunner_catchingPromiseCreated = new WeakMap(), _AbstractChatCompletionRunner_handleError = new WeakMap(), _AbstractChatCompletionRunner_instances = new WeakSet(), _AbstractChatCompletionRunner_getFinalContent = function _AbstractChatCompletionRunner_getFinalContent() {\n    return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalMessage).call(this).content;\n}, _AbstractChatCompletionRunner_getFinalMessage = function _AbstractChatCompletionRunner_getFinalMessage() {\n    let i = this.messages.length;\n    while(i-- > 0){\n        const message = this.messages[i];\n        if ((0,_chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.isAssistantMessage)(message)) {\n            return message;\n        }\n    }\n    throw new openai_error__WEBPACK_IMPORTED_MODULE_0__.OpenAIError(\"stream ended without producing a ChatCompletionMessage with role=assistant\");\n}, _AbstractChatCompletionRunner_getFinalFunctionCall = function _AbstractChatCompletionRunner_getFinalFunctionCall() {\n    for(let i = this.messages.length - 1; i >= 0; i--){\n        const message = this.messages[i];\n        if ((0,_chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.isAssistantMessage)(message) && message?.function_call) {\n            return message.function_call;\n        }\n    }\n    return;\n}, _AbstractChatCompletionRunner_getFinalFunctionCallResult = function _AbstractChatCompletionRunner_getFinalFunctionCallResult() {\n    for(let i = this.messages.length - 1; i >= 0; i--){\n        const message = this.messages[i];\n        if ((0,_chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.isFunctionMessage)(message) && message.content != null) {\n            return message.content;\n        }\n    }\n    return;\n}, _AbstractChatCompletionRunner_calculateTotalUsage = function _AbstractChatCompletionRunner_calculateTotalUsage() {\n    const total = {\n        completion_tokens: 0,\n        prompt_tokens: 0,\n        total_tokens: 0\n    };\n    for (const { usage } of this._chatCompletions){\n        if (usage) {\n            total.completion_tokens += usage.completion_tokens;\n            total.prompt_tokens += usage.prompt_tokens;\n            total.total_tokens += usage.total_tokens;\n        }\n    }\n    return total;\n}, _AbstractChatCompletionRunner_validateParams = function _AbstractChatCompletionRunner_validateParams(params) {\n    if (params.n != null && params.n > 1) {\n        throw new openai_error__WEBPACK_IMPORTED_MODULE_0__.OpenAIError(\"ChatCompletion convenience helpers only support n=1 at this time. To use n>1, please use chat.completions.create() directly.\");\n    }\n}, _AbstractChatCompletionRunner_stringifyFunctionCallResult = function _AbstractChatCompletionRunner_stringifyFunctionCallResult(rawContent) {\n    return typeof rawContent === \"string\" ? rawContent : rawContent === undefined ? \"undefined\" : JSON.stringify(rawContent);\n}; //# sourceMappingURL=AbstractChatCompletionRunner.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/openai/lib/AbstractChatCompletionRunner.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/openai/lib/ChatCompletionRunner.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/openai/lib/ChatCompletionRunner.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatCompletionRunner: () => (/* binding */ ChatCompletionRunner)\n/* harmony export */ });\n/* harmony import */ var _AbstractChatCompletionRunner_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbstractChatCompletionRunner.mjs */ \"(action-browser)/./node_modules/openai/lib/AbstractChatCompletionRunner.mjs\");\n/* harmony import */ var _chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chatCompletionUtils.mjs */ \"(action-browser)/./node_modules/openai/lib/chatCompletionUtils.mjs\");\n\n\nclass ChatCompletionRunner extends _AbstractChatCompletionRunner_mjs__WEBPACK_IMPORTED_MODULE_0__.AbstractChatCompletionRunner {\n    static runFunctions(completions, params, options) {\n        const runner = new ChatCompletionRunner();\n        runner._run(()=>runner._runFunctions(completions, params, options));\n        return runner;\n    }\n    static runTools(completions, params, options) {\n        const runner = new ChatCompletionRunner();\n        runner._run(()=>runner._runTools(completions, params, options));\n        return runner;\n    }\n    _addMessage(message) {\n        super._addMessage(message);\n        if ((0,_chatCompletionUtils_mjs__WEBPACK_IMPORTED_MODULE_1__.isAssistantMessage)(message) && message.content) {\n            this._emit(\"content\", message.content);\n        }\n    }\n} //# sourceMappingURL=ChatCompletionRunner.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvbGliL0NoYXRDb21wbGV0aW9uUnVubmVyLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBbUY7QUFDcEI7QUFDeEQsTUFBTUUsNkJBQTZCRiwyRkFBNEJBO0lBQ2xFLE9BQU9HLGFBQWFDLFdBQVcsRUFBRUMsTUFBTSxFQUFFQyxPQUFPLEVBQUU7UUFDOUMsTUFBTUMsU0FBUyxJQUFJTDtRQUNuQkssT0FBT0MsSUFBSSxDQUFDLElBQU1ELE9BQU9FLGFBQWEsQ0FBQ0wsYUFBYUMsUUFBUUM7UUFDNUQsT0FBT0M7SUFDWDtJQUNBLE9BQU9HLFNBQVNOLFdBQVcsRUFBRUMsTUFBTSxFQUFFQyxPQUFPLEVBQUU7UUFDMUMsTUFBTUMsU0FBUyxJQUFJTDtRQUNuQkssT0FBT0MsSUFBSSxDQUFDLElBQU1ELE9BQU9JLFNBQVMsQ0FBQ1AsYUFBYUMsUUFBUUM7UUFDeEQsT0FBT0M7SUFDWDtJQUNBSyxZQUFZQyxPQUFPLEVBQUU7UUFDakIsS0FBSyxDQUFDRCxZQUFZQztRQUNsQixJQUFJWiw0RUFBa0JBLENBQUNZLFlBQVlBLFFBQVFDLE9BQU8sRUFBRTtZQUNoRCxJQUFJLENBQUNDLEtBQUssQ0FBQyxXQUFXRixRQUFRQyxPQUFPO1FBQ3pDO0lBQ0o7QUFDSixFQUNBLGlEQUFpRCIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vcGVuYWkvbGliL0NoYXRDb21wbGV0aW9uUnVubmVyLm1qcz8xZTBkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFic3RyYWN0Q2hhdENvbXBsZXRpb25SdW5uZXIsIH0gZnJvbSBcIi4vQWJzdHJhY3RDaGF0Q29tcGxldGlvblJ1bm5lci5tanNcIjtcbmltcG9ydCB7IGlzQXNzaXN0YW50TWVzc2FnZSB9IGZyb20gXCIuL2NoYXRDb21wbGV0aW9uVXRpbHMubWpzXCI7XG5leHBvcnQgY2xhc3MgQ2hhdENvbXBsZXRpb25SdW5uZXIgZXh0ZW5kcyBBYnN0cmFjdENoYXRDb21wbGV0aW9uUnVubmVyIHtcbiAgICBzdGF0aWMgcnVuRnVuY3Rpb25zKGNvbXBsZXRpb25zLCBwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgcnVubmVyID0gbmV3IENoYXRDb21wbGV0aW9uUnVubmVyKCk7XG4gICAgICAgIHJ1bm5lci5fcnVuKCgpID0+IHJ1bm5lci5fcnVuRnVuY3Rpb25zKGNvbXBsZXRpb25zLCBwYXJhbXMsIG9wdGlvbnMpKTtcbiAgICAgICAgcmV0dXJuIHJ1bm5lcjtcbiAgICB9XG4gICAgc3RhdGljIHJ1blRvb2xzKGNvbXBsZXRpb25zLCBwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgcnVubmVyID0gbmV3IENoYXRDb21wbGV0aW9uUnVubmVyKCk7XG4gICAgICAgIHJ1bm5lci5fcnVuKCgpID0+IHJ1bm5lci5fcnVuVG9vbHMoY29tcGxldGlvbnMsIHBhcmFtcywgb3B0aW9ucykpO1xuICAgICAgICByZXR1cm4gcnVubmVyO1xuICAgIH1cbiAgICBfYWRkTWVzc2FnZShtZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyLl9hZGRNZXNzYWdlKG1lc3NhZ2UpO1xuICAgICAgICBpZiAoaXNBc3Npc3RhbnRNZXNzYWdlKG1lc3NhZ2UpICYmIG1lc3NhZ2UuY29udGVudCkge1xuICAgICAgICAgICAgdGhpcy5fZW1pdCgnY29udGVudCcsIG1lc3NhZ2UuY29udGVudCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1DaGF0Q29tcGxldGlvblJ1bm5lci5tanMubWFwIl0sIm5hbWVzIjpbIkFic3RyYWN0Q2hhdENvbXBsZXRpb25SdW5uZXIiLCJpc0Fzc2lzdGFudE1lc3NhZ2UiLCJDaGF0Q29tcGxldGlvblJ1bm5lciIsInJ1bkZ1bmN0aW9ucyIsImNvbXBsZXRpb25zIiwicGFyYW1zIiwib3B0aW9ucyIsInJ1bm5lciIsIl9ydW4iLCJfcnVuRnVuY3Rpb25zIiwicnVuVG9vbHMiLCJfcnVuVG9vbHMiLCJfYWRkTWVzc2FnZSIsIm1lc3NhZ2UiLCJjb250ZW50IiwiX2VtaXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/openai/lib/ChatCompletionRunner.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/openai/lib/ChatCompletionStream.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/openai/lib/ChatCompletionStream.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatCompletionStream: () => (/* binding */ ChatCompletionStream)\n/* harmony export */ });\n/* harmony import */ var openai_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/error */ \"(action-browser)/./node_modules/openai/error.mjs\");\n/* harmony import */ var _AbstractChatCompletionRunner_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbstractChatCompletionRunner.mjs */ \"(action-browser)/./node_modules/openai/lib/AbstractChatCompletionRunner.mjs\");\n/* harmony import */ var openai_streaming__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai/streaming */ \"(action-browser)/./node_modules/openai/streaming.mjs\");\nvar __classPrivateFieldGet = undefined && undefined.__classPrivateFieldGet || function(receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = undefined && undefined.__classPrivateFieldSet || function(receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar _ChatCompletionStream_instances, _ChatCompletionStream_currentChatCompletionSnapshot, _ChatCompletionStream_beginRequest, _ChatCompletionStream_addChunk, _ChatCompletionStream_endRequest, _ChatCompletionStream_accumulateChatCompletion;\n\n\n\nclass ChatCompletionStream extends _AbstractChatCompletionRunner_mjs__WEBPACK_IMPORTED_MODULE_0__.AbstractChatCompletionRunner {\n    constructor(){\n        super(...arguments);\n        _ChatCompletionStream_instances.add(this);\n        _ChatCompletionStream_currentChatCompletionSnapshot.set(this, void 0);\n    }\n    get currentChatCompletionSnapshot() {\n        return __classPrivateFieldGet(this, _ChatCompletionStream_currentChatCompletionSnapshot, \"f\");\n    }\n    /**\n     * Intended for use on the frontend, consuming a stream produced with\n     * `.toReadableStream()` on the backend.\n     *\n     * Note that messages sent to the model do not appear in `.on('message')`\n     * in this context.\n     */ static fromReadableStream(stream) {\n        const runner = new ChatCompletionStream();\n        runner._run(()=>runner._fromReadableStream(stream));\n        return runner;\n    }\n    static createChatCompletion(completions, params, options) {\n        const runner = new ChatCompletionStream();\n        runner._run(()=>runner._runChatCompletion(completions, {\n                ...params,\n                stream: true\n            }, {\n                ...options,\n                headers: {\n                    ...options?.headers,\n                    \"X-Stainless-Helper-Method\": \"stream\"\n                }\n            }));\n        return runner;\n    }\n    async _createChatCompletion(completions, params, options) {\n        const signal = options?.signal;\n        if (signal) {\n            if (signal.aborted) this.controller.abort();\n            signal.addEventListener(\"abort\", ()=>this.controller.abort());\n        }\n        __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_beginRequest).call(this);\n        const stream = await completions.create({\n            ...params,\n            stream: true\n        }, {\n            ...options,\n            signal: this.controller.signal\n        });\n        this._connected();\n        for await (const chunk of stream){\n            __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_addChunk).call(this, chunk);\n        }\n        if (stream.controller.signal?.aborted) {\n            throw new openai_error__WEBPACK_IMPORTED_MODULE_1__.APIUserAbortError();\n        }\n        return this._addChatCompletion(__classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_endRequest).call(this));\n    }\n    async _fromReadableStream(readableStream, options) {\n        const signal = options?.signal;\n        if (signal) {\n            if (signal.aborted) this.controller.abort();\n            signal.addEventListener(\"abort\", ()=>this.controller.abort());\n        }\n        __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_beginRequest).call(this);\n        this._connected();\n        const stream = openai_streaming__WEBPACK_IMPORTED_MODULE_2__.Stream.fromReadableStream(readableStream, this.controller);\n        let chatId;\n        for await (const chunk of stream){\n            if (chatId && chatId !== chunk.id) {\n                // A new request has been made.\n                this._addChatCompletion(__classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_endRequest).call(this));\n            }\n            __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_addChunk).call(this, chunk);\n            chatId = chunk.id;\n        }\n        if (stream.controller.signal?.aborted) {\n            throw new openai_error__WEBPACK_IMPORTED_MODULE_1__.APIUserAbortError();\n        }\n        return this._addChatCompletion(__classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_endRequest).call(this));\n    }\n    [(_ChatCompletionStream_currentChatCompletionSnapshot = new WeakMap(), _ChatCompletionStream_instances = new WeakSet(), _ChatCompletionStream_beginRequest = function _ChatCompletionStream_beginRequest() {\n        if (this.ended) return;\n        __classPrivateFieldSet(this, _ChatCompletionStream_currentChatCompletionSnapshot, undefined, \"f\");\n    }, _ChatCompletionStream_addChunk = function _ChatCompletionStream_addChunk(chunk) {\n        if (this.ended) return;\n        const completion = __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_accumulateChatCompletion).call(this, chunk);\n        this._emit(\"chunk\", chunk, completion);\n        const delta = chunk.choices[0]?.delta?.content;\n        const snapshot = completion.choices[0]?.message;\n        if (delta != null && snapshot?.role === \"assistant\" && snapshot?.content) {\n            this._emit(\"content\", delta, snapshot.content);\n        }\n    }, _ChatCompletionStream_endRequest = function _ChatCompletionStream_endRequest() {\n        if (this.ended) {\n            throw new openai_error__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`stream has ended, this shouldn't happen`);\n        }\n        const snapshot = __classPrivateFieldGet(this, _ChatCompletionStream_currentChatCompletionSnapshot, \"f\");\n        if (!snapshot) {\n            throw new openai_error__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`request ended without sending any chunks`);\n        }\n        __classPrivateFieldSet(this, _ChatCompletionStream_currentChatCompletionSnapshot, undefined, \"f\");\n        return finalizeChatCompletion(snapshot);\n    }, _ChatCompletionStream_accumulateChatCompletion = function _ChatCompletionStream_accumulateChatCompletion(chunk) {\n        var _a, _b;\n        let snapshot = __classPrivateFieldGet(this, _ChatCompletionStream_currentChatCompletionSnapshot, \"f\");\n        const { choices, ...rest } = chunk;\n        if (!snapshot) {\n            snapshot = __classPrivateFieldSet(this, _ChatCompletionStream_currentChatCompletionSnapshot, {\n                ...rest,\n                choices: []\n            }, \"f\");\n        } else {\n            Object.assign(snapshot, rest);\n        }\n        for (const { delta, finish_reason, index, ...other } of chunk.choices){\n            let choice = snapshot.choices[index];\n            if (!choice) {\n                snapshot.choices[index] = {\n                    finish_reason,\n                    index,\n                    message: delta,\n                    ...other\n                };\n                continue;\n            }\n            if (finish_reason) choice.finish_reason = finish_reason;\n            Object.assign(choice, other);\n            if (!delta) continue; // Shouldn't happen; just in case.\n            const { content, function_call, role, tool_calls } = delta;\n            if (content) choice.message.content = (choice.message.content || \"\") + content;\n            if (role) choice.message.role = role;\n            if (function_call) {\n                if (!choice.message.function_call) {\n                    choice.message.function_call = function_call;\n                } else {\n                    if (function_call.name) choice.message.function_call.name = function_call.name;\n                    if (function_call.arguments) {\n                        (_a = choice.message.function_call).arguments ?? (_a.arguments = \"\");\n                        choice.message.function_call.arguments += function_call.arguments;\n                    }\n                }\n            }\n            if (tool_calls) {\n                if (!choice.message.tool_calls) choice.message.tool_calls = [];\n                for (const { index, id, type, function: fn } of tool_calls){\n                    const tool_call = (_b = choice.message.tool_calls)[index] ?? (_b[index] = {});\n                    if (id) tool_call.id = id;\n                    if (type) tool_call.type = type;\n                    if (fn) tool_call.function ?? (tool_call.function = {\n                        arguments: \"\"\n                    });\n                    if (fn?.name) tool_call.function.name = fn.name;\n                    if (fn?.arguments) tool_call.function.arguments += fn.arguments;\n                }\n            }\n        }\n        return snapshot;\n    }, Symbol.asyncIterator)]() {\n        const pushQueue = [];\n        const readQueue = [];\n        let done = false;\n        this.on(\"chunk\", (chunk)=>{\n            const reader = readQueue.shift();\n            if (reader) {\n                reader(chunk);\n            } else {\n                pushQueue.push(chunk);\n            }\n        });\n        this.on(\"end\", ()=>{\n            done = true;\n            for (const reader of readQueue){\n                reader(undefined);\n            }\n            readQueue.length = 0;\n        });\n        return {\n            next: async ()=>{\n                if (!pushQueue.length) {\n                    if (done) {\n                        return {\n                            value: undefined,\n                            done: true\n                        };\n                    }\n                    return new Promise((resolve)=>readQueue.push(resolve)).then((chunk)=>chunk ? {\n                            value: chunk,\n                            done: false\n                        } : {\n                            value: undefined,\n                            done: true\n                        });\n                }\n                const chunk = pushQueue.shift();\n                return {\n                    value: chunk,\n                    done: false\n                };\n            }\n        };\n    }\n    toReadableStream() {\n        const stream = new openai_streaming__WEBPACK_IMPORTED_MODULE_2__.Stream(this[Symbol.asyncIterator].bind(this), this.controller);\n        return stream.toReadableStream();\n    }\n}\nfunction finalizeChatCompletion(snapshot) {\n    const { id, choices, created, model } = snapshot;\n    return {\n        id,\n        choices: choices.map(({ message, finish_reason, index })=>{\n            if (!finish_reason) throw new openai_error__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`missing finish_reason for choice ${index}`);\n            const { content = null, function_call, tool_calls } = message;\n            const role = message.role; // this is what we expect; in theory it could be different which would make our types a slight lie but would be fine.\n            if (!role) throw new openai_error__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`missing role for choice ${index}`);\n            if (function_call) {\n                const { arguments: args, name } = function_call;\n                if (args == null) throw new openai_error__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`missing function_call.arguments for choice ${index}`);\n                if (!name) throw new openai_error__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`missing function_call.name for choice ${index}`);\n                return {\n                    message: {\n                        content,\n                        function_call: {\n                            arguments: args,\n                            name\n                        },\n                        role\n                    },\n                    finish_reason,\n                    index\n                };\n            }\n            if (tool_calls) {\n                return {\n                    index,\n                    finish_reason,\n                    message: {\n                        role,\n                        content,\n                        tool_calls: tool_calls.map((tool_call, i)=>{\n                            const { function: fn, type, id } = tool_call;\n                            const { arguments: args, name } = fn || {};\n                            if (id == null) throw new openai_error__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`missing choices[${index}].tool_calls[${i}].id\\n${str(snapshot)}`);\n                            if (type == null) throw new openai_error__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`missing choices[${index}].tool_calls[${i}].type\\n${str(snapshot)}`);\n                            if (name == null) throw new openai_error__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`missing choices[${index}].tool_calls[${i}].function.name\\n${str(snapshot)}`);\n                            if (args == null) throw new openai_error__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`missing choices[${index}].tool_calls[${i}].function.arguments\\n${str(snapshot)}`);\n                            return {\n                                id,\n                                type,\n                                function: {\n                                    name,\n                                    arguments: args\n                                }\n                            };\n                        })\n                    }\n                };\n            }\n            return {\n                message: {\n                    content: content,\n                    role\n                },\n                finish_reason,\n                index\n            };\n        }),\n        created,\n        model,\n        object: \"chat.completion\"\n    };\n}\nfunction str(x) {\n    return JSON.stringify(x);\n} //# sourceMappingURL=ChatCompletionStream.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/openai/lib/ChatCompletionStream.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/openai/lib/ChatCompletionStreamingRunner.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/openai/lib/ChatCompletionStreamingRunner.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatCompletionStreamingRunner: () => (/* binding */ ChatCompletionStreamingRunner)\n/* harmony export */ });\n/* harmony import */ var _ChatCompletionStream_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ChatCompletionStream.mjs */ \"(action-browser)/./node_modules/openai/lib/ChatCompletionStream.mjs\");\n\nclass ChatCompletionStreamingRunner extends _ChatCompletionStream_mjs__WEBPACK_IMPORTED_MODULE_0__.ChatCompletionStream {\n    static fromReadableStream(stream) {\n        const runner = new ChatCompletionStreamingRunner();\n        runner._run(()=>runner._fromReadableStream(stream));\n        return runner;\n    }\n    static runFunctions(completions, params, options) {\n        const runner = new ChatCompletionStreamingRunner();\n        runner._run(()=>runner._runFunctions(completions, params, {\n                ...options,\n                headers: {\n                    ...options?.headers,\n                    \"X-Stainless-Helper-Method\": \"runFunctions\"\n                }\n            }));\n        return runner;\n    }\n    static runTools(completions, params, options) {\n        const runner = new ChatCompletionStreamingRunner();\n        runner._run(()=>runner._runTools(completions, params, {\n                ...options,\n                headers: {\n                    ...options?.headers,\n                    \"X-Stainless-Helper-Method\": \"runTools\"\n                }\n            }));\n        return runner;\n    }\n} //# sourceMappingURL=ChatCompletionStreamingRunner.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvbGliL0NoYXRDb21wbGV0aW9uU3RyZWFtaW5nUnVubmVyLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFrRTtBQUMzRCxNQUFNQyxzQ0FBc0NELDJFQUFvQkE7SUFDbkUsT0FBT0UsbUJBQW1CQyxNQUFNLEVBQUU7UUFDOUIsTUFBTUMsU0FBUyxJQUFJSDtRQUNuQkcsT0FBT0MsSUFBSSxDQUFDLElBQU1ELE9BQU9FLG1CQUFtQixDQUFDSDtRQUM3QyxPQUFPQztJQUNYO0lBQ0EsT0FBT0csYUFBYUMsV0FBVyxFQUFFQyxNQUFNLEVBQUVDLE9BQU8sRUFBRTtRQUM5QyxNQUFNTixTQUFTLElBQUlIO1FBQ25CRyxPQUFPQyxJQUFJLENBQUMsSUFBTUQsT0FBT08sYUFBYSxDQUFDSCxhQUFhQyxRQUFRO2dCQUN4RCxHQUFHQyxPQUFPO2dCQUNWRSxTQUFTO29CQUFFLEdBQUdGLFNBQVNFLE9BQU87b0JBQUUsNkJBQTZCO2dCQUFlO1lBQ2hGO1FBQ0EsT0FBT1I7SUFDWDtJQUNBLE9BQU9TLFNBQVNMLFdBQVcsRUFBRUMsTUFBTSxFQUFFQyxPQUFPLEVBQUU7UUFDMUMsTUFBTU4sU0FBUyxJQUFJSDtRQUNuQkcsT0FBT0MsSUFBSSxDQUFDLElBQU1ELE9BQU9VLFNBQVMsQ0FBQ04sYUFBYUMsUUFBUTtnQkFDcEQsR0FBR0MsT0FBTztnQkFDVkUsU0FBUztvQkFBRSxHQUFHRixTQUFTRSxPQUFPO29CQUFFLDZCQUE2QjtnQkFBVztZQUM1RTtRQUNBLE9BQU9SO0lBQ1g7QUFDSixFQUNBLDBEQUEwRCIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vcGVuYWkvbGliL0NoYXRDb21wbGV0aW9uU3RyZWFtaW5nUnVubmVyLm1qcz9iNGUyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYXRDb21wbGV0aW9uU3RyZWFtIH0gZnJvbSBcIi4vQ2hhdENvbXBsZXRpb25TdHJlYW0ubWpzXCI7XG5leHBvcnQgY2xhc3MgQ2hhdENvbXBsZXRpb25TdHJlYW1pbmdSdW5uZXIgZXh0ZW5kcyBDaGF0Q29tcGxldGlvblN0cmVhbSB7XG4gICAgc3RhdGljIGZyb21SZWFkYWJsZVN0cmVhbShzdHJlYW0pIHtcbiAgICAgICAgY29uc3QgcnVubmVyID0gbmV3IENoYXRDb21wbGV0aW9uU3RyZWFtaW5nUnVubmVyKCk7XG4gICAgICAgIHJ1bm5lci5fcnVuKCgpID0+IHJ1bm5lci5fZnJvbVJlYWRhYmxlU3RyZWFtKHN0cmVhbSkpO1xuICAgICAgICByZXR1cm4gcnVubmVyO1xuICAgIH1cbiAgICBzdGF0aWMgcnVuRnVuY3Rpb25zKGNvbXBsZXRpb25zLCBwYXJhbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgcnVubmVyID0gbmV3IENoYXRDb21wbGV0aW9uU3RyZWFtaW5nUnVubmVyKCk7XG4gICAgICAgIHJ1bm5lci5fcnVuKCgpID0+IHJ1bm5lci5fcnVuRnVuY3Rpb25zKGNvbXBsZXRpb25zLCBwYXJhbXMsIHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiB7IC4uLm9wdGlvbnM/LmhlYWRlcnMsICdYLVN0YWlubGVzcy1IZWxwZXItTWV0aG9kJzogJ3J1bkZ1bmN0aW9ucycgfSxcbiAgICAgICAgfSkpO1xuICAgICAgICByZXR1cm4gcnVubmVyO1xuICAgIH1cbiAgICBzdGF0aWMgcnVuVG9vbHMoY29tcGxldGlvbnMsIHBhcmFtcywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBydW5uZXIgPSBuZXcgQ2hhdENvbXBsZXRpb25TdHJlYW1pbmdSdW5uZXIoKTtcbiAgICAgICAgcnVubmVyLl9ydW4oKCkgPT4gcnVubmVyLl9ydW5Ub29scyhjb21wbGV0aW9ucywgcGFyYW1zLCB7XG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogeyAuLi5vcHRpb25zPy5oZWFkZXJzLCAnWC1TdGFpbmxlc3MtSGVscGVyLU1ldGhvZCc6ICdydW5Ub29scycgfSxcbiAgICAgICAgfSkpO1xuICAgICAgICByZXR1cm4gcnVubmVyO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNoYXRDb21wbGV0aW9uU3RyZWFtaW5nUnVubmVyLm1qcy5tYXAiXSwibmFtZXMiOlsiQ2hhdENvbXBsZXRpb25TdHJlYW0iLCJDaGF0Q29tcGxldGlvblN0cmVhbWluZ1J1bm5lciIsImZyb21SZWFkYWJsZVN0cmVhbSIsInN0cmVhbSIsInJ1bm5lciIsIl9ydW4iLCJfZnJvbVJlYWRhYmxlU3RyZWFtIiwicnVuRnVuY3Rpb25zIiwiY29tcGxldGlvbnMiLCJwYXJhbXMiLCJvcHRpb25zIiwiX3J1bkZ1bmN0aW9ucyIsImhlYWRlcnMiLCJydW5Ub29scyIsIl9ydW5Ub29scyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/openai/lib/ChatCompletionStreamingRunner.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/openai/lib/RunnableFunction.mjs":
/*!******************************************************!*\
  !*** ./node_modules/openai/lib/RunnableFunction.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ParsingFunction: () => (/* binding */ ParsingFunction),\n/* harmony export */   isRunnableFunctionWithParse: () => (/* binding */ isRunnableFunctionWithParse)\n/* harmony export */ });\nfunction isRunnableFunctionWithParse(fn) {\n    return typeof fn.parse === \"function\";\n}\n/**\n * This is helper class for passing a `function` and `parse` where the `function`\n * argument type matches the `parse` return type.\n */ class ParsingFunction {\n    constructor(input){\n        this.function = input.function;\n        this.parse = input.parse;\n        this.parameters = input.parameters;\n        this.description = input.description;\n        this.name = input.name;\n    }\n} //# sourceMappingURL=RunnableFunction.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvbGliL1J1bm5hYmxlRnVuY3Rpb24ubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQU8sU0FBU0EsNEJBQTRCQyxFQUFFO0lBQzFDLE9BQU8sT0FBT0EsR0FBR0MsS0FBSyxLQUFLO0FBQy9CO0FBQ0E7OztDQUdDLEdBQ00sTUFBTUM7SUFDVEMsWUFBWUMsS0FBSyxDQUFFO1FBQ2YsSUFBSSxDQUFDQyxRQUFRLEdBQUdELE1BQU1DLFFBQVE7UUFDOUIsSUFBSSxDQUFDSixLQUFLLEdBQUdHLE1BQU1ILEtBQUs7UUFDeEIsSUFBSSxDQUFDSyxVQUFVLEdBQUdGLE1BQU1FLFVBQVU7UUFDbEMsSUFBSSxDQUFDQyxXQUFXLEdBQUdILE1BQU1HLFdBQVc7UUFDcEMsSUFBSSxDQUFDQyxJQUFJLEdBQUdKLE1BQU1JLElBQUk7SUFDMUI7QUFDSixFQUNBLDZDQUE2QyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vcGVuYWkvbGliL1J1bm5hYmxlRnVuY3Rpb24ubWpzP2E2YjQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGlzUnVubmFibGVGdW5jdGlvbldpdGhQYXJzZShmbikge1xuICAgIHJldHVybiB0eXBlb2YgZm4ucGFyc2UgPT09ICdmdW5jdGlvbic7XG59XG4vKipcbiAqIFRoaXMgaXMgaGVscGVyIGNsYXNzIGZvciBwYXNzaW5nIGEgYGZ1bmN0aW9uYCBhbmQgYHBhcnNlYCB3aGVyZSB0aGUgYGZ1bmN0aW9uYFxuICogYXJndW1lbnQgdHlwZSBtYXRjaGVzIHRoZSBgcGFyc2VgIHJldHVybiB0eXBlLlxuICovXG5leHBvcnQgY2xhc3MgUGFyc2luZ0Z1bmN0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihpbnB1dCkge1xuICAgICAgICB0aGlzLmZ1bmN0aW9uID0gaW5wdXQuZnVuY3Rpb247XG4gICAgICAgIHRoaXMucGFyc2UgPSBpbnB1dC5wYXJzZTtcbiAgICAgICAgdGhpcy5wYXJhbWV0ZXJzID0gaW5wdXQucGFyYW1ldGVycztcbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbiA9IGlucHV0LmRlc2NyaXB0aW9uO1xuICAgICAgICB0aGlzLm5hbWUgPSBpbnB1dC5uYW1lO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVJ1bm5hYmxlRnVuY3Rpb24ubWpzLm1hcCJdLCJuYW1lcyI6WyJpc1J1bm5hYmxlRnVuY3Rpb25XaXRoUGFyc2UiLCJmbiIsInBhcnNlIiwiUGFyc2luZ0Z1bmN0aW9uIiwiY29uc3RydWN0b3IiLCJpbnB1dCIsImZ1bmN0aW9uIiwicGFyYW1ldGVycyIsImRlc2NyaXB0aW9uIiwibmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/openai/lib/RunnableFunction.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/openai/lib/chatCompletionUtils.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/openai/lib/chatCompletionUtils.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isAssistantMessage: () => (/* binding */ isAssistantMessage),\n/* harmony export */   isFunctionMessage: () => (/* binding */ isFunctionMessage),\n/* harmony export */   isPresent: () => (/* binding */ isPresent),\n/* harmony export */   isToolMessage: () => (/* binding */ isToolMessage)\n/* harmony export */ });\nconst isAssistantMessage = (message)=>{\n    return message?.role === \"assistant\";\n};\nconst isFunctionMessage = (message)=>{\n    return message?.role === \"function\";\n};\nconst isToolMessage = (message)=>{\n    return message?.role === \"tool\";\n};\nfunction isPresent(obj) {\n    return obj != null;\n} //# sourceMappingURL=chatCompletionUtils.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvbGliL2NoYXRDb21wbGV0aW9uVXRpbHMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBTyxNQUFNQSxxQkFBcUIsQ0FBQ0M7SUFDL0IsT0FBT0EsU0FBU0MsU0FBUztBQUM3QixFQUFFO0FBQ0ssTUFBTUMsb0JBQW9CLENBQUNGO0lBQzlCLE9BQU9BLFNBQVNDLFNBQVM7QUFDN0IsRUFBRTtBQUNLLE1BQU1FLGdCQUFnQixDQUFDSDtJQUMxQixPQUFPQSxTQUFTQyxTQUFTO0FBQzdCLEVBQUU7QUFDSyxTQUFTRyxVQUFVQyxHQUFHO0lBQ3pCLE9BQU9BLE9BQU87QUFDbEIsRUFDQSxnREFBZ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb3BlbmFpL2xpYi9jaGF0Q29tcGxldGlvblV0aWxzLm1qcz83MmE0Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBpc0Fzc2lzdGFudE1lc3NhZ2UgPSAobWVzc2FnZSkgPT4ge1xuICAgIHJldHVybiBtZXNzYWdlPy5yb2xlID09PSAnYXNzaXN0YW50Jztcbn07XG5leHBvcnQgY29uc3QgaXNGdW5jdGlvbk1lc3NhZ2UgPSAobWVzc2FnZSkgPT4ge1xuICAgIHJldHVybiBtZXNzYWdlPy5yb2xlID09PSAnZnVuY3Rpb24nO1xufTtcbmV4cG9ydCBjb25zdCBpc1Rvb2xNZXNzYWdlID0gKG1lc3NhZ2UpID0+IHtcbiAgICByZXR1cm4gbWVzc2FnZT8ucm9sZSA9PT0gJ3Rvb2wnO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBpc1ByZXNlbnQob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAhPSBudWxsO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2hhdENvbXBsZXRpb25VdGlscy5tanMubWFwIl0sIm5hbWVzIjpbImlzQXNzaXN0YW50TWVzc2FnZSIsIm1lc3NhZ2UiLCJyb2xlIiwiaXNGdW5jdGlvbk1lc3NhZ2UiLCJpc1Rvb2xNZXNzYWdlIiwiaXNQcmVzZW50Iiwib2JqIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/openai/lib/chatCompletionUtils.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/openai/pagination.mjs":
/*!********************************************!*\
  !*** ./node_modules/openai/pagination.mjs ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CursorPage: () => (/* binding */ CursorPage),\n/* harmony export */   Page: () => (/* binding */ Page)\n/* harmony export */ });\n/* harmony import */ var _core_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core.mjs */ \"(action-browser)/./node_modules/openai/core.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n/**\n * Note: no pagination actually occurs yet, this is for forwards-compatibility.\n */ class Page extends _core_mjs__WEBPACK_IMPORTED_MODULE_0__.AbstractPage {\n    constructor(client, response, body, options){\n        super(client, response, body, options);\n        this.data = body.data;\n        this.object = body.object;\n    }\n    getPaginatedItems() {\n        return this.data;\n    }\n    // @deprecated Please use `nextPageInfo()` instead\n    /**\n     * This page represents a response that isn't actually paginated at the API level\n     * so there will never be any next page params.\n     */ nextPageParams() {\n        return null;\n    }\n    nextPageInfo() {\n        return null;\n    }\n}\nclass CursorPage extends _core_mjs__WEBPACK_IMPORTED_MODULE_0__.AbstractPage {\n    constructor(client, response, body, options){\n        super(client, response, body, options);\n        this.data = body.data;\n    }\n    getPaginatedItems() {\n        return this.data;\n    }\n    // @deprecated Please use `nextPageInfo()` instead\n    nextPageParams() {\n        const info = this.nextPageInfo();\n        if (!info) return null;\n        if (\"params\" in info) return info.params;\n        const params = Object.fromEntries(info.url.searchParams);\n        if (!Object.keys(params).length) return null;\n        return params;\n    }\n    nextPageInfo() {\n        if (!this.data?.length) {\n            return null;\n        }\n        const next = this.data[this.data.length - 1]?.id;\n        if (!next) return null;\n        return {\n            params: {\n                after: next\n            }\n        };\n    }\n} //# sourceMappingURL=pagination.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcGFnaW5hdGlvbi5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEscURBQXFEO0FBQ1g7QUFDMUM7O0NBRUMsR0FDTSxNQUFNQyxhQUFhRCxtREFBWUE7SUFDbENFLFlBQVlDLE1BQU0sRUFBRUMsUUFBUSxFQUFFQyxJQUFJLEVBQUVDLE9BQU8sQ0FBRTtRQUN6QyxLQUFLLENBQUNILFFBQVFDLFVBQVVDLE1BQU1DO1FBQzlCLElBQUksQ0FBQ0MsSUFBSSxHQUFHRixLQUFLRSxJQUFJO1FBQ3JCLElBQUksQ0FBQ0MsTUFBTSxHQUFHSCxLQUFLRyxNQUFNO0lBQzdCO0lBQ0FDLG9CQUFvQjtRQUNoQixPQUFPLElBQUksQ0FBQ0YsSUFBSTtJQUNwQjtJQUNBLGtEQUFrRDtJQUNsRDs7O0tBR0MsR0FDREcsaUJBQWlCO1FBQ2IsT0FBTztJQUNYO0lBQ0FDLGVBQWU7UUFDWCxPQUFPO0lBQ1g7QUFDSjtBQUNPLE1BQU1DLG1CQUFtQlosbURBQVlBO0lBQ3hDRSxZQUFZQyxNQUFNLEVBQUVDLFFBQVEsRUFBRUMsSUFBSSxFQUFFQyxPQUFPLENBQUU7UUFDekMsS0FBSyxDQUFDSCxRQUFRQyxVQUFVQyxNQUFNQztRQUM5QixJQUFJLENBQUNDLElBQUksR0FBR0YsS0FBS0UsSUFBSTtJQUN6QjtJQUNBRSxvQkFBb0I7UUFDaEIsT0FBTyxJQUFJLENBQUNGLElBQUk7SUFDcEI7SUFDQSxrREFBa0Q7SUFDbERHLGlCQUFpQjtRQUNiLE1BQU1HLE9BQU8sSUFBSSxDQUFDRixZQUFZO1FBQzlCLElBQUksQ0FBQ0UsTUFDRCxPQUFPO1FBQ1gsSUFBSSxZQUFZQSxNQUNaLE9BQU9BLEtBQUtDLE1BQU07UUFDdEIsTUFBTUEsU0FBU0MsT0FBT0MsV0FBVyxDQUFDSCxLQUFLSSxHQUFHLENBQUNDLFlBQVk7UUFDdkQsSUFBSSxDQUFDSCxPQUFPSSxJQUFJLENBQUNMLFFBQVFNLE1BQU0sRUFDM0IsT0FBTztRQUNYLE9BQU9OO0lBQ1g7SUFDQUgsZUFBZTtRQUNYLElBQUksQ0FBQyxJQUFJLENBQUNKLElBQUksRUFBRWEsUUFBUTtZQUNwQixPQUFPO1FBQ1g7UUFDQSxNQUFNQyxPQUFPLElBQUksQ0FBQ2QsSUFBSSxDQUFDLElBQUksQ0FBQ0EsSUFBSSxDQUFDYSxNQUFNLEdBQUcsRUFBRSxFQUFFRTtRQUM5QyxJQUFJLENBQUNELE1BQ0QsT0FBTztRQUNYLE9BQU87WUFBRVAsUUFBUTtnQkFBRVMsT0FBT0Y7WUFBSztRQUFFO0lBQ3JDO0FBQ0osRUFDQSx1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb3BlbmFpL3BhZ2luYXRpb24ubWpzPzJjN2YiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy5cbmltcG9ydCB7IEFic3RyYWN0UGFnZSB9IGZyb20gXCIuL2NvcmUubWpzXCI7XG4vKipcbiAqIE5vdGU6IG5vIHBhZ2luYXRpb24gYWN0dWFsbHkgb2NjdXJzIHlldCwgdGhpcyBpcyBmb3IgZm9yd2FyZHMtY29tcGF0aWJpbGl0eS5cbiAqL1xuZXhwb3J0IGNsYXNzIFBhZ2UgZXh0ZW5kcyBBYnN0cmFjdFBhZ2Uge1xuICAgIGNvbnN0cnVjdG9yKGNsaWVudCwgcmVzcG9uc2UsIGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoY2xpZW50LCByZXNwb25zZSwgYm9keSwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMuZGF0YSA9IGJvZHkuZGF0YTtcbiAgICAgICAgdGhpcy5vYmplY3QgPSBib2R5Lm9iamVjdDtcbiAgICB9XG4gICAgZ2V0UGFnaW5hdGVkSXRlbXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGE7XG4gICAgfVxuICAgIC8vIEBkZXByZWNhdGVkIFBsZWFzZSB1c2UgYG5leHRQYWdlSW5mbygpYCBpbnN0ZWFkXG4gICAgLyoqXG4gICAgICogVGhpcyBwYWdlIHJlcHJlc2VudHMgYSByZXNwb25zZSB0aGF0IGlzbid0IGFjdHVhbGx5IHBhZ2luYXRlZCBhdCB0aGUgQVBJIGxldmVsXG4gICAgICogc28gdGhlcmUgd2lsbCBuZXZlciBiZSBhbnkgbmV4dCBwYWdlIHBhcmFtcy5cbiAgICAgKi9cbiAgICBuZXh0UGFnZVBhcmFtcygpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIG5leHRQYWdlSW5mbygpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEN1cnNvclBhZ2UgZXh0ZW5kcyBBYnN0cmFjdFBhZ2Uge1xuICAgIGNvbnN0cnVjdG9yKGNsaWVudCwgcmVzcG9uc2UsIGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoY2xpZW50LCByZXNwb25zZSwgYm9keSwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMuZGF0YSA9IGJvZHkuZGF0YTtcbiAgICB9XG4gICAgZ2V0UGFnaW5hdGVkSXRlbXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGE7XG4gICAgfVxuICAgIC8vIEBkZXByZWNhdGVkIFBsZWFzZSB1c2UgYG5leHRQYWdlSW5mbygpYCBpbnN0ZWFkXG4gICAgbmV4dFBhZ2VQYXJhbXMoKSB7XG4gICAgICAgIGNvbnN0IGluZm8gPSB0aGlzLm5leHRQYWdlSW5mbygpO1xuICAgICAgICBpZiAoIWluZm8pXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgaWYgKCdwYXJhbXMnIGluIGluZm8pXG4gICAgICAgICAgICByZXR1cm4gaW5mby5wYXJhbXM7XG4gICAgICAgIGNvbnN0IHBhcmFtcyA9IE9iamVjdC5mcm9tRW50cmllcyhpbmZvLnVybC5zZWFyY2hQYXJhbXMpO1xuICAgICAgICBpZiAoIU9iamVjdC5rZXlzKHBhcmFtcykubGVuZ3RoKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIHJldHVybiBwYXJhbXM7XG4gICAgfVxuICAgIG5leHRQYWdlSW5mbygpIHtcbiAgICAgICAgaWYgKCF0aGlzLmRhdGE/Lmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbmV4dCA9IHRoaXMuZGF0YVt0aGlzLmRhdGEubGVuZ3RoIC0gMV0/LmlkO1xuICAgICAgICBpZiAoIW5leHQpXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgcmV0dXJuIHsgcGFyYW1zOiB7IGFmdGVyOiBuZXh0IH0gfTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWdpbmF0aW9uLm1qcy5tYXAiXSwibmFtZXMiOlsiQWJzdHJhY3RQYWdlIiwiUGFnZSIsImNvbnN0cnVjdG9yIiwiY2xpZW50IiwicmVzcG9uc2UiLCJib2R5Iiwib3B0aW9ucyIsImRhdGEiLCJvYmplY3QiLCJnZXRQYWdpbmF0ZWRJdGVtcyIsIm5leHRQYWdlUGFyYW1zIiwibmV4dFBhZ2VJbmZvIiwiQ3Vyc29yUGFnZSIsImluZm8iLCJwYXJhbXMiLCJPYmplY3QiLCJmcm9tRW50cmllcyIsInVybCIsInNlYXJjaFBhcmFtcyIsImtleXMiLCJsZW5ndGgiLCJuZXh0IiwiaWQiLCJhZnRlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/openai/pagination.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/openai/resource.mjs":
/*!******************************************!*\
  !*** ./node_modules/openai/resource.mjs ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIResource: () => (/* binding */ APIResource)\n/* harmony export */ });\n// File generated from our OpenAPI spec by Stainless.\nclass APIResource {\n    constructor(client){\n        this._client = client;\n    }\n} //# sourceMappingURL=resource.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2UubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxxREFBcUQ7QUFDOUMsTUFBTUE7SUFDVEMsWUFBWUMsTUFBTSxDQUFFO1FBQ2hCLElBQUksQ0FBQ0MsT0FBTyxHQUFHRDtJQUNuQjtBQUNKLEVBQ0EscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZS5tanM/ZTJjOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLlxuZXhwb3J0IGNsYXNzIEFQSVJlc291cmNlIHtcbiAgICBjb25zdHJ1Y3RvcihjbGllbnQpIHtcbiAgICAgICAgdGhpcy5fY2xpZW50ID0gY2xpZW50O1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlc291cmNlLm1qcy5tYXAiXSwibmFtZXMiOlsiQVBJUmVzb3VyY2UiLCJjb25zdHJ1Y3RvciIsImNsaWVudCIsIl9jbGllbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/openai/resource.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/openai/resources/audio/audio.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/openai/resources/audio/audio.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Audio: () => (/* binding */ Audio)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(action-browser)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var openai_resources_audio_speech__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! openai/resources/audio/speech */ \"(action-browser)/./node_modules/openai/resources/audio/speech.mjs\");\n/* harmony import */ var openai_resources_audio_transcriptions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/resources/audio/transcriptions */ \"(action-browser)/./node_modules/openai/resources/audio/transcriptions.mjs\");\n/* harmony import */ var openai_resources_audio_translations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai/resources/audio/translations */ \"(action-browser)/./node_modules/openai/resources/audio/translations.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n\n\n\nclass Audio extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    constructor(){\n        super(...arguments);\n        this.transcriptions = new openai_resources_audio_transcriptions__WEBPACK_IMPORTED_MODULE_1__.Transcriptions(this._client);\n        this.translations = new openai_resources_audio_translations__WEBPACK_IMPORTED_MODULE_2__.Translations(this._client);\n        this.speech = new openai_resources_audio_speech__WEBPACK_IMPORTED_MODULE_3__.Speech(this._client);\n    }\n}\n(function(Audio) {\n    Audio.Transcriptions = openai_resources_audio_transcriptions__WEBPACK_IMPORTED_MODULE_1__.Transcriptions;\n    Audio.Translations = openai_resources_audio_translations__WEBPACK_IMPORTED_MODULE_2__.Translations;\n    Audio.Speech = openai_resources_audio_speech__WEBPACK_IMPORTED_MODULE_3__.Speech;\n})(Audio || (Audio = {})); //# sourceMappingURL=audio.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2F1ZGlvL2F1ZGlvLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLHFEQUFxRDtBQUNQO0FBQ2E7QUFDZ0I7QUFDSjtBQUNoRSxNQUFNSSxjQUFjSix3REFBV0E7SUFDbENLLGFBQWM7UUFDVixLQUFLLElBQUlDO1FBQ1QsSUFBSSxDQUFDQyxjQUFjLEdBQUcsSUFBSUwsaUZBQWdDLENBQUMsSUFBSSxDQUFDTyxPQUFPO1FBQ3ZFLElBQUksQ0FBQ0MsWUFBWSxHQUFHLElBQUlQLDZFQUE0QixDQUFDLElBQUksQ0FBQ00sT0FBTztRQUNqRSxJQUFJLENBQUNHLE1BQU0sR0FBRyxJQUFJWCxpRUFBZ0IsQ0FBQyxJQUFJLENBQUNRLE9BQU87SUFDbkQ7QUFDSjtBQUNDLFVBQVVMLEtBQUs7SUFDWkEsTUFBTUksY0FBYyxHQUFHTixpRkFBZ0M7SUFDdkRFLE1BQU1PLFlBQVksR0FBR1IsNkVBQTRCO0lBQ2pEQyxNQUFNUyxNQUFNLEdBQUdaLGlFQUFnQjtBQUNuQyxHQUFHRyxTQUFVQSxDQUFBQSxRQUFRLENBQUMsS0FDdEIsa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvYXVkaW8vYXVkaW8ubWpzP2RhNTUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSAnb3BlbmFpL3Jlc291cmNlJztcbmltcG9ydCAqIGFzIFNwZWVjaEFQSSBmcm9tICdvcGVuYWkvcmVzb3VyY2VzL2F1ZGlvL3NwZWVjaCc7XG5pbXBvcnQgKiBhcyBUcmFuc2NyaXB0aW9uc0FQSSBmcm9tICdvcGVuYWkvcmVzb3VyY2VzL2F1ZGlvL3RyYW5zY3JpcHRpb25zJztcbmltcG9ydCAqIGFzIFRyYW5zbGF0aW9uc0FQSSBmcm9tICdvcGVuYWkvcmVzb3VyY2VzL2F1ZGlvL3RyYW5zbGF0aW9ucyc7XG5leHBvcnQgY2xhc3MgQXVkaW8gZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMudHJhbnNjcmlwdGlvbnMgPSBuZXcgVHJhbnNjcmlwdGlvbnNBUEkuVHJhbnNjcmlwdGlvbnModGhpcy5fY2xpZW50KTtcbiAgICAgICAgdGhpcy50cmFuc2xhdGlvbnMgPSBuZXcgVHJhbnNsYXRpb25zQVBJLlRyYW5zbGF0aW9ucyh0aGlzLl9jbGllbnQpO1xuICAgICAgICB0aGlzLnNwZWVjaCA9IG5ldyBTcGVlY2hBUEkuU3BlZWNoKHRoaXMuX2NsaWVudCk7XG4gICAgfVxufVxuKGZ1bmN0aW9uIChBdWRpbykge1xuICAgIEF1ZGlvLlRyYW5zY3JpcHRpb25zID0gVHJhbnNjcmlwdGlvbnNBUEkuVHJhbnNjcmlwdGlvbnM7XG4gICAgQXVkaW8uVHJhbnNsYXRpb25zID0gVHJhbnNsYXRpb25zQVBJLlRyYW5zbGF0aW9ucztcbiAgICBBdWRpby5TcGVlY2ggPSBTcGVlY2hBUEkuU3BlZWNoO1xufSkoQXVkaW8gfHwgKEF1ZGlvID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWF1ZGlvLm1qcy5tYXAiXSwibmFtZXMiOlsiQVBJUmVzb3VyY2UiLCJTcGVlY2hBUEkiLCJUcmFuc2NyaXB0aW9uc0FQSSIsIlRyYW5zbGF0aW9uc0FQSSIsIkF1ZGlvIiwiY29uc3RydWN0b3IiLCJhcmd1bWVudHMiLCJ0cmFuc2NyaXB0aW9ucyIsIlRyYW5zY3JpcHRpb25zIiwiX2NsaWVudCIsInRyYW5zbGF0aW9ucyIsIlRyYW5zbGF0aW9ucyIsInNwZWVjaCIsIlNwZWVjaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/openai/resources/audio/audio.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/openai/resources/audio/speech.mjs":
/*!********************************************************!*\
  !*** ./node_modules/openai/resources/audio/speech.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Speech: () => (/* binding */ Speech)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(action-browser)/./node_modules/openai/resource.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\nclass Speech extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Generates audio from the input text.\n     */ create(body, options) {\n        return this._client.post(\"/audio/speech\", {\n            body,\n            ...options,\n            __binaryResponse: true\n        });\n    }\n}\n(function(Speech) {})(Speech || (Speech = {})); //# sourceMappingURL=speech.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2F1ZGlvL3NwZWVjaC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxxREFBcUQ7QUFDUDtBQUN2QyxNQUFNQyxlQUFlRCx3REFBV0E7SUFDbkM7O0tBRUMsR0FDREUsT0FBT0MsSUFBSSxFQUFFQyxPQUFPLEVBQUU7UUFDbEIsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDLGlCQUFpQjtZQUFFSDtZQUFNLEdBQUdDLE9BQU87WUFBRUcsa0JBQWtCO1FBQUs7SUFDekY7QUFDSjtBQUNDLFVBQVVOLE1BQU0sR0FDakIsR0FBR0EsVUFBV0EsQ0FBQUEsU0FBUyxDQUFDLEtBQ3hCLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2F1ZGlvL3NwZWVjaC5tanM/OWNiMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tICdvcGVuYWkvcmVzb3VyY2UnO1xuZXhwb3J0IGNsYXNzIFNwZWVjaCBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYXVkaW8gZnJvbSB0aGUgaW5wdXQgdGV4dC5cbiAgICAgKi9cbiAgICBjcmVhdGUoYm9keSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoJy9hdWRpby9zcGVlY2gnLCB7IGJvZHksIC4uLm9wdGlvbnMsIF9fYmluYXJ5UmVzcG9uc2U6IHRydWUgfSk7XG4gICAgfVxufVxuKGZ1bmN0aW9uIChTcGVlY2gpIHtcbn0pKFNwZWVjaCB8fCAoU3BlZWNoID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNwZWVjaC5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiU3BlZWNoIiwiY3JlYXRlIiwiYm9keSIsIm9wdGlvbnMiLCJfY2xpZW50IiwicG9zdCIsIl9fYmluYXJ5UmVzcG9uc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/openai/resources/audio/speech.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/openai/resources/audio/transcriptions.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/openai/resources/audio/transcriptions.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Transcriptions: () => (/* binding */ Transcriptions)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(action-browser)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var openai_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/core */ \"(action-browser)/./node_modules/openai/core.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n\nclass Transcriptions extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Transcribes audio into the input language.\n     */ create(body, options) {\n        return this._client.post(\"/audio/transcriptions\", (0,openai_core__WEBPACK_IMPORTED_MODULE_1__.multipartFormRequestOptions)({\n            body,\n            ...options\n        }));\n    }\n}\n(function(Transcriptions) {})(Transcriptions || (Transcriptions = {})); //# sourceMappingURL=transcriptions.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2F1ZGlvL3RyYW5zY3JpcHRpb25zLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxxREFBcUQ7QUFDUDtBQUNZO0FBQ25ELE1BQU1FLHVCQUF1QkYsd0RBQVdBO0lBQzNDOztLQUVDLEdBQ0RHLE9BQU9DLElBQUksRUFBRUMsT0FBTyxFQUFFO1FBQ2xCLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNDLElBQUksQ0FBQyx5QkFBeUJOLHdFQUEyQkEsQ0FBQztZQUFFRztZQUFNLEdBQUdDLE9BQU87UUFBQztJQUNyRztBQUNKO0FBQ0MsVUFBVUgsY0FBYyxHQUN6QixHQUFHQSxrQkFBbUJBLENBQUFBLGlCQUFpQixDQUFDLEtBQ3hDLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2F1ZGlvL3RyYW5zY3JpcHRpb25zLm1qcz81ZmM5Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gJ29wZW5haS9yZXNvdXJjZSc7XG5pbXBvcnQgeyBtdWx0aXBhcnRGb3JtUmVxdWVzdE9wdGlvbnMgfSBmcm9tICdvcGVuYWkvY29yZSc7XG5leHBvcnQgY2xhc3MgVHJhbnNjcmlwdGlvbnMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgLyoqXG4gICAgICogVHJhbnNjcmliZXMgYXVkaW8gaW50byB0aGUgaW5wdXQgbGFuZ3VhZ2UuXG4gICAgICovXG4gICAgY3JlYXRlKGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KCcvYXVkaW8vdHJhbnNjcmlwdGlvbnMnLCBtdWx0aXBhcnRGb3JtUmVxdWVzdE9wdGlvbnMoeyBib2R5LCAuLi5vcHRpb25zIH0pKTtcbiAgICB9XG59XG4oZnVuY3Rpb24gKFRyYW5zY3JpcHRpb25zKSB7XG59KShUcmFuc2NyaXB0aW9ucyB8fCAoVHJhbnNjcmlwdGlvbnMgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhbnNjcmlwdGlvbnMubWpzLm1hcCJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsIm11bHRpcGFydEZvcm1SZXF1ZXN0T3B0aW9ucyIsIlRyYW5zY3JpcHRpb25zIiwiY3JlYXRlIiwiYm9keSIsIm9wdGlvbnMiLCJfY2xpZW50IiwicG9zdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/openai/resources/audio/transcriptions.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/openai/resources/audio/translations.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/openai/resources/audio/translations.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Translations: () => (/* binding */ Translations)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(action-browser)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var openai_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/core */ \"(action-browser)/./node_modules/openai/core.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n\nclass Translations extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Translates audio into English.\n     */ create(body, options) {\n        return this._client.post(\"/audio/translations\", (0,openai_core__WEBPACK_IMPORTED_MODULE_1__.multipartFormRequestOptions)({\n            body,\n            ...options\n        }));\n    }\n}\n(function(Translations) {})(Translations || (Translations = {})); //# sourceMappingURL=translations.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2F1ZGlvL3RyYW5zbGF0aW9ucy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEscURBQXFEO0FBQ1A7QUFDWTtBQUNuRCxNQUFNRSxxQkFBcUJGLHdEQUFXQTtJQUN6Qzs7S0FFQyxHQUNERyxPQUFPQyxJQUFJLEVBQUVDLE9BQU8sRUFBRTtRQUNsQixPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxJQUFJLENBQUMsdUJBQXVCTix3RUFBMkJBLENBQUM7WUFBRUc7WUFBTSxHQUFHQyxPQUFPO1FBQUM7SUFDbkc7QUFDSjtBQUNDLFVBQVVILFlBQVksR0FDdkIsR0FBR0EsZ0JBQWlCQSxDQUFBQSxlQUFlLENBQUMsS0FDcEMseUNBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvYXVkaW8vdHJhbnNsYXRpb25zLm1qcz80YzFkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gJ29wZW5haS9yZXNvdXJjZSc7XG5pbXBvcnQgeyBtdWx0aXBhcnRGb3JtUmVxdWVzdE9wdGlvbnMgfSBmcm9tICdvcGVuYWkvY29yZSc7XG5leHBvcnQgY2xhc3MgVHJhbnNsYXRpb25zIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIC8qKlxuICAgICAqIFRyYW5zbGF0ZXMgYXVkaW8gaW50byBFbmdsaXNoLlxuICAgICAqL1xuICAgIGNyZWF0ZShib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdCgnL2F1ZGlvL3RyYW5zbGF0aW9ucycsIG11bHRpcGFydEZvcm1SZXF1ZXN0T3B0aW9ucyh7IGJvZHksIC4uLm9wdGlvbnMgfSkpO1xuICAgIH1cbn1cbihmdW5jdGlvbiAoVHJhbnNsYXRpb25zKSB7XG59KShUcmFuc2xhdGlvbnMgfHwgKFRyYW5zbGF0aW9ucyA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10cmFuc2xhdGlvbnMubWpzLm1hcCJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsIm11bHRpcGFydEZvcm1SZXF1ZXN0T3B0aW9ucyIsIlRyYW5zbGF0aW9ucyIsImNyZWF0ZSIsImJvZHkiLCJvcHRpb25zIiwiX2NsaWVudCIsInBvc3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/openai/resources/audio/translations.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/openai/resources/beta/assistants/assistants.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/openai/resources/beta/assistants/assistants.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Assistants: () => (/* binding */ Assistants),\n/* harmony export */   AssistantsPage: () => (/* binding */ AssistantsPage)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(action-browser)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var openai_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai/core */ \"(action-browser)/./node_modules/openai/core.mjs\");\n/* harmony import */ var openai_resources_beta_assistants_assistants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! openai/resources/beta/assistants/assistants */ \"(action-browser)/./node_modules/openai/resources/beta/assistants/assistants.mjs\");\n/* harmony import */ var openai_resources_beta_assistants_files__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/resources/beta/assistants/files */ \"(action-browser)/./node_modules/openai/resources/beta/assistants/files.mjs\");\n/* harmony import */ var openai_pagination__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! openai/pagination */ \"(action-browser)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n\n\n\n\nclass Assistants extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    constructor(){\n        super(...arguments);\n        this.files = new openai_resources_beta_assistants_files__WEBPACK_IMPORTED_MODULE_1__.Files(this._client);\n    }\n    /**\n     * Create an assistant with a model and instructions.\n     */ create(body, options) {\n        return this._client.post(\"/assistants\", {\n            body,\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v1\",\n                ...options?.headers\n            }\n        });\n    }\n    /**\n     * Retrieves an assistant.\n     */ retrieve(assistantId, options) {\n        return this._client.get(`/assistants/${assistantId}`, {\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v1\",\n                ...options?.headers\n            }\n        });\n    }\n    /**\n     * Modifies an assistant.\n     */ update(assistantId, body, options) {\n        return this._client.post(`/assistants/${assistantId}`, {\n            body,\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v1\",\n                ...options?.headers\n            }\n        });\n    }\n    list(query = {}, options) {\n        if ((0,openai_core__WEBPACK_IMPORTED_MODULE_2__.isRequestOptions)(query)) {\n            return this.list({}, query);\n        }\n        return this._client.getAPIList(\"/assistants\", AssistantsPage, {\n            query,\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v1\",\n                ...options?.headers\n            }\n        });\n    }\n    /**\n     * Delete an assistant.\n     */ del(assistantId, options) {\n        return this._client.delete(`/assistants/${assistantId}`, {\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v1\",\n                ...options?.headers\n            }\n        });\n    }\n}\nclass AssistantsPage extends openai_pagination__WEBPACK_IMPORTED_MODULE_3__.CursorPage {\n}\n(function(Assistants) {\n    Assistants.AssistantsPage = openai_resources_beta_assistants_assistants__WEBPACK_IMPORTED_MODULE_4__.AssistantsPage;\n    Assistants.Files = openai_resources_beta_assistants_files__WEBPACK_IMPORTED_MODULE_1__.Files;\n    Assistants.AssistantFilesPage = openai_resources_beta_assistants_files__WEBPACK_IMPORTED_MODULE_1__.AssistantFilesPage;\n})(Assistants || (Assistants = {})); //# sourceMappingURL=assistants.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2JldGEvYXNzaXN0YW50cy9hc3Npc3RhbnRzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEscURBQXFEO0FBQ1A7QUFDQztBQUM4QjtBQUNWO0FBQ3BCO0FBQ3hDLE1BQU1LLG1CQUFtQkwsd0RBQVdBO0lBQ3ZDTSxhQUFjO1FBQ1YsS0FBSyxJQUFJQztRQUNULElBQUksQ0FBQ0MsS0FBSyxHQUFHLElBQUlMLHlFQUFjLENBQUMsSUFBSSxDQUFDTyxPQUFPO0lBQ2hEO0lBQ0E7O0tBRUMsR0FDREMsT0FBT0MsSUFBSSxFQUFFQyxPQUFPLEVBQUU7UUFDbEIsT0FBTyxJQUFJLENBQUNILE9BQU8sQ0FBQ0ksSUFBSSxDQUFDLGVBQWU7WUFDcENGO1lBQ0EsR0FBR0MsT0FBTztZQUNWRSxTQUFTO2dCQUFFLGVBQWU7Z0JBQWlCLEdBQUdGLFNBQVNFLE9BQU87WUFBQztRQUNuRTtJQUNKO0lBQ0E7O0tBRUMsR0FDREMsU0FBU0MsV0FBVyxFQUFFSixPQUFPLEVBQUU7UUFDM0IsT0FBTyxJQUFJLENBQUNILE9BQU8sQ0FBQ1EsR0FBRyxDQUFDLENBQUMsWUFBWSxFQUFFRCxZQUFZLENBQUMsRUFBRTtZQUNsRCxHQUFHSixPQUFPO1lBQ1ZFLFNBQVM7Z0JBQUUsZUFBZTtnQkFBaUIsR0FBR0YsU0FBU0UsT0FBTztZQUFDO1FBQ25FO0lBQ0o7SUFDQTs7S0FFQyxHQUNESSxPQUFPRixXQUFXLEVBQUVMLElBQUksRUFBRUMsT0FBTyxFQUFFO1FBQy9CLE9BQU8sSUFBSSxDQUFDSCxPQUFPLENBQUNJLElBQUksQ0FBQyxDQUFDLFlBQVksRUFBRUcsWUFBWSxDQUFDLEVBQUU7WUFDbkRMO1lBQ0EsR0FBR0MsT0FBTztZQUNWRSxTQUFTO2dCQUFFLGVBQWU7Z0JBQWlCLEdBQUdGLFNBQVNFLE9BQU87WUFBQztRQUNuRTtJQUNKO0lBQ0FLLEtBQUtDLFFBQVEsQ0FBQyxDQUFDLEVBQUVSLE9BQU8sRUFBRTtRQUN0QixJQUFJWiw2REFBZ0JBLENBQUNvQixRQUFRO1lBQ3pCLE9BQU8sSUFBSSxDQUFDRCxJQUFJLENBQUMsQ0FBQyxHQUFHQztRQUN6QjtRQUNBLE9BQU8sSUFBSSxDQUFDWCxPQUFPLENBQUNZLFVBQVUsQ0FBQyxlQUFlQyxnQkFBZ0I7WUFDMURGO1lBQ0EsR0FBR1IsT0FBTztZQUNWRSxTQUFTO2dCQUFFLGVBQWU7Z0JBQWlCLEdBQUdGLFNBQVNFLE9BQU87WUFBQztRQUNuRTtJQUNKO0lBQ0E7O0tBRUMsR0FDRFMsSUFBSVAsV0FBVyxFQUFFSixPQUFPLEVBQUU7UUFDdEIsT0FBTyxJQUFJLENBQUNILE9BQU8sQ0FBQ2UsTUFBTSxDQUFDLENBQUMsWUFBWSxFQUFFUixZQUFZLENBQUMsRUFBRTtZQUNyRCxHQUFHSixPQUFPO1lBQ1ZFLFNBQVM7Z0JBQUUsZUFBZTtnQkFBaUIsR0FBR0YsU0FBU0UsT0FBTztZQUFDO1FBQ25FO0lBQ0o7QUFDSjtBQUNPLE1BQU1RLHVCQUF1Qm5CLHlEQUFVQTtBQUM5QztBQUNDLFVBQVVDLFVBQVU7SUFDakJBLFdBQVdrQixjQUFjLEdBQUdyQix1RkFBNEI7SUFDeERHLFdBQVdJLEtBQUssR0FBR04seUVBQWM7SUFDakNFLFdBQVdxQixrQkFBa0IsR0FBR3ZCLHNGQUEyQjtBQUMvRCxHQUFHRSxjQUFlQSxDQUFBQSxhQUFhLENBQUMsS0FDaEMsdUNBQXVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvYmV0YS9hc3Npc3RhbnRzL2Fzc2lzdGFudHMubWpzP2Q2M2UiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSAnb3BlbmFpL3Jlc291cmNlJztcbmltcG9ydCB7IGlzUmVxdWVzdE9wdGlvbnMgfSBmcm9tICdvcGVuYWkvY29yZSc7XG5pbXBvcnQgKiBhcyBBc3Npc3RhbnRzQVBJIGZyb20gJ29wZW5haS9yZXNvdXJjZXMvYmV0YS9hc3Npc3RhbnRzL2Fzc2lzdGFudHMnO1xuaW1wb3J0ICogYXMgRmlsZXNBUEkgZnJvbSAnb3BlbmFpL3Jlc291cmNlcy9iZXRhL2Fzc2lzdGFudHMvZmlsZXMnO1xuaW1wb3J0IHsgQ3Vyc29yUGFnZSB9IGZyb20gJ29wZW5haS9wYWdpbmF0aW9uJztcbmV4cG9ydCBjbGFzcyBBc3Npc3RhbnRzIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmZpbGVzID0gbmV3IEZpbGVzQVBJLkZpbGVzKHRoaXMuX2NsaWVudCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhbiBhc3Npc3RhbnQgd2l0aCBhIG1vZGVsIGFuZCBpbnN0cnVjdGlvbnMuXG4gICAgICovXG4gICAgY3JlYXRlKGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KCcvYXNzaXN0YW50cycsIHtcbiAgICAgICAgICAgIGJvZHksXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogeyAnT3BlbkFJLUJldGEnOiAnYXNzaXN0YW50cz12MScsIC4uLm9wdGlvbnM/LmhlYWRlcnMgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyBhbiBhc3Npc3RhbnQuXG4gICAgICovXG4gICAgcmV0cmlldmUoYXNzaXN0YW50SWQsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXQoYC9hc3Npc3RhbnRzLyR7YXNzaXN0YW50SWR9YCwge1xuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djEnLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNb2RpZmllcyBhbiBhc3Npc3RhbnQuXG4gICAgICovXG4gICAgdXBkYXRlKGFzc2lzdGFudElkLCBib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdChgL2Fzc2lzdGFudHMvJHthc3Npc3RhbnRJZH1gLCB7XG4gICAgICAgICAgICBib2R5LFxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djEnLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBsaXN0KHF1ZXJ5ID0ge30sIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKGlzUmVxdWVzdE9wdGlvbnMocXVlcnkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5saXN0KHt9LCBxdWVyeSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXRBUElMaXN0KCcvYXNzaXN0YW50cycsIEFzc2lzdGFudHNQYWdlLCB7XG4gICAgICAgICAgICBxdWVyeSxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYxJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVsZXRlIGFuIGFzc2lzdGFudC5cbiAgICAgKi9cbiAgICBkZWwoYXNzaXN0YW50SWQsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5kZWxldGUoYC9hc3Npc3RhbnRzLyR7YXNzaXN0YW50SWR9YCwge1xuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djEnLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBBc3Npc3RhbnRzUGFnZSBleHRlbmRzIEN1cnNvclBhZ2Uge1xufVxuKGZ1bmN0aW9uIChBc3Npc3RhbnRzKSB7XG4gICAgQXNzaXN0YW50cy5Bc3Npc3RhbnRzUGFnZSA9IEFzc2lzdGFudHNBUEkuQXNzaXN0YW50c1BhZ2U7XG4gICAgQXNzaXN0YW50cy5GaWxlcyA9IEZpbGVzQVBJLkZpbGVzO1xuICAgIEFzc2lzdGFudHMuQXNzaXN0YW50RmlsZXNQYWdlID0gRmlsZXNBUEkuQXNzaXN0YW50RmlsZXNQYWdlO1xufSkoQXNzaXN0YW50cyB8fCAoQXNzaXN0YW50cyA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hc3Npc3RhbnRzLm1qcy5tYXAiXSwibmFtZXMiOlsiQVBJUmVzb3VyY2UiLCJpc1JlcXVlc3RPcHRpb25zIiwiQXNzaXN0YW50c0FQSSIsIkZpbGVzQVBJIiwiQ3Vyc29yUGFnZSIsIkFzc2lzdGFudHMiLCJjb25zdHJ1Y3RvciIsImFyZ3VtZW50cyIsImZpbGVzIiwiRmlsZXMiLCJfY2xpZW50IiwiY3JlYXRlIiwiYm9keSIsIm9wdGlvbnMiLCJwb3N0IiwiaGVhZGVycyIsInJldHJpZXZlIiwiYXNzaXN0YW50SWQiLCJnZXQiLCJ1cGRhdGUiLCJsaXN0IiwicXVlcnkiLCJnZXRBUElMaXN0IiwiQXNzaXN0YW50c1BhZ2UiLCJkZWwiLCJkZWxldGUiLCJBc3Npc3RhbnRGaWxlc1BhZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/openai/resources/beta/assistants/assistants.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/openai/resources/beta/assistants/files.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/openai/resources/beta/assistants/files.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AssistantFilesPage: () => (/* binding */ AssistantFilesPage),\n/* harmony export */   Files: () => (/* binding */ Files)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(action-browser)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var openai_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/core */ \"(action-browser)/./node_modules/openai/core.mjs\");\n/* harmony import */ var openai_resources_beta_assistants_files__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! openai/resources/beta/assistants/files */ \"(action-browser)/./node_modules/openai/resources/beta/assistants/files.mjs\");\n/* harmony import */ var openai_pagination__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai/pagination */ \"(action-browser)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n\n\n\nclass Files extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Create an assistant file by attaching a\n     * [File](https://platform.openai.com/docs/api-reference/files) to an\n     * [assistant](https://platform.openai.com/docs/api-reference/assistants).\n     */ create(assistantId, body, options) {\n        return this._client.post(`/assistants/${assistantId}/files`, {\n            body,\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v1\",\n                ...options?.headers\n            }\n        });\n    }\n    /**\n     * Retrieves an AssistantFile.\n     */ retrieve(assistantId, fileId, options) {\n        return this._client.get(`/assistants/${assistantId}/files/${fileId}`, {\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v1\",\n                ...options?.headers\n            }\n        });\n    }\n    list(assistantId, query = {}, options) {\n        if ((0,openai_core__WEBPACK_IMPORTED_MODULE_1__.isRequestOptions)(query)) {\n            return this.list(assistantId, {}, query);\n        }\n        return this._client.getAPIList(`/assistants/${assistantId}/files`, AssistantFilesPage, {\n            query,\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v1\",\n                ...options?.headers\n            }\n        });\n    }\n    /**\n     * Delete an assistant file.\n     */ del(assistantId, fileId, options) {\n        return this._client.delete(`/assistants/${assistantId}/files/${fileId}`, {\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v1\",\n                ...options?.headers\n            }\n        });\n    }\n}\nclass AssistantFilesPage extends openai_pagination__WEBPACK_IMPORTED_MODULE_2__.CursorPage {\n}\n(function(Files) {\n    Files.AssistantFilesPage = openai_resources_beta_assistants_files__WEBPACK_IMPORTED_MODULE_3__.AssistantFilesPage;\n})(Files || (Files = {})); //# sourceMappingURL=files.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2JldGEvYXNzaXN0YW50cy9maWxlcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEscURBQXFEO0FBQ1A7QUFDQztBQUNvQjtBQUNwQjtBQUN4QyxNQUFNSSxjQUFjSix3REFBV0E7SUFDbEM7Ozs7S0FJQyxHQUNESyxPQUFPQyxXQUFXLEVBQUVDLElBQUksRUFBRUMsT0FBTyxFQUFFO1FBQy9CLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNDLElBQUksQ0FBQyxDQUFDLFlBQVksRUFBRUosWUFBWSxNQUFNLENBQUMsRUFBRTtZQUN6REM7WUFDQSxHQUFHQyxPQUFPO1lBQ1ZHLFNBQVM7Z0JBQUUsZUFBZTtnQkFBaUIsR0FBR0gsU0FBU0csT0FBTztZQUFDO1FBQ25FO0lBQ0o7SUFDQTs7S0FFQyxHQUNEQyxTQUFTTixXQUFXLEVBQUVPLE1BQU0sRUFBRUwsT0FBTyxFQUFFO1FBQ25DLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNLLEdBQUcsQ0FBQyxDQUFDLFlBQVksRUFBRVIsWUFBWSxPQUFPLEVBQUVPLE9BQU8sQ0FBQyxFQUFFO1lBQ2xFLEdBQUdMLE9BQU87WUFDVkcsU0FBUztnQkFBRSxlQUFlO2dCQUFpQixHQUFHSCxTQUFTRyxPQUFPO1lBQUM7UUFDbkU7SUFDSjtJQUNBSSxLQUFLVCxXQUFXLEVBQUVVLFFBQVEsQ0FBQyxDQUFDLEVBQUVSLE9BQU8sRUFBRTtRQUNuQyxJQUFJUCw2REFBZ0JBLENBQUNlLFFBQVE7WUFDekIsT0FBTyxJQUFJLENBQUNELElBQUksQ0FBQ1QsYUFBYSxDQUFDLEdBQUdVO1FBQ3RDO1FBQ0EsT0FBTyxJQUFJLENBQUNQLE9BQU8sQ0FBQ1EsVUFBVSxDQUFDLENBQUMsWUFBWSxFQUFFWCxZQUFZLE1BQU0sQ0FBQyxFQUFFWSxvQkFBb0I7WUFDbkZGO1lBQ0EsR0FBR1IsT0FBTztZQUNWRyxTQUFTO2dCQUFFLGVBQWU7Z0JBQWlCLEdBQUdILFNBQVNHLE9BQU87WUFBQztRQUNuRTtJQUNKO0lBQ0E7O0tBRUMsR0FDRFEsSUFBSWIsV0FBVyxFQUFFTyxNQUFNLEVBQUVMLE9BQU8sRUFBRTtRQUM5QixPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDVyxNQUFNLENBQUMsQ0FBQyxZQUFZLEVBQUVkLFlBQVksT0FBTyxFQUFFTyxPQUFPLENBQUMsRUFBRTtZQUNyRSxHQUFHTCxPQUFPO1lBQ1ZHLFNBQVM7Z0JBQUUsZUFBZTtnQkFBaUIsR0FBR0gsU0FBU0csT0FBTztZQUFDO1FBQ25FO0lBQ0o7QUFDSjtBQUNPLE1BQU1PLDJCQUEyQmYseURBQVVBO0FBQ2xEO0FBQ0MsVUFBVUMsS0FBSztJQUNaQSxNQUFNYyxrQkFBa0IsR0FBR2hCLHNGQUEyQjtBQUMxRCxHQUFHRSxTQUFVQSxDQUFBQSxRQUFRLENBQUMsS0FDdEIsa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvYmV0YS9hc3Npc3RhbnRzL2ZpbGVzLm1qcz84MmYwIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gJ29wZW5haS9yZXNvdXJjZSc7XG5pbXBvcnQgeyBpc1JlcXVlc3RPcHRpb25zIH0gZnJvbSAnb3BlbmFpL2NvcmUnO1xuaW1wb3J0ICogYXMgRmlsZXNBUEkgZnJvbSAnb3BlbmFpL3Jlc291cmNlcy9iZXRhL2Fzc2lzdGFudHMvZmlsZXMnO1xuaW1wb3J0IHsgQ3Vyc29yUGFnZSB9IGZyb20gJ29wZW5haS9wYWdpbmF0aW9uJztcbmV4cG9ydCBjbGFzcyBGaWxlcyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYW4gYXNzaXN0YW50IGZpbGUgYnkgYXR0YWNoaW5nIGFcbiAgICAgKiBbRmlsZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9maWxlcykgdG8gYW5cbiAgICAgKiBbYXNzaXN0YW50XShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL2Fzc2lzdGFudHMpLlxuICAgICAqL1xuICAgIGNyZWF0ZShhc3Npc3RhbnRJZCwgYm9keSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoYC9hc3Npc3RhbnRzLyR7YXNzaXN0YW50SWR9L2ZpbGVzYCwge1xuICAgICAgICAgICAgYm9keSxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYxJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIGFuIEFzc2lzdGFudEZpbGUuXG4gICAgICovXG4gICAgcmV0cmlldmUoYXNzaXN0YW50SWQsIGZpbGVJZCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldChgL2Fzc2lzdGFudHMvJHthc3Npc3RhbnRJZH0vZmlsZXMvJHtmaWxlSWR9YCwge1xuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djEnLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBsaXN0KGFzc2lzdGFudElkLCBxdWVyeSA9IHt9LCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChpc1JlcXVlc3RPcHRpb25zKHF1ZXJ5KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubGlzdChhc3Npc3RhbnRJZCwge30sIHF1ZXJ5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldEFQSUxpc3QoYC9hc3Npc3RhbnRzLyR7YXNzaXN0YW50SWR9L2ZpbGVzYCwgQXNzaXN0YW50RmlsZXNQYWdlLCB7XG4gICAgICAgICAgICBxdWVyeSxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYxJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVsZXRlIGFuIGFzc2lzdGFudCBmaWxlLlxuICAgICAqL1xuICAgIGRlbChhc3Npc3RhbnRJZCwgZmlsZUlkLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZGVsZXRlKGAvYXNzaXN0YW50cy8ke2Fzc2lzdGFudElkfS9maWxlcy8ke2ZpbGVJZH1gLCB7XG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogeyAnT3BlbkFJLUJldGEnOiAnYXNzaXN0YW50cz12MScsIC4uLm9wdGlvbnM/LmhlYWRlcnMgfSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEFzc2lzdGFudEZpbGVzUGFnZSBleHRlbmRzIEN1cnNvclBhZ2Uge1xufVxuKGZ1bmN0aW9uIChGaWxlcykge1xuICAgIEZpbGVzLkFzc2lzdGFudEZpbGVzUGFnZSA9IEZpbGVzQVBJLkFzc2lzdGFudEZpbGVzUGFnZTtcbn0pKEZpbGVzIHx8IChGaWxlcyA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1maWxlcy5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiaXNSZXF1ZXN0T3B0aW9ucyIsIkZpbGVzQVBJIiwiQ3Vyc29yUGFnZSIsIkZpbGVzIiwiY3JlYXRlIiwiYXNzaXN0YW50SWQiLCJib2R5Iiwib3B0aW9ucyIsIl9jbGllbnQiLCJwb3N0IiwiaGVhZGVycyIsInJldHJpZXZlIiwiZmlsZUlkIiwiZ2V0IiwibGlzdCIsInF1ZXJ5IiwiZ2V0QVBJTGlzdCIsIkFzc2lzdGFudEZpbGVzUGFnZSIsImRlbCIsImRlbGV0ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/openai/resources/beta/assistants/files.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/openai/resources/beta/beta.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/openai/resources/beta/beta.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Beta: () => (/* binding */ Beta)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(action-browser)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var openai_resources_beta_assistants_assistants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai/resources/beta/assistants/assistants */ \"(action-browser)/./node_modules/openai/resources/beta/assistants/assistants.mjs\");\n/* harmony import */ var openai_resources_beta_chat_chat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/resources/beta/chat/chat */ \"(action-browser)/./node_modules/openai/resources/beta/chat/chat.mjs\");\n/* harmony import */ var openai_resources_beta_threads_threads__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! openai/resources/beta/threads/threads */ \"(action-browser)/./node_modules/openai/resources/beta/threads/threads.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n\n\n\nclass Beta extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    constructor(){\n        super(...arguments);\n        this.chat = new openai_resources_beta_chat_chat__WEBPACK_IMPORTED_MODULE_1__.Chat(this._client);\n        this.assistants = new openai_resources_beta_assistants_assistants__WEBPACK_IMPORTED_MODULE_2__.Assistants(this._client);\n        this.threads = new openai_resources_beta_threads_threads__WEBPACK_IMPORTED_MODULE_3__.Threads(this._client);\n    }\n}\n(function(Beta) {\n    Beta.Chat = openai_resources_beta_chat_chat__WEBPACK_IMPORTED_MODULE_1__.Chat;\n    Beta.Assistants = openai_resources_beta_assistants_assistants__WEBPACK_IMPORTED_MODULE_2__.Assistants;\n    Beta.AssistantsPage = openai_resources_beta_assistants_assistants__WEBPACK_IMPORTED_MODULE_2__.AssistantsPage;\n    Beta.Threads = openai_resources_beta_threads_threads__WEBPACK_IMPORTED_MODULE_3__.Threads;\n})(Beta || (Beta = {})); //# sourceMappingURL=beta.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2JldGEvYmV0YS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxxREFBcUQ7QUFDUDtBQUMrQjtBQUNsQjtBQUNTO0FBQzdELE1BQU1JLGFBQWFKLHdEQUFXQTtJQUNqQ0ssYUFBYztRQUNWLEtBQUssSUFBSUM7UUFDVCxJQUFJLENBQUNDLElBQUksR0FBRyxJQUFJTCxpRUFBWSxDQUFDLElBQUksQ0FBQ08sT0FBTztRQUN6QyxJQUFJLENBQUNDLFVBQVUsR0FBRyxJQUFJVCxtRkFBd0IsQ0FBQyxJQUFJLENBQUNRLE9BQU87UUFDM0QsSUFBSSxDQUFDRyxPQUFPLEdBQUcsSUFBSVQsMEVBQWtCLENBQUMsSUFBSSxDQUFDTSxPQUFPO0lBQ3REO0FBQ0o7QUFDQyxVQUFVTCxJQUFJO0lBQ1hBLEtBQUtJLElBQUksR0FBR04saUVBQVk7SUFDeEJFLEtBQUtPLFVBQVUsR0FBR1YsbUZBQXdCO0lBQzFDRyxLQUFLVSxjQUFjLEdBQUdiLHVGQUE0QjtJQUNsREcsS0FBS1MsT0FBTyxHQUFHViwwRUFBa0I7QUFDckMsR0FBR0MsUUFBU0EsQ0FBQUEsT0FBTyxDQUFDLEtBQ3BCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2JldGEvYmV0YS5tanM/ZjkyNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tICdvcGVuYWkvcmVzb3VyY2UnO1xuaW1wb3J0ICogYXMgQXNzaXN0YW50c0FQSSBmcm9tICdvcGVuYWkvcmVzb3VyY2VzL2JldGEvYXNzaXN0YW50cy9hc3Npc3RhbnRzJztcbmltcG9ydCAqIGFzIENoYXRBUEkgZnJvbSAnb3BlbmFpL3Jlc291cmNlcy9iZXRhL2NoYXQvY2hhdCc7XG5pbXBvcnQgKiBhcyBUaHJlYWRzQVBJIGZyb20gJ29wZW5haS9yZXNvdXJjZXMvYmV0YS90aHJlYWRzL3RocmVhZHMnO1xuZXhwb3J0IGNsYXNzIEJldGEgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuY2hhdCA9IG5ldyBDaGF0QVBJLkNoYXQodGhpcy5fY2xpZW50KTtcbiAgICAgICAgdGhpcy5hc3Npc3RhbnRzID0gbmV3IEFzc2lzdGFudHNBUEkuQXNzaXN0YW50cyh0aGlzLl9jbGllbnQpO1xuICAgICAgICB0aGlzLnRocmVhZHMgPSBuZXcgVGhyZWFkc0FQSS5UaHJlYWRzKHRoaXMuX2NsaWVudCk7XG4gICAgfVxufVxuKGZ1bmN0aW9uIChCZXRhKSB7XG4gICAgQmV0YS5DaGF0ID0gQ2hhdEFQSS5DaGF0O1xuICAgIEJldGEuQXNzaXN0YW50cyA9IEFzc2lzdGFudHNBUEkuQXNzaXN0YW50cztcbiAgICBCZXRhLkFzc2lzdGFudHNQYWdlID0gQXNzaXN0YW50c0FQSS5Bc3Npc3RhbnRzUGFnZTtcbiAgICBCZXRhLlRocmVhZHMgPSBUaHJlYWRzQVBJLlRocmVhZHM7XG59KShCZXRhIHx8IChCZXRhID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJldGEubWpzLm1hcCJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsIkFzc2lzdGFudHNBUEkiLCJDaGF0QVBJIiwiVGhyZWFkc0FQSSIsIkJldGEiLCJjb25zdHJ1Y3RvciIsImFyZ3VtZW50cyIsImNoYXQiLCJDaGF0IiwiX2NsaWVudCIsImFzc2lzdGFudHMiLCJBc3Npc3RhbnRzIiwidGhyZWFkcyIsIlRocmVhZHMiLCJBc3Npc3RhbnRzUGFnZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/openai/resources/beta/beta.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/openai/resources/beta/chat/chat.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/openai/resources/beta/chat/chat.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Chat: () => (/* binding */ Chat)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(action-browser)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var openai_resources_beta_chat_completions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/resources/beta/chat/completions */ \"(action-browser)/./node_modules/openai/resources/beta/chat/completions.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n\nclass Chat extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    constructor(){\n        super(...arguments);\n        this.completions = new openai_resources_beta_chat_completions__WEBPACK_IMPORTED_MODULE_1__.Completions(this._client);\n    }\n}\n(function(Chat) {\n    Chat.Completions = openai_resources_beta_chat_completions__WEBPACK_IMPORTED_MODULE_1__.Completions;\n})(Chat || (Chat = {})); //# sourceMappingURL=chat.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2JldGEvY2hhdC9jaGF0Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxxREFBcUQ7QUFDUDtBQUMyQjtBQUNsRSxNQUFNRSxhQUFhRix3REFBV0E7SUFDakNHLGFBQWM7UUFDVixLQUFLLElBQUlDO1FBQ1QsSUFBSSxDQUFDQyxXQUFXLEdBQUcsSUFBSUosK0VBQTBCLENBQUMsSUFBSSxDQUFDTSxPQUFPO0lBQ2xFO0FBQ0o7QUFDQyxVQUFVTCxJQUFJO0lBQ1hBLEtBQUtJLFdBQVcsR0FBR0wsK0VBQTBCO0FBQ2pELEdBQUdDLFFBQVNBLENBQUFBLE9BQU8sQ0FBQyxLQUNwQixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iZXRhL2NoYXQvY2hhdC5tanM/NmY4NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tICdvcGVuYWkvcmVzb3VyY2UnO1xuaW1wb3J0ICogYXMgQ29tcGxldGlvbnNBUEkgZnJvbSAnb3BlbmFpL3Jlc291cmNlcy9iZXRhL2NoYXQvY29tcGxldGlvbnMnO1xuZXhwb3J0IGNsYXNzIENoYXQgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuY29tcGxldGlvbnMgPSBuZXcgQ29tcGxldGlvbnNBUEkuQ29tcGxldGlvbnModGhpcy5fY2xpZW50KTtcbiAgICB9XG59XG4oZnVuY3Rpb24gKENoYXQpIHtcbiAgICBDaGF0LkNvbXBsZXRpb25zID0gQ29tcGxldGlvbnNBUEkuQ29tcGxldGlvbnM7XG59KShDaGF0IHx8IChDaGF0ID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNoYXQubWpzLm1hcCJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsIkNvbXBsZXRpb25zQVBJIiwiQ2hhdCIsImNvbnN0cnVjdG9yIiwiYXJndW1lbnRzIiwiY29tcGxldGlvbnMiLCJDb21wbGV0aW9ucyIsIl9jbGllbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/openai/resources/beta/chat/chat.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/openai/resources/beta/chat/completions.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/openai/resources/beta/chat/completions.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatCompletionRunner: () => (/* reexport safe */ openai_lib_ChatCompletionRunner__WEBPACK_IMPORTED_MODULE_0__.ChatCompletionRunner),\n/* harmony export */   ChatCompletionStream: () => (/* reexport safe */ openai_lib_ChatCompletionStream__WEBPACK_IMPORTED_MODULE_3__.ChatCompletionStream),\n/* harmony export */   ChatCompletionStreamingRunner: () => (/* reexport safe */ openai_lib_ChatCompletionStreamingRunner__WEBPACK_IMPORTED_MODULE_1__.ChatCompletionStreamingRunner),\n/* harmony export */   Completions: () => (/* binding */ Completions),\n/* harmony export */   ParsingFunction: () => (/* reexport safe */ openai_lib_RunnableFunction__WEBPACK_IMPORTED_MODULE_2__.ParsingFunction)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! openai/resource */ \"(action-browser)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var openai_lib_ChatCompletionRunner__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/lib/ChatCompletionRunner */ \"(action-browser)/./node_modules/openai/lib/ChatCompletionRunner.mjs\");\n/* harmony import */ var openai_lib_ChatCompletionStreamingRunner__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/lib/ChatCompletionStreamingRunner */ \"(action-browser)/./node_modules/openai/lib/ChatCompletionStreamingRunner.mjs\");\n/* harmony import */ var openai_lib_RunnableFunction__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai/lib/RunnableFunction */ \"(action-browser)/./node_modules/openai/lib/RunnableFunction.mjs\");\n/* harmony import */ var openai_lib_ChatCompletionStream__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! openai/lib/ChatCompletionStream */ \"(action-browser)/./node_modules/openai/lib/ChatCompletionStream.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n\n\n\n\n\n\n\nclass Completions extends openai_resource__WEBPACK_IMPORTED_MODULE_4__.APIResource {\n    runFunctions(body, options) {\n        if (body.stream) {\n            return openai_lib_ChatCompletionStreamingRunner__WEBPACK_IMPORTED_MODULE_1__.ChatCompletionStreamingRunner.runFunctions(this._client.chat.completions, body, options);\n        }\n        return openai_lib_ChatCompletionRunner__WEBPACK_IMPORTED_MODULE_0__.ChatCompletionRunner.runFunctions(this._client.chat.completions, body, options);\n    }\n    runTools(body, options) {\n        if (body.stream) {\n            return openai_lib_ChatCompletionStreamingRunner__WEBPACK_IMPORTED_MODULE_1__.ChatCompletionStreamingRunner.runTools(this._client.chat.completions, body, options);\n        }\n        return openai_lib_ChatCompletionRunner__WEBPACK_IMPORTED_MODULE_0__.ChatCompletionRunner.runTools(this._client.chat.completions, body, options);\n    }\n    /**\n     * Creates a chat completion stream\n     */ stream(body, options) {\n        return openai_lib_ChatCompletionStream__WEBPACK_IMPORTED_MODULE_3__.ChatCompletionStream.createChatCompletion(this._client.chat.completions, body, options);\n    }\n} //# sourceMappingURL=completions.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2JldGEvY2hhdC9jb21wbGV0aW9ucy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBLHFEQUFxRDtBQUNQO0FBQ3lCO0FBQ0E7QUFDbUI7QUFDQTtBQUMzQjtBQUNRO0FBQ0E7QUFDaEUsTUFBTUssb0JBQW9CTCx3REFBV0E7SUFDeENNLGFBQWFDLElBQUksRUFBRUMsT0FBTyxFQUFFO1FBQ3hCLElBQUlELEtBQUtFLE1BQU0sRUFBRTtZQUNiLE9BQU9QLG1HQUE2QkEsQ0FBQ0ksWUFBWSxDQUFDLElBQUksQ0FBQ0ksT0FBTyxDQUFDQyxJQUFJLENBQUNDLFdBQVcsRUFBRUwsTUFBTUM7UUFDM0Y7UUFDQSxPQUFPUCxpRkFBb0JBLENBQUNLLFlBQVksQ0FBQyxJQUFJLENBQUNJLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDQyxXQUFXLEVBQUVMLE1BQU1DO0lBQ2xGO0lBQ0FLLFNBQVNOLElBQUksRUFBRUMsT0FBTyxFQUFFO1FBQ3BCLElBQUlELEtBQUtFLE1BQU0sRUFBRTtZQUNiLE9BQU9QLG1HQUE2QkEsQ0FBQ1csUUFBUSxDQUFDLElBQUksQ0FBQ0gsT0FBTyxDQUFDQyxJQUFJLENBQUNDLFdBQVcsRUFBRUwsTUFBTUM7UUFDdkY7UUFDQSxPQUFPUCxpRkFBb0JBLENBQUNZLFFBQVEsQ0FBQyxJQUFJLENBQUNILE9BQU8sQ0FBQ0MsSUFBSSxDQUFDQyxXQUFXLEVBQUVMLE1BQU1DO0lBQzlFO0lBQ0E7O0tBRUMsR0FDREMsT0FBT0YsSUFBSSxFQUFFQyxPQUFPLEVBQUU7UUFDbEIsT0FBT0osaUZBQW9CQSxDQUFDVSxvQkFBb0IsQ0FBQyxJQUFJLENBQUNKLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDQyxXQUFXLEVBQUVMLE1BQU1DO0lBQzFGO0FBQ0osRUFDQSx3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iZXRhL2NoYXQvY29tcGxldGlvbnMubWpzPzAwY2EiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSAnb3BlbmFpL3Jlc291cmNlJztcbmltcG9ydCB7IENoYXRDb21wbGV0aW9uUnVubmVyIH0gZnJvbSAnb3BlbmFpL2xpYi9DaGF0Q29tcGxldGlvblJ1bm5lcic7XG5leHBvcnQgeyBDaGF0Q29tcGxldGlvblJ1bm5lciB9IGZyb20gJ29wZW5haS9saWIvQ2hhdENvbXBsZXRpb25SdW5uZXInO1xuaW1wb3J0IHsgQ2hhdENvbXBsZXRpb25TdHJlYW1pbmdSdW5uZXIsIH0gZnJvbSAnb3BlbmFpL2xpYi9DaGF0Q29tcGxldGlvblN0cmVhbWluZ1J1bm5lcic7XG5leHBvcnQgeyBDaGF0Q29tcGxldGlvblN0cmVhbWluZ1J1bm5lciwgfSBmcm9tICdvcGVuYWkvbGliL0NoYXRDb21wbGV0aW9uU3RyZWFtaW5nUnVubmVyJztcbmV4cG9ydCB7IFBhcnNpbmdGdW5jdGlvbiwgfSBmcm9tICdvcGVuYWkvbGliL1J1bm5hYmxlRnVuY3Rpb24nO1xuaW1wb3J0IHsgQ2hhdENvbXBsZXRpb25TdHJlYW0gfSBmcm9tICdvcGVuYWkvbGliL0NoYXRDb21wbGV0aW9uU3RyZWFtJztcbmV4cG9ydCB7IENoYXRDb21wbGV0aW9uU3RyZWFtIH0gZnJvbSAnb3BlbmFpL2xpYi9DaGF0Q29tcGxldGlvblN0cmVhbSc7XG5leHBvcnQgY2xhc3MgQ29tcGxldGlvbnMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgcnVuRnVuY3Rpb25zKGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKGJvZHkuc3RyZWFtKSB7XG4gICAgICAgICAgICByZXR1cm4gQ2hhdENvbXBsZXRpb25TdHJlYW1pbmdSdW5uZXIucnVuRnVuY3Rpb25zKHRoaXMuX2NsaWVudC5jaGF0LmNvbXBsZXRpb25zLCBib2R5LCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gQ2hhdENvbXBsZXRpb25SdW5uZXIucnVuRnVuY3Rpb25zKHRoaXMuX2NsaWVudC5jaGF0LmNvbXBsZXRpb25zLCBib2R5LCBvcHRpb25zKTtcbiAgICB9XG4gICAgcnVuVG9vbHMoYm9keSwgb3B0aW9ucykge1xuICAgICAgICBpZiAoYm9keS5zdHJlYW0pIHtcbiAgICAgICAgICAgIHJldHVybiBDaGF0Q29tcGxldGlvblN0cmVhbWluZ1J1bm5lci5ydW5Ub29scyh0aGlzLl9jbGllbnQuY2hhdC5jb21wbGV0aW9ucywgYm9keSwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIENoYXRDb21wbGV0aW9uUnVubmVyLnJ1blRvb2xzKHRoaXMuX2NsaWVudC5jaGF0LmNvbXBsZXRpb25zLCBib2R5LCBvcHRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNoYXQgY29tcGxldGlvbiBzdHJlYW1cbiAgICAgKi9cbiAgICBzdHJlYW0oYm9keSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gQ2hhdENvbXBsZXRpb25TdHJlYW0uY3JlYXRlQ2hhdENvbXBsZXRpb24odGhpcy5fY2xpZW50LmNoYXQuY29tcGxldGlvbnMsIGJvZHksIG9wdGlvbnMpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbXBsZXRpb25zLm1qcy5tYXAiXSwibmFtZXMiOlsiQVBJUmVzb3VyY2UiLCJDaGF0Q29tcGxldGlvblJ1bm5lciIsIkNoYXRDb21wbGV0aW9uU3RyZWFtaW5nUnVubmVyIiwiUGFyc2luZ0Z1bmN0aW9uIiwiQ2hhdENvbXBsZXRpb25TdHJlYW0iLCJDb21wbGV0aW9ucyIsInJ1bkZ1bmN0aW9ucyIsImJvZHkiLCJvcHRpb25zIiwic3RyZWFtIiwiX2NsaWVudCIsImNoYXQiLCJjb21wbGV0aW9ucyIsInJ1blRvb2xzIiwiY3JlYXRlQ2hhdENvbXBsZXRpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/openai/resources/beta/chat/completions.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/openai/resources/beta/threads/messages/files.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/openai/resources/beta/threads/messages/files.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Files: () => (/* binding */ Files),\n/* harmony export */   MessageFilesPage: () => (/* binding */ MessageFilesPage)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(action-browser)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var openai_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/core */ \"(action-browser)/./node_modules/openai/core.mjs\");\n/* harmony import */ var openai_resources_beta_threads_messages_files__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! openai/resources/beta/threads/messages/files */ \"(action-browser)/./node_modules/openai/resources/beta/threads/messages/files.mjs\");\n/* harmony import */ var openai_pagination__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai/pagination */ \"(action-browser)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n\n\n\nclass Files extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Retrieves a message file.\n     */ retrieve(threadId, messageId, fileId, options) {\n        return this._client.get(`/threads/${threadId}/messages/${messageId}/files/${fileId}`, {\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v1\",\n                ...options?.headers\n            }\n        });\n    }\n    list(threadId, messageId, query = {}, options) {\n        if ((0,openai_core__WEBPACK_IMPORTED_MODULE_1__.isRequestOptions)(query)) {\n            return this.list(threadId, messageId, {}, query);\n        }\n        return this._client.getAPIList(`/threads/${threadId}/messages/${messageId}/files`, MessageFilesPage, {\n            query,\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v1\",\n                ...options?.headers\n            }\n        });\n    }\n}\nclass MessageFilesPage extends openai_pagination__WEBPACK_IMPORTED_MODULE_2__.CursorPage {\n}\n(function(Files) {\n    Files.MessageFilesPage = openai_resources_beta_threads_messages_files__WEBPACK_IMPORTED_MODULE_3__.MessageFilesPage;\n})(Files || (Files = {})); //# sourceMappingURL=files.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2JldGEvdGhyZWFkcy9tZXNzYWdlcy9maWxlcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEscURBQXFEO0FBQ1A7QUFDQztBQUMwQjtBQUMxQjtBQUN4QyxNQUFNSSxjQUFjSix3REFBV0E7SUFDbEM7O0tBRUMsR0FDREssU0FBU0MsUUFBUSxFQUFFQyxTQUFTLEVBQUVDLE1BQU0sRUFBRUMsT0FBTyxFQUFFO1FBQzNDLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNDLEdBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBRUwsU0FBUyxVQUFVLEVBQUVDLFVBQVUsT0FBTyxFQUFFQyxPQUFPLENBQUMsRUFBRTtZQUNsRixHQUFHQyxPQUFPO1lBQ1ZHLFNBQVM7Z0JBQUUsZUFBZTtnQkFBaUIsR0FBR0gsU0FBU0csT0FBTztZQUFDO1FBQ25FO0lBQ0o7SUFDQUMsS0FBS1AsUUFBUSxFQUFFQyxTQUFTLEVBQUVPLFFBQVEsQ0FBQyxDQUFDLEVBQUVMLE9BQU8sRUFBRTtRQUMzQyxJQUFJUiw2REFBZ0JBLENBQUNhLFFBQVE7WUFDekIsT0FBTyxJQUFJLENBQUNELElBQUksQ0FBQ1AsVUFBVUMsV0FBVyxDQUFDLEdBQUdPO1FBQzlDO1FBQ0EsT0FBTyxJQUFJLENBQUNKLE9BQU8sQ0FBQ0ssVUFBVSxDQUFDLENBQUMsU0FBUyxFQUFFVCxTQUFTLFVBQVUsRUFBRUMsVUFBVSxNQUFNLENBQUMsRUFBRVMsa0JBQWtCO1lBQ2pHRjtZQUNBLEdBQUdMLE9BQU87WUFDVkcsU0FBUztnQkFBRSxlQUFlO2dCQUFpQixHQUFHSCxTQUFTRyxPQUFPO1lBQUM7UUFDbkU7SUFDSjtBQUNKO0FBQ08sTUFBTUkseUJBQXlCYix5REFBVUE7QUFDaEQ7QUFDQyxVQUFVQyxLQUFLO0lBQ1pBLE1BQU1ZLGdCQUFnQixHQUFHZCwwRkFBeUI7QUFDdEQsR0FBR0UsU0FBVUEsQ0FBQUEsUUFBUSxDQUFDLEtBQ3RCLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2JldGEvdGhyZWFkcy9tZXNzYWdlcy9maWxlcy5tanM/MDhhMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tICdvcGVuYWkvcmVzb3VyY2UnO1xuaW1wb3J0IHsgaXNSZXF1ZXN0T3B0aW9ucyB9IGZyb20gJ29wZW5haS9jb3JlJztcbmltcG9ydCAqIGFzIEZpbGVzQVBJIGZyb20gJ29wZW5haS9yZXNvdXJjZXMvYmV0YS90aHJlYWRzL21lc3NhZ2VzL2ZpbGVzJztcbmltcG9ydCB7IEN1cnNvclBhZ2UgfSBmcm9tICdvcGVuYWkvcGFnaW5hdGlvbic7XG5leHBvcnQgY2xhc3MgRmlsZXMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIGEgbWVzc2FnZSBmaWxlLlxuICAgICAqL1xuICAgIHJldHJpZXZlKHRocmVhZElkLCBtZXNzYWdlSWQsIGZpbGVJZCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldChgL3RocmVhZHMvJHt0aHJlYWRJZH0vbWVzc2FnZXMvJHttZXNzYWdlSWR9L2ZpbGVzLyR7ZmlsZUlkfWAsIHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYxJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgbGlzdCh0aHJlYWRJZCwgbWVzc2FnZUlkLCBxdWVyeSA9IHt9LCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChpc1JlcXVlc3RPcHRpb25zKHF1ZXJ5KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubGlzdCh0aHJlYWRJZCwgbWVzc2FnZUlkLCB7fSwgcXVlcnkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0QVBJTGlzdChgL3RocmVhZHMvJHt0aHJlYWRJZH0vbWVzc2FnZXMvJHttZXNzYWdlSWR9L2ZpbGVzYCwgTWVzc2FnZUZpbGVzUGFnZSwge1xuICAgICAgICAgICAgcXVlcnksXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogeyAnT3BlbkFJLUJldGEnOiAnYXNzaXN0YW50cz12MScsIC4uLm9wdGlvbnM/LmhlYWRlcnMgfSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIE1lc3NhZ2VGaWxlc1BhZ2UgZXh0ZW5kcyBDdXJzb3JQYWdlIHtcbn1cbihmdW5jdGlvbiAoRmlsZXMpIHtcbiAgICBGaWxlcy5NZXNzYWdlRmlsZXNQYWdlID0gRmlsZXNBUEkuTWVzc2FnZUZpbGVzUGFnZTtcbn0pKEZpbGVzIHx8IChGaWxlcyA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1maWxlcy5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiaXNSZXF1ZXN0T3B0aW9ucyIsIkZpbGVzQVBJIiwiQ3Vyc29yUGFnZSIsIkZpbGVzIiwicmV0cmlldmUiLCJ0aHJlYWRJZCIsIm1lc3NhZ2VJZCIsImZpbGVJZCIsIm9wdGlvbnMiLCJfY2xpZW50IiwiZ2V0IiwiaGVhZGVycyIsImxpc3QiLCJxdWVyeSIsImdldEFQSUxpc3QiLCJNZXNzYWdlRmlsZXNQYWdlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/openai/resources/beta/threads/messages/files.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/openai/resources/beta/threads/messages/messages.mjs":
/*!**************************************************************************!*\
  !*** ./node_modules/openai/resources/beta/threads/messages/messages.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Messages: () => (/* binding */ Messages),\n/* harmony export */   ThreadMessagesPage: () => (/* binding */ ThreadMessagesPage)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(action-browser)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var openai_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai/core */ \"(action-browser)/./node_modules/openai/core.mjs\");\n/* harmony import */ var openai_resources_beta_threads_messages_messages__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! openai/resources/beta/threads/messages/messages */ \"(action-browser)/./node_modules/openai/resources/beta/threads/messages/messages.mjs\");\n/* harmony import */ var openai_resources_beta_threads_messages_files__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/resources/beta/threads/messages/files */ \"(action-browser)/./node_modules/openai/resources/beta/threads/messages/files.mjs\");\n/* harmony import */ var openai_pagination__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! openai/pagination */ \"(action-browser)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n\n\n\n\nclass Messages extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    constructor(){\n        super(...arguments);\n        this.files = new openai_resources_beta_threads_messages_files__WEBPACK_IMPORTED_MODULE_1__.Files(this._client);\n    }\n    /**\n     * Create a message.\n     */ create(threadId, body, options) {\n        return this._client.post(`/threads/${threadId}/messages`, {\n            body,\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v1\",\n                ...options?.headers\n            }\n        });\n    }\n    /**\n     * Retrieve a message.\n     */ retrieve(threadId, messageId, options) {\n        return this._client.get(`/threads/${threadId}/messages/${messageId}`, {\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v1\",\n                ...options?.headers\n            }\n        });\n    }\n    /**\n     * Modifies a message.\n     */ update(threadId, messageId, body, options) {\n        return this._client.post(`/threads/${threadId}/messages/${messageId}`, {\n            body,\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v1\",\n                ...options?.headers\n            }\n        });\n    }\n    list(threadId, query = {}, options) {\n        if ((0,openai_core__WEBPACK_IMPORTED_MODULE_2__.isRequestOptions)(query)) {\n            return this.list(threadId, {}, query);\n        }\n        return this._client.getAPIList(`/threads/${threadId}/messages`, ThreadMessagesPage, {\n            query,\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v1\",\n                ...options?.headers\n            }\n        });\n    }\n}\nclass ThreadMessagesPage extends openai_pagination__WEBPACK_IMPORTED_MODULE_3__.CursorPage {\n}\n(function(Messages) {\n    Messages.ThreadMessagesPage = openai_resources_beta_threads_messages_messages__WEBPACK_IMPORTED_MODULE_4__.ThreadMessagesPage;\n    Messages.Files = openai_resources_beta_threads_messages_files__WEBPACK_IMPORTED_MODULE_1__.Files;\n    Messages.MessageFilesPage = openai_resources_beta_threads_messages_files__WEBPACK_IMPORTED_MODULE_1__.MessageFilesPage;\n})(Messages || (Messages = {})); //# sourceMappingURL=messages.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2JldGEvdGhyZWFkcy9tZXNzYWdlcy9tZXNzYWdlcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLHFEQUFxRDtBQUNQO0FBQ0M7QUFDZ0M7QUFDTjtBQUMxQjtBQUN4QyxNQUFNSyxpQkFBaUJMLHdEQUFXQTtJQUNyQ00sYUFBYztRQUNWLEtBQUssSUFBSUM7UUFDVCxJQUFJLENBQUNDLEtBQUssR0FBRyxJQUFJTCwrRUFBYyxDQUFDLElBQUksQ0FBQ08sT0FBTztJQUNoRDtJQUNBOztLQUVDLEdBQ0RDLE9BQU9DLFFBQVEsRUFBRUMsSUFBSSxFQUFFQyxPQUFPLEVBQUU7UUFDNUIsT0FBTyxJQUFJLENBQUNKLE9BQU8sQ0FBQ0ssSUFBSSxDQUFDLENBQUMsU0FBUyxFQUFFSCxTQUFTLFNBQVMsQ0FBQyxFQUFFO1lBQ3REQztZQUNBLEdBQUdDLE9BQU87WUFDVkUsU0FBUztnQkFBRSxlQUFlO2dCQUFpQixHQUFHRixTQUFTRSxPQUFPO1lBQUM7UUFDbkU7SUFDSjtJQUNBOztLQUVDLEdBQ0RDLFNBQVNMLFFBQVEsRUFBRU0sU0FBUyxFQUFFSixPQUFPLEVBQUU7UUFDbkMsT0FBTyxJQUFJLENBQUNKLE9BQU8sQ0FBQ1MsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFFUCxTQUFTLFVBQVUsRUFBRU0sVUFBVSxDQUFDLEVBQUU7WUFDbEUsR0FBR0osT0FBTztZQUNWRSxTQUFTO2dCQUFFLGVBQWU7Z0JBQWlCLEdBQUdGLFNBQVNFLE9BQU87WUFBQztRQUNuRTtJQUNKO0lBQ0E7O0tBRUMsR0FDREksT0FBT1IsUUFBUSxFQUFFTSxTQUFTLEVBQUVMLElBQUksRUFBRUMsT0FBTyxFQUFFO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDSixPQUFPLENBQUNLLElBQUksQ0FBQyxDQUFDLFNBQVMsRUFBRUgsU0FBUyxVQUFVLEVBQUVNLFVBQVUsQ0FBQyxFQUFFO1lBQ25FTDtZQUNBLEdBQUdDLE9BQU87WUFDVkUsU0FBUztnQkFBRSxlQUFlO2dCQUFpQixHQUFHRixTQUFTRSxPQUFPO1lBQUM7UUFDbkU7SUFDSjtJQUNBSyxLQUFLVCxRQUFRLEVBQUVVLFFBQVEsQ0FBQyxDQUFDLEVBQUVSLE9BQU8sRUFBRTtRQUNoQyxJQUFJYiw2REFBZ0JBLENBQUNxQixRQUFRO1lBQ3pCLE9BQU8sSUFBSSxDQUFDRCxJQUFJLENBQUNULFVBQVUsQ0FBQyxHQUFHVTtRQUNuQztRQUNBLE9BQU8sSUFBSSxDQUFDWixPQUFPLENBQUNhLFVBQVUsQ0FBQyxDQUFDLFNBQVMsRUFBRVgsU0FBUyxTQUFTLENBQUMsRUFBRVksb0JBQW9CO1lBQ2hGRjtZQUNBLEdBQUdSLE9BQU87WUFDVkUsU0FBUztnQkFBRSxlQUFlO2dCQUFpQixHQUFHRixTQUFTRSxPQUFPO1lBQUM7UUFDbkU7SUFDSjtBQUNKO0FBQ08sTUFBTVEsMkJBQTJCcEIseURBQVVBO0FBQ2xEO0FBQ0MsVUFBVUMsUUFBUTtJQUNmQSxTQUFTbUIsa0JBQWtCLEdBQUd0QiwrRkFBOEI7SUFDNURHLFNBQVNJLEtBQUssR0FBR04sK0VBQWM7SUFDL0JFLFNBQVNvQixnQkFBZ0IsR0FBR3RCLDBGQUF5QjtBQUN6RCxHQUFHRSxZQUFhQSxDQUFBQSxXQUFXLENBQUMsS0FDNUIscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvYmV0YS90aHJlYWRzL21lc3NhZ2VzL21lc3NhZ2VzLm1qcz83MDA0Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gJ29wZW5haS9yZXNvdXJjZSc7XG5pbXBvcnQgeyBpc1JlcXVlc3RPcHRpb25zIH0gZnJvbSAnb3BlbmFpL2NvcmUnO1xuaW1wb3J0ICogYXMgTWVzc2FnZXNBUEkgZnJvbSAnb3BlbmFpL3Jlc291cmNlcy9iZXRhL3RocmVhZHMvbWVzc2FnZXMvbWVzc2FnZXMnO1xuaW1wb3J0ICogYXMgRmlsZXNBUEkgZnJvbSAnb3BlbmFpL3Jlc291cmNlcy9iZXRhL3RocmVhZHMvbWVzc2FnZXMvZmlsZXMnO1xuaW1wb3J0IHsgQ3Vyc29yUGFnZSB9IGZyb20gJ29wZW5haS9wYWdpbmF0aW9uJztcbmV4cG9ydCBjbGFzcyBNZXNzYWdlcyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5maWxlcyA9IG5ldyBGaWxlc0FQSS5GaWxlcyh0aGlzLl9jbGllbnQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBtZXNzYWdlLlxuICAgICAqL1xuICAgIGNyZWF0ZSh0aHJlYWRJZCwgYm9keSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoYC90aHJlYWRzLyR7dGhyZWFkSWR9L21lc3NhZ2VzYCwge1xuICAgICAgICAgICAgYm9keSxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYxJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0cmlldmUgYSBtZXNzYWdlLlxuICAgICAqL1xuICAgIHJldHJpZXZlKHRocmVhZElkLCBtZXNzYWdlSWQsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXQoYC90aHJlYWRzLyR7dGhyZWFkSWR9L21lc3NhZ2VzLyR7bWVzc2FnZUlkfWAsIHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYxJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTW9kaWZpZXMgYSBtZXNzYWdlLlxuICAgICAqL1xuICAgIHVwZGF0ZSh0aHJlYWRJZCwgbWVzc2FnZUlkLCBib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdChgL3RocmVhZHMvJHt0aHJlYWRJZH0vbWVzc2FnZXMvJHttZXNzYWdlSWR9YCwge1xuICAgICAgICAgICAgYm9keSxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYxJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgbGlzdCh0aHJlYWRJZCwgcXVlcnkgPSB7fSwgb3B0aW9ucykge1xuICAgICAgICBpZiAoaXNSZXF1ZXN0T3B0aW9ucyhxdWVyeSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxpc3QodGhyZWFkSWQsIHt9LCBxdWVyeSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXRBUElMaXN0KGAvdGhyZWFkcy8ke3RocmVhZElkfS9tZXNzYWdlc2AsIFRocmVhZE1lc3NhZ2VzUGFnZSwge1xuICAgICAgICAgICAgcXVlcnksXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogeyAnT3BlbkFJLUJldGEnOiAnYXNzaXN0YW50cz12MScsIC4uLm9wdGlvbnM/LmhlYWRlcnMgfSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFRocmVhZE1lc3NhZ2VzUGFnZSBleHRlbmRzIEN1cnNvclBhZ2Uge1xufVxuKGZ1bmN0aW9uIChNZXNzYWdlcykge1xuICAgIE1lc3NhZ2VzLlRocmVhZE1lc3NhZ2VzUGFnZSA9IE1lc3NhZ2VzQVBJLlRocmVhZE1lc3NhZ2VzUGFnZTtcbiAgICBNZXNzYWdlcy5GaWxlcyA9IEZpbGVzQVBJLkZpbGVzO1xuICAgIE1lc3NhZ2VzLk1lc3NhZ2VGaWxlc1BhZ2UgPSBGaWxlc0FQSS5NZXNzYWdlRmlsZXNQYWdlO1xufSkoTWVzc2FnZXMgfHwgKE1lc3NhZ2VzID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lc3NhZ2VzLm1qcy5tYXAiXSwibmFtZXMiOlsiQVBJUmVzb3VyY2UiLCJpc1JlcXVlc3RPcHRpb25zIiwiTWVzc2FnZXNBUEkiLCJGaWxlc0FQSSIsIkN1cnNvclBhZ2UiLCJNZXNzYWdlcyIsImNvbnN0cnVjdG9yIiwiYXJndW1lbnRzIiwiZmlsZXMiLCJGaWxlcyIsIl9jbGllbnQiLCJjcmVhdGUiLCJ0aHJlYWRJZCIsImJvZHkiLCJvcHRpb25zIiwicG9zdCIsImhlYWRlcnMiLCJyZXRyaWV2ZSIsIm1lc3NhZ2VJZCIsImdldCIsInVwZGF0ZSIsImxpc3QiLCJxdWVyeSIsImdldEFQSUxpc3QiLCJUaHJlYWRNZXNzYWdlc1BhZ2UiLCJNZXNzYWdlRmlsZXNQYWdlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/openai/resources/beta/threads/messages/messages.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/openai/resources/beta/threads/runs/runs.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/openai/resources/beta/threads/runs/runs.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Runs: () => (/* binding */ Runs),\n/* harmony export */   RunsPage: () => (/* binding */ RunsPage)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(action-browser)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var openai_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai/core */ \"(action-browser)/./node_modules/openai/core.mjs\");\n/* harmony import */ var openai_resources_beta_threads_runs_runs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! openai/resources/beta/threads/runs/runs */ \"(action-browser)/./node_modules/openai/resources/beta/threads/runs/runs.mjs\");\n/* harmony import */ var openai_resources_beta_threads_runs_steps__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/resources/beta/threads/runs/steps */ \"(action-browser)/./node_modules/openai/resources/beta/threads/runs/steps.mjs\");\n/* harmony import */ var openai_pagination__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! openai/pagination */ \"(action-browser)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n\n\n\n\nclass Runs extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    constructor(){\n        super(...arguments);\n        this.steps = new openai_resources_beta_threads_runs_steps__WEBPACK_IMPORTED_MODULE_1__.Steps(this._client);\n    }\n    /**\n     * Create a run.\n     */ create(threadId, body, options) {\n        return this._client.post(`/threads/${threadId}/runs`, {\n            body,\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v1\",\n                ...options?.headers\n            }\n        });\n    }\n    /**\n     * Retrieves a run.\n     */ retrieve(threadId, runId, options) {\n        return this._client.get(`/threads/${threadId}/runs/${runId}`, {\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v1\",\n                ...options?.headers\n            }\n        });\n    }\n    /**\n     * Modifies a run.\n     */ update(threadId, runId, body, options) {\n        return this._client.post(`/threads/${threadId}/runs/${runId}`, {\n            body,\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v1\",\n                ...options?.headers\n            }\n        });\n    }\n    list(threadId, query = {}, options) {\n        if ((0,openai_core__WEBPACK_IMPORTED_MODULE_2__.isRequestOptions)(query)) {\n            return this.list(threadId, {}, query);\n        }\n        return this._client.getAPIList(`/threads/${threadId}/runs`, RunsPage, {\n            query,\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v1\",\n                ...options?.headers\n            }\n        });\n    }\n    /**\n     * Cancels a run that is `in_progress`.\n     */ cancel(threadId, runId, options) {\n        return this._client.post(`/threads/${threadId}/runs/${runId}/cancel`, {\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v1\",\n                ...options?.headers\n            }\n        });\n    }\n    /**\n     * When a run has the `status: \"requires_action\"` and `required_action.type` is\n     * `submit_tool_outputs`, this endpoint can be used to submit the outputs from the\n     * tool calls once they're all completed. All outputs must be submitted in a single\n     * request.\n     */ submitToolOutputs(threadId, runId, body, options) {\n        return this._client.post(`/threads/${threadId}/runs/${runId}/submit_tool_outputs`, {\n            body,\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v1\",\n                ...options?.headers\n            }\n        });\n    }\n}\nclass RunsPage extends openai_pagination__WEBPACK_IMPORTED_MODULE_3__.CursorPage {\n}\n(function(Runs) {\n    Runs.RunsPage = openai_resources_beta_threads_runs_runs__WEBPACK_IMPORTED_MODULE_4__.RunsPage;\n    Runs.Steps = openai_resources_beta_threads_runs_steps__WEBPACK_IMPORTED_MODULE_1__.Steps;\n    Runs.RunStepsPage = openai_resources_beta_threads_runs_steps__WEBPACK_IMPORTED_MODULE_1__.RunStepsPage;\n})(Runs || (Runs = {})); //# sourceMappingURL=runs.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2JldGEvdGhyZWFkcy9ydW5zL3J1bnMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxxREFBcUQ7QUFDUDtBQUNDO0FBQ29CO0FBQ0U7QUFDdEI7QUFDeEMsTUFBTUssYUFBYUwsd0RBQVdBO0lBQ2pDTSxhQUFjO1FBQ1YsS0FBSyxJQUFJQztRQUNULElBQUksQ0FBQ0MsS0FBSyxHQUFHLElBQUlMLDJFQUFjLENBQUMsSUFBSSxDQUFDTyxPQUFPO0lBQ2hEO0lBQ0E7O0tBRUMsR0FDREMsT0FBT0MsUUFBUSxFQUFFQyxJQUFJLEVBQUVDLE9BQU8sRUFBRTtRQUM1QixPQUFPLElBQUksQ0FBQ0osT0FBTyxDQUFDSyxJQUFJLENBQUMsQ0FBQyxTQUFTLEVBQUVILFNBQVMsS0FBSyxDQUFDLEVBQUU7WUFDbERDO1lBQ0EsR0FBR0MsT0FBTztZQUNWRSxTQUFTO2dCQUFFLGVBQWU7Z0JBQWlCLEdBQUdGLFNBQVNFLE9BQU87WUFBQztRQUNuRTtJQUNKO0lBQ0E7O0tBRUMsR0FDREMsU0FBU0wsUUFBUSxFQUFFTSxLQUFLLEVBQUVKLE9BQU8sRUFBRTtRQUMvQixPQUFPLElBQUksQ0FBQ0osT0FBTyxDQUFDUyxHQUFHLENBQUMsQ0FBQyxTQUFTLEVBQUVQLFNBQVMsTUFBTSxFQUFFTSxNQUFNLENBQUMsRUFBRTtZQUMxRCxHQUFHSixPQUFPO1lBQ1ZFLFNBQVM7Z0JBQUUsZUFBZTtnQkFBaUIsR0FBR0YsU0FBU0UsT0FBTztZQUFDO1FBQ25FO0lBQ0o7SUFDQTs7S0FFQyxHQUNESSxPQUFPUixRQUFRLEVBQUVNLEtBQUssRUFBRUwsSUFBSSxFQUFFQyxPQUFPLEVBQUU7UUFDbkMsT0FBTyxJQUFJLENBQUNKLE9BQU8sQ0FBQ0ssSUFBSSxDQUFDLENBQUMsU0FBUyxFQUFFSCxTQUFTLE1BQU0sRUFBRU0sTUFBTSxDQUFDLEVBQUU7WUFDM0RMO1lBQ0EsR0FBR0MsT0FBTztZQUNWRSxTQUFTO2dCQUFFLGVBQWU7Z0JBQWlCLEdBQUdGLFNBQVNFLE9BQU87WUFBQztRQUNuRTtJQUNKO0lBQ0FLLEtBQUtULFFBQVEsRUFBRVUsUUFBUSxDQUFDLENBQUMsRUFBRVIsT0FBTyxFQUFFO1FBQ2hDLElBQUliLDZEQUFnQkEsQ0FBQ3FCLFFBQVE7WUFDekIsT0FBTyxJQUFJLENBQUNELElBQUksQ0FBQ1QsVUFBVSxDQUFDLEdBQUdVO1FBQ25DO1FBQ0EsT0FBTyxJQUFJLENBQUNaLE9BQU8sQ0FBQ2EsVUFBVSxDQUFDLENBQUMsU0FBUyxFQUFFWCxTQUFTLEtBQUssQ0FBQyxFQUFFWSxVQUFVO1lBQ2xFRjtZQUNBLEdBQUdSLE9BQU87WUFDVkUsU0FBUztnQkFBRSxlQUFlO2dCQUFpQixHQUFHRixTQUFTRSxPQUFPO1lBQUM7UUFDbkU7SUFDSjtJQUNBOztLQUVDLEdBQ0RTLE9BQU9iLFFBQVEsRUFBRU0sS0FBSyxFQUFFSixPQUFPLEVBQUU7UUFDN0IsT0FBTyxJQUFJLENBQUNKLE9BQU8sQ0FBQ0ssSUFBSSxDQUFDLENBQUMsU0FBUyxFQUFFSCxTQUFTLE1BQU0sRUFBRU0sTUFBTSxPQUFPLENBQUMsRUFBRTtZQUNsRSxHQUFHSixPQUFPO1lBQ1ZFLFNBQVM7Z0JBQUUsZUFBZTtnQkFBaUIsR0FBR0YsU0FBU0UsT0FBTztZQUFDO1FBQ25FO0lBQ0o7SUFDQTs7Ozs7S0FLQyxHQUNEVSxrQkFBa0JkLFFBQVEsRUFBRU0sS0FBSyxFQUFFTCxJQUFJLEVBQUVDLE9BQU8sRUFBRTtRQUM5QyxPQUFPLElBQUksQ0FBQ0osT0FBTyxDQUFDSyxJQUFJLENBQUMsQ0FBQyxTQUFTLEVBQUVILFNBQVMsTUFBTSxFQUFFTSxNQUFNLG9CQUFvQixDQUFDLEVBQUU7WUFDL0VMO1lBQ0EsR0FBR0MsT0FBTztZQUNWRSxTQUFTO2dCQUFFLGVBQWU7Z0JBQWlCLEdBQUdGLFNBQVNFLE9BQU87WUFBQztRQUNuRTtJQUNKO0FBQ0o7QUFDTyxNQUFNUSxpQkFBaUJwQix5REFBVUE7QUFDeEM7QUFDQyxVQUFVQyxJQUFJO0lBQ1hBLEtBQUttQixRQUFRLEdBQUd0Qiw2RUFBZ0I7SUFDaENHLEtBQUtJLEtBQUssR0FBR04sMkVBQWM7SUFDM0JFLEtBQUtzQixZQUFZLEdBQUd4QixrRkFBcUI7QUFDN0MsR0FBR0UsUUFBU0EsQ0FBQUEsT0FBTyxDQUFDLEtBQ3BCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2JldGEvdGhyZWFkcy9ydW5zL3J1bnMubWpzPzc5ZWQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSAnb3BlbmFpL3Jlc291cmNlJztcbmltcG9ydCB7IGlzUmVxdWVzdE9wdGlvbnMgfSBmcm9tICdvcGVuYWkvY29yZSc7XG5pbXBvcnQgKiBhcyBSdW5zQVBJIGZyb20gJ29wZW5haS9yZXNvdXJjZXMvYmV0YS90aHJlYWRzL3J1bnMvcnVucyc7XG5pbXBvcnQgKiBhcyBTdGVwc0FQSSBmcm9tICdvcGVuYWkvcmVzb3VyY2VzL2JldGEvdGhyZWFkcy9ydW5zL3N0ZXBzJztcbmltcG9ydCB7IEN1cnNvclBhZ2UgfSBmcm9tICdvcGVuYWkvcGFnaW5hdGlvbic7XG5leHBvcnQgY2xhc3MgUnVucyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5zdGVwcyA9IG5ldyBTdGVwc0FQSS5TdGVwcyh0aGlzLl9jbGllbnQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBydW4uXG4gICAgICovXG4gICAgY3JlYXRlKHRocmVhZElkLCBib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdChgL3RocmVhZHMvJHt0aHJlYWRJZH0vcnVuc2AsIHtcbiAgICAgICAgICAgIGJvZHksXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogeyAnT3BlbkFJLUJldGEnOiAnYXNzaXN0YW50cz12MScsIC4uLm9wdGlvbnM/LmhlYWRlcnMgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyBhIHJ1bi5cbiAgICAgKi9cbiAgICByZXRyaWV2ZSh0aHJlYWRJZCwgcnVuSWQsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXQoYC90aHJlYWRzLyR7dGhyZWFkSWR9L3J1bnMvJHtydW5JZH1gLCB7XG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogeyAnT3BlbkFJLUJldGEnOiAnYXNzaXN0YW50cz12MScsIC4uLm9wdGlvbnM/LmhlYWRlcnMgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1vZGlmaWVzIGEgcnVuLlxuICAgICAqL1xuICAgIHVwZGF0ZSh0aHJlYWRJZCwgcnVuSWQsIGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KGAvdGhyZWFkcy8ke3RocmVhZElkfS9ydW5zLyR7cnVuSWR9YCwge1xuICAgICAgICAgICAgYm9keSxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYxJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgbGlzdCh0aHJlYWRJZCwgcXVlcnkgPSB7fSwgb3B0aW9ucykge1xuICAgICAgICBpZiAoaXNSZXF1ZXN0T3B0aW9ucyhxdWVyeSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxpc3QodGhyZWFkSWQsIHt9LCBxdWVyeSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXRBUElMaXN0KGAvdGhyZWFkcy8ke3RocmVhZElkfS9ydW5zYCwgUnVuc1BhZ2UsIHtcbiAgICAgICAgICAgIHF1ZXJ5LFxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djEnLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYW5jZWxzIGEgcnVuIHRoYXQgaXMgYGluX3Byb2dyZXNzYC5cbiAgICAgKi9cbiAgICBjYW5jZWwodGhyZWFkSWQsIHJ1bklkLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdChgL3RocmVhZHMvJHt0aHJlYWRJZH0vcnVucy8ke3J1bklkfS9jYW5jZWxgLCB7XG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogeyAnT3BlbkFJLUJldGEnOiAnYXNzaXN0YW50cz12MScsIC4uLm9wdGlvbnM/LmhlYWRlcnMgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdoZW4gYSBydW4gaGFzIHRoZSBgc3RhdHVzOiBcInJlcXVpcmVzX2FjdGlvblwiYCBhbmQgYHJlcXVpcmVkX2FjdGlvbi50eXBlYCBpc1xuICAgICAqIGBzdWJtaXRfdG9vbF9vdXRwdXRzYCwgdGhpcyBlbmRwb2ludCBjYW4gYmUgdXNlZCB0byBzdWJtaXQgdGhlIG91dHB1dHMgZnJvbSB0aGVcbiAgICAgKiB0b29sIGNhbGxzIG9uY2UgdGhleSdyZSBhbGwgY29tcGxldGVkLiBBbGwgb3V0cHV0cyBtdXN0IGJlIHN1Ym1pdHRlZCBpbiBhIHNpbmdsZVxuICAgICAqIHJlcXVlc3QuXG4gICAgICovXG4gICAgc3VibWl0VG9vbE91dHB1dHModGhyZWFkSWQsIHJ1bklkLCBib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdChgL3RocmVhZHMvJHt0aHJlYWRJZH0vcnVucy8ke3J1bklkfS9zdWJtaXRfdG9vbF9vdXRwdXRzYCwge1xuICAgICAgICAgICAgYm9keSxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYxJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgUnVuc1BhZ2UgZXh0ZW5kcyBDdXJzb3JQYWdlIHtcbn1cbihmdW5jdGlvbiAoUnVucykge1xuICAgIFJ1bnMuUnVuc1BhZ2UgPSBSdW5zQVBJLlJ1bnNQYWdlO1xuICAgIFJ1bnMuU3RlcHMgPSBTdGVwc0FQSS5TdGVwcztcbiAgICBSdW5zLlJ1blN0ZXBzUGFnZSA9IFN0ZXBzQVBJLlJ1blN0ZXBzUGFnZTtcbn0pKFJ1bnMgfHwgKFJ1bnMgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cnVucy5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiaXNSZXF1ZXN0T3B0aW9ucyIsIlJ1bnNBUEkiLCJTdGVwc0FQSSIsIkN1cnNvclBhZ2UiLCJSdW5zIiwiY29uc3RydWN0b3IiLCJhcmd1bWVudHMiLCJzdGVwcyIsIlN0ZXBzIiwiX2NsaWVudCIsImNyZWF0ZSIsInRocmVhZElkIiwiYm9keSIsIm9wdGlvbnMiLCJwb3N0IiwiaGVhZGVycyIsInJldHJpZXZlIiwicnVuSWQiLCJnZXQiLCJ1cGRhdGUiLCJsaXN0IiwicXVlcnkiLCJnZXRBUElMaXN0IiwiUnVuc1BhZ2UiLCJjYW5jZWwiLCJzdWJtaXRUb29sT3V0cHV0cyIsIlJ1blN0ZXBzUGFnZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/openai/resources/beta/threads/runs/runs.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/openai/resources/beta/threads/runs/steps.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/openai/resources/beta/threads/runs/steps.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RunStepsPage: () => (/* binding */ RunStepsPage),\n/* harmony export */   Steps: () => (/* binding */ Steps)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(action-browser)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var openai_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/core */ \"(action-browser)/./node_modules/openai/core.mjs\");\n/* harmony import */ var openai_resources_beta_threads_runs_steps__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! openai/resources/beta/threads/runs/steps */ \"(action-browser)/./node_modules/openai/resources/beta/threads/runs/steps.mjs\");\n/* harmony import */ var openai_pagination__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai/pagination */ \"(action-browser)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n\n\n\nclass Steps extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Retrieves a run step.\n     */ retrieve(threadId, runId, stepId, options) {\n        return this._client.get(`/threads/${threadId}/runs/${runId}/steps/${stepId}`, {\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v1\",\n                ...options?.headers\n            }\n        });\n    }\n    list(threadId, runId, query = {}, options) {\n        if ((0,openai_core__WEBPACK_IMPORTED_MODULE_1__.isRequestOptions)(query)) {\n            return this.list(threadId, runId, {}, query);\n        }\n        return this._client.getAPIList(`/threads/${threadId}/runs/${runId}/steps`, RunStepsPage, {\n            query,\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v1\",\n                ...options?.headers\n            }\n        });\n    }\n}\nclass RunStepsPage extends openai_pagination__WEBPACK_IMPORTED_MODULE_2__.CursorPage {\n}\n(function(Steps) {\n    Steps.RunStepsPage = openai_resources_beta_threads_runs_steps__WEBPACK_IMPORTED_MODULE_3__.RunStepsPage;\n})(Steps || (Steps = {})); //# sourceMappingURL=steps.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2JldGEvdGhyZWFkcy9ydW5zL3N0ZXBzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxxREFBcUQ7QUFDUDtBQUNDO0FBQ3NCO0FBQ3RCO0FBQ3hDLE1BQU1JLGNBQWNKLHdEQUFXQTtJQUNsQzs7S0FFQyxHQUNESyxTQUFTQyxRQUFRLEVBQUVDLEtBQUssRUFBRUMsTUFBTSxFQUFFQyxPQUFPLEVBQUU7UUFDdkMsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFFTCxTQUFTLE1BQU0sRUFBRUMsTUFBTSxPQUFPLEVBQUVDLE9BQU8sQ0FBQyxFQUFFO1lBQzFFLEdBQUdDLE9BQU87WUFDVkcsU0FBUztnQkFBRSxlQUFlO2dCQUFpQixHQUFHSCxTQUFTRyxPQUFPO1lBQUM7UUFDbkU7SUFDSjtJQUNBQyxLQUFLUCxRQUFRLEVBQUVDLEtBQUssRUFBRU8sUUFBUSxDQUFDLENBQUMsRUFBRUwsT0FBTyxFQUFFO1FBQ3ZDLElBQUlSLDZEQUFnQkEsQ0FBQ2EsUUFBUTtZQUN6QixPQUFPLElBQUksQ0FBQ0QsSUFBSSxDQUFDUCxVQUFVQyxPQUFPLENBQUMsR0FBR087UUFDMUM7UUFDQSxPQUFPLElBQUksQ0FBQ0osT0FBTyxDQUFDSyxVQUFVLENBQUMsQ0FBQyxTQUFTLEVBQUVULFNBQVMsTUFBTSxFQUFFQyxNQUFNLE1BQU0sQ0FBQyxFQUFFUyxjQUFjO1lBQ3JGRjtZQUNBLEdBQUdMLE9BQU87WUFDVkcsU0FBUztnQkFBRSxlQUFlO2dCQUFpQixHQUFHSCxTQUFTRyxPQUFPO1lBQUM7UUFDbkU7SUFDSjtBQUNKO0FBQ08sTUFBTUkscUJBQXFCYix5REFBVUE7QUFDNUM7QUFDQyxVQUFVQyxLQUFLO0lBQ1pBLE1BQU1ZLFlBQVksR0FBR2Qsa0ZBQXFCO0FBQzlDLEdBQUdFLFNBQVVBLENBQUFBLFFBQVEsQ0FBQyxLQUN0QixrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9iZXRhL3RocmVhZHMvcnVucy9zdGVwcy5tanM/NDdlMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tICdvcGVuYWkvcmVzb3VyY2UnO1xuaW1wb3J0IHsgaXNSZXF1ZXN0T3B0aW9ucyB9IGZyb20gJ29wZW5haS9jb3JlJztcbmltcG9ydCAqIGFzIFN0ZXBzQVBJIGZyb20gJ29wZW5haS9yZXNvdXJjZXMvYmV0YS90aHJlYWRzL3J1bnMvc3RlcHMnO1xuaW1wb3J0IHsgQ3Vyc29yUGFnZSB9IGZyb20gJ29wZW5haS9wYWdpbmF0aW9uJztcbmV4cG9ydCBjbGFzcyBTdGVwcyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgYSBydW4gc3RlcC5cbiAgICAgKi9cbiAgICByZXRyaWV2ZSh0aHJlYWRJZCwgcnVuSWQsIHN0ZXBJZCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldChgL3RocmVhZHMvJHt0aHJlYWRJZH0vcnVucy8ke3J1bklkfS9zdGVwcy8ke3N0ZXBJZH1gLCB7XG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogeyAnT3BlbkFJLUJldGEnOiAnYXNzaXN0YW50cz12MScsIC4uLm9wdGlvbnM/LmhlYWRlcnMgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGxpc3QodGhyZWFkSWQsIHJ1bklkLCBxdWVyeSA9IHt9LCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChpc1JlcXVlc3RPcHRpb25zKHF1ZXJ5KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubGlzdCh0aHJlYWRJZCwgcnVuSWQsIHt9LCBxdWVyeSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXRBUElMaXN0KGAvdGhyZWFkcy8ke3RocmVhZElkfS9ydW5zLyR7cnVuSWR9L3N0ZXBzYCwgUnVuU3RlcHNQYWdlLCB7XG4gICAgICAgICAgICBxdWVyeSxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYxJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgUnVuU3RlcHNQYWdlIGV4dGVuZHMgQ3Vyc29yUGFnZSB7XG59XG4oZnVuY3Rpb24gKFN0ZXBzKSB7XG4gICAgU3RlcHMuUnVuU3RlcHNQYWdlID0gU3RlcHNBUEkuUnVuU3RlcHNQYWdlO1xufSkoU3RlcHMgfHwgKFN0ZXBzID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0ZXBzLm1qcy5tYXAiXSwibmFtZXMiOlsiQVBJUmVzb3VyY2UiLCJpc1JlcXVlc3RPcHRpb25zIiwiU3RlcHNBUEkiLCJDdXJzb3JQYWdlIiwiU3RlcHMiLCJyZXRyaWV2ZSIsInRocmVhZElkIiwicnVuSWQiLCJzdGVwSWQiLCJvcHRpb25zIiwiX2NsaWVudCIsImdldCIsImhlYWRlcnMiLCJsaXN0IiwicXVlcnkiLCJnZXRBUElMaXN0IiwiUnVuU3RlcHNQYWdlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/openai/resources/beta/threads/runs/steps.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/openai/resources/beta/threads/threads.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/openai/resources/beta/threads/threads.mjs ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Threads: () => (/* binding */ Threads)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(action-browser)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var openai_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! openai/core */ \"(action-browser)/./node_modules/openai/core.mjs\");\n/* harmony import */ var openai_resources_beta_threads_messages_messages__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai/resources/beta/threads/messages/messages */ \"(action-browser)/./node_modules/openai/resources/beta/threads/messages/messages.mjs\");\n/* harmony import */ var openai_resources_beta_threads_runs_runs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/resources/beta/threads/runs/runs */ \"(action-browser)/./node_modules/openai/resources/beta/threads/runs/runs.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n\n\n\nclass Threads extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    constructor(){\n        super(...arguments);\n        this.runs = new openai_resources_beta_threads_runs_runs__WEBPACK_IMPORTED_MODULE_1__.Runs(this._client);\n        this.messages = new openai_resources_beta_threads_messages_messages__WEBPACK_IMPORTED_MODULE_2__.Messages(this._client);\n    }\n    create(body = {}, options) {\n        if ((0,openai_core__WEBPACK_IMPORTED_MODULE_3__.isRequestOptions)(body)) {\n            return this.create({}, body);\n        }\n        return this._client.post(\"/threads\", {\n            body,\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v1\",\n                ...options?.headers\n            }\n        });\n    }\n    /**\n     * Retrieves a thread.\n     */ retrieve(threadId, options) {\n        return this._client.get(`/threads/${threadId}`, {\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v1\",\n                ...options?.headers\n            }\n        });\n    }\n    /**\n     * Modifies a thread.\n     */ update(threadId, body, options) {\n        return this._client.post(`/threads/${threadId}`, {\n            body,\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v1\",\n                ...options?.headers\n            }\n        });\n    }\n    /**\n     * Delete a thread.\n     */ del(threadId, options) {\n        return this._client.delete(`/threads/${threadId}`, {\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v1\",\n                ...options?.headers\n            }\n        });\n    }\n    /**\n     * Create a thread and run it in one request.\n     */ createAndRun(body, options) {\n        return this._client.post(\"/threads/runs\", {\n            body,\n            ...options,\n            headers: {\n                \"OpenAI-Beta\": \"assistants=v1\",\n                ...options?.headers\n            }\n        });\n    }\n}\n(function(Threads) {\n    Threads.Runs = openai_resources_beta_threads_runs_runs__WEBPACK_IMPORTED_MODULE_1__.Runs;\n    Threads.RunsPage = openai_resources_beta_threads_runs_runs__WEBPACK_IMPORTED_MODULE_1__.RunsPage;\n    Threads.Messages = openai_resources_beta_threads_messages_messages__WEBPACK_IMPORTED_MODULE_2__.Messages;\n    Threads.ThreadMessagesPage = openai_resources_beta_threads_messages_messages__WEBPACK_IMPORTED_MODULE_2__.ThreadMessagesPage;\n})(Threads || (Threads = {})); //# sourceMappingURL=threads.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2JldGEvdGhyZWFkcy90aHJlYWRzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLHFEQUFxRDtBQUNQO0FBQ0M7QUFDZ0M7QUFDWjtBQUM1RCxNQUFNSSxnQkFBZ0JKLHdEQUFXQTtJQUNwQ0ssYUFBYztRQUNWLEtBQUssSUFBSUM7UUFDVCxJQUFJLENBQUNDLElBQUksR0FBRyxJQUFJSix5RUFBWSxDQUFDLElBQUksQ0FBQ00sT0FBTztRQUN6QyxJQUFJLENBQUNDLFFBQVEsR0FBRyxJQUFJUixxRkFBb0IsQ0FBQyxJQUFJLENBQUNPLE9BQU87SUFDekQ7SUFDQUcsT0FBT0MsT0FBTyxDQUFDLENBQUMsRUFBRUMsT0FBTyxFQUFFO1FBQ3ZCLElBQUliLDZEQUFnQkEsQ0FBQ1ksT0FBTztZQUN4QixPQUFPLElBQUksQ0FBQ0QsTUFBTSxDQUFDLENBQUMsR0FBR0M7UUFDM0I7UUFDQSxPQUFPLElBQUksQ0FBQ0osT0FBTyxDQUFDTSxJQUFJLENBQUMsWUFBWTtZQUNqQ0Y7WUFDQSxHQUFHQyxPQUFPO1lBQ1ZFLFNBQVM7Z0JBQUUsZUFBZTtnQkFBaUIsR0FBR0YsU0FBU0UsT0FBTztZQUFDO1FBQ25FO0lBQ0o7SUFDQTs7S0FFQyxHQUNEQyxTQUFTQyxRQUFRLEVBQUVKLE9BQU8sRUFBRTtRQUN4QixPQUFPLElBQUksQ0FBQ0wsT0FBTyxDQUFDVSxHQUFHLENBQUMsQ0FBQyxTQUFTLEVBQUVELFNBQVMsQ0FBQyxFQUFFO1lBQzVDLEdBQUdKLE9BQU87WUFDVkUsU0FBUztnQkFBRSxlQUFlO2dCQUFpQixHQUFHRixTQUFTRSxPQUFPO1lBQUM7UUFDbkU7SUFDSjtJQUNBOztLQUVDLEdBQ0RJLE9BQU9GLFFBQVEsRUFBRUwsSUFBSSxFQUFFQyxPQUFPLEVBQUU7UUFDNUIsT0FBTyxJQUFJLENBQUNMLE9BQU8sQ0FBQ00sSUFBSSxDQUFDLENBQUMsU0FBUyxFQUFFRyxTQUFTLENBQUMsRUFBRTtZQUM3Q0w7WUFDQSxHQUFHQyxPQUFPO1lBQ1ZFLFNBQVM7Z0JBQUUsZUFBZTtnQkFBaUIsR0FBR0YsU0FBU0UsT0FBTztZQUFDO1FBQ25FO0lBQ0o7SUFDQTs7S0FFQyxHQUNESyxJQUFJSCxRQUFRLEVBQUVKLE9BQU8sRUFBRTtRQUNuQixPQUFPLElBQUksQ0FBQ0wsT0FBTyxDQUFDYSxNQUFNLENBQUMsQ0FBQyxTQUFTLEVBQUVKLFNBQVMsQ0FBQyxFQUFFO1lBQy9DLEdBQUdKLE9BQU87WUFDVkUsU0FBUztnQkFBRSxlQUFlO2dCQUFpQixHQUFHRixTQUFTRSxPQUFPO1lBQUM7UUFDbkU7SUFDSjtJQUNBOztLQUVDLEdBQ0RPLGFBQWFWLElBQUksRUFBRUMsT0FBTyxFQUFFO1FBQ3hCLE9BQU8sSUFBSSxDQUFDTCxPQUFPLENBQUNNLElBQUksQ0FBQyxpQkFBaUI7WUFDdENGO1lBQ0EsR0FBR0MsT0FBTztZQUNWRSxTQUFTO2dCQUFFLGVBQWU7Z0JBQWlCLEdBQUdGLFNBQVNFLE9BQU87WUFBQztRQUNuRTtJQUNKO0FBQ0o7QUFDQyxVQUFVWixPQUFPO0lBQ2RBLFFBQVFJLElBQUksR0FBR0wseUVBQVk7SUFDM0JDLFFBQVFvQixRQUFRLEdBQUdyQiw2RUFBZ0I7SUFDbkNDLFFBQVFPLFFBQVEsR0FBR1QscUZBQW9CO0lBQ3ZDRSxRQUFRcUIsa0JBQWtCLEdBQUd2QiwrRkFBOEI7QUFDL0QsR0FBR0UsV0FBWUEsQ0FBQUEsVUFBVSxDQUFDLEtBQzFCLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2JldGEvdGhyZWFkcy90aHJlYWRzLm1qcz82NzcxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gJ29wZW5haS9yZXNvdXJjZSc7XG5pbXBvcnQgeyBpc1JlcXVlc3RPcHRpb25zIH0gZnJvbSAnb3BlbmFpL2NvcmUnO1xuaW1wb3J0ICogYXMgTWVzc2FnZXNBUEkgZnJvbSAnb3BlbmFpL3Jlc291cmNlcy9iZXRhL3RocmVhZHMvbWVzc2FnZXMvbWVzc2FnZXMnO1xuaW1wb3J0ICogYXMgUnVuc0FQSSBmcm9tICdvcGVuYWkvcmVzb3VyY2VzL2JldGEvdGhyZWFkcy9ydW5zL3J1bnMnO1xuZXhwb3J0IGNsYXNzIFRocmVhZHMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMucnVucyA9IG5ldyBSdW5zQVBJLlJ1bnModGhpcy5fY2xpZW50KTtcbiAgICAgICAgdGhpcy5tZXNzYWdlcyA9IG5ldyBNZXNzYWdlc0FQSS5NZXNzYWdlcyh0aGlzLl9jbGllbnQpO1xuICAgIH1cbiAgICBjcmVhdGUoYm9keSA9IHt9LCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChpc1JlcXVlc3RPcHRpb25zKGJvZHkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGUoe30sIGJvZHkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdCgnL3RocmVhZHMnLCB7XG4gICAgICAgICAgICBib2R5LFxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djEnLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgYSB0aHJlYWQuXG4gICAgICovXG4gICAgcmV0cmlldmUodGhyZWFkSWQsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXQoYC90aHJlYWRzLyR7dGhyZWFkSWR9YCwge1xuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djEnLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNb2RpZmllcyBhIHRocmVhZC5cbiAgICAgKi9cbiAgICB1cGRhdGUodGhyZWFkSWQsIGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KGAvdGhyZWFkcy8ke3RocmVhZElkfWAsIHtcbiAgICAgICAgICAgIGJvZHksXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgaGVhZGVyczogeyAnT3BlbkFJLUJldGEnOiAnYXNzaXN0YW50cz12MScsIC4uLm9wdGlvbnM/LmhlYWRlcnMgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlbGV0ZSBhIHRocmVhZC5cbiAgICAgKi9cbiAgICBkZWwodGhyZWFkSWQsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5kZWxldGUoYC90aHJlYWRzLyR7dGhyZWFkSWR9YCwge1xuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djEnLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSB0aHJlYWQgYW5kIHJ1biBpdCBpbiBvbmUgcmVxdWVzdC5cbiAgICAgKi9cbiAgICBjcmVhdGVBbmRSdW4oYm9keSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoJy90aHJlYWRzL3J1bnMnLCB7XG4gICAgICAgICAgICBib2R5LFxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djEnLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbihmdW5jdGlvbiAoVGhyZWFkcykge1xuICAgIFRocmVhZHMuUnVucyA9IFJ1bnNBUEkuUnVucztcbiAgICBUaHJlYWRzLlJ1bnNQYWdlID0gUnVuc0FQSS5SdW5zUGFnZTtcbiAgICBUaHJlYWRzLk1lc3NhZ2VzID0gTWVzc2FnZXNBUEkuTWVzc2FnZXM7XG4gICAgVGhyZWFkcy5UaHJlYWRNZXNzYWdlc1BhZ2UgPSBNZXNzYWdlc0FQSS5UaHJlYWRNZXNzYWdlc1BhZ2U7XG59KShUaHJlYWRzIHx8IChUaHJlYWRzID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRocmVhZHMubWpzLm1hcCJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsImlzUmVxdWVzdE9wdGlvbnMiLCJNZXNzYWdlc0FQSSIsIlJ1bnNBUEkiLCJUaHJlYWRzIiwiY29uc3RydWN0b3IiLCJhcmd1bWVudHMiLCJydW5zIiwiUnVucyIsIl9jbGllbnQiLCJtZXNzYWdlcyIsIk1lc3NhZ2VzIiwiY3JlYXRlIiwiYm9keSIsIm9wdGlvbnMiLCJwb3N0IiwiaGVhZGVycyIsInJldHJpZXZlIiwidGhyZWFkSWQiLCJnZXQiLCJ1cGRhdGUiLCJkZWwiLCJkZWxldGUiLCJjcmVhdGVBbmRSdW4iLCJSdW5zUGFnZSIsIlRocmVhZE1lc3NhZ2VzUGFnZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/openai/resources/beta/threads/threads.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/openai/resources/chat/chat.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/openai/resources/chat/chat.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Chat: () => (/* binding */ Chat)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(action-browser)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var openai_resources_chat_completions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/resources/chat/completions */ \"(action-browser)/./node_modules/openai/resources/chat/completions.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n\nclass Chat extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    constructor(){\n        super(...arguments);\n        this.completions = new openai_resources_chat_completions__WEBPACK_IMPORTED_MODULE_1__.Completions(this._client);\n    }\n}\n(function(Chat) {\n    Chat.Completions = openai_resources_chat_completions__WEBPACK_IMPORTED_MODULE_1__.Completions;\n})(Chat || (Chat = {})); //# sourceMappingURL=chat.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2NoYXQvY2hhdC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEscURBQXFEO0FBQ1A7QUFDc0I7QUFDN0QsTUFBTUUsYUFBYUYsd0RBQVdBO0lBQ2pDRyxhQUFjO1FBQ1YsS0FBSyxJQUFJQztRQUNULElBQUksQ0FBQ0MsV0FBVyxHQUFHLElBQUlKLDBFQUEwQixDQUFDLElBQUksQ0FBQ00sT0FBTztJQUNsRTtBQUNKO0FBQ0MsVUFBVUwsSUFBSTtJQUNYQSxLQUFLSSxXQUFXLEdBQUdMLDBFQUEwQjtBQUNqRCxHQUFHQyxRQUFTQSxDQUFBQSxPQUFPLENBQUMsS0FDcEIsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvY2hhdC9jaGF0Lm1qcz85MGMxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gJ29wZW5haS9yZXNvdXJjZSc7XG5pbXBvcnQgKiBhcyBDb21wbGV0aW9uc0FQSSBmcm9tICdvcGVuYWkvcmVzb3VyY2VzL2NoYXQvY29tcGxldGlvbnMnO1xuZXhwb3J0IGNsYXNzIENoYXQgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuY29tcGxldGlvbnMgPSBuZXcgQ29tcGxldGlvbnNBUEkuQ29tcGxldGlvbnModGhpcy5fY2xpZW50KTtcbiAgICB9XG59XG4oZnVuY3Rpb24gKENoYXQpIHtcbiAgICBDaGF0LkNvbXBsZXRpb25zID0gQ29tcGxldGlvbnNBUEkuQ29tcGxldGlvbnM7XG59KShDaGF0IHx8IChDaGF0ID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNoYXQubWpzLm1hcCJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsIkNvbXBsZXRpb25zQVBJIiwiQ2hhdCIsImNvbnN0cnVjdG9yIiwiYXJndW1lbnRzIiwiY29tcGxldGlvbnMiLCJDb21wbGV0aW9ucyIsIl9jbGllbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/openai/resources/chat/chat.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/openai/resources/chat/completions.mjs":
/*!************************************************************!*\
  !*** ./node_modules/openai/resources/chat/completions.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Completions: () => (/* binding */ Completions)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(action-browser)/./node_modules/openai/resource.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\nclass Completions extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    create(body, options) {\n        return this._client.post(\"/chat/completions\", {\n            body,\n            ...options,\n            stream: body.stream ?? false\n        });\n    }\n}\n(function(Completions) {})(Completions || (Completions = {})); //# sourceMappingURL=completions.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2NoYXQvY29tcGxldGlvbnMubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEscURBQXFEO0FBQ1A7QUFDdkMsTUFBTUMsb0JBQW9CRCx3REFBV0E7SUFDeENFLE9BQU9DLElBQUksRUFBRUMsT0FBTyxFQUFFO1FBQ2xCLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNDLElBQUksQ0FBQyxxQkFBcUI7WUFBRUg7WUFBTSxHQUFHQyxPQUFPO1lBQUVHLFFBQVFKLEtBQUtJLE1BQU0sSUFBSTtRQUFNO0lBQ25HO0FBQ0o7QUFDQyxVQUFVTixXQUFXLEdBQ3RCLEdBQUdBLGVBQWdCQSxDQUFBQSxjQUFjLENBQUMsS0FDbEMsd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29wZW5haS9yZXNvdXJjZXMvY2hhdC9jb21wbGV0aW9ucy5tanM/ZGYzYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tICdvcGVuYWkvcmVzb3VyY2UnO1xuZXhwb3J0IGNsYXNzIENvbXBsZXRpb25zIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIGNyZWF0ZShib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdCgnL2NoYXQvY29tcGxldGlvbnMnLCB7IGJvZHksIC4uLm9wdGlvbnMsIHN0cmVhbTogYm9keS5zdHJlYW0gPz8gZmFsc2UgfSk7XG4gICAgfVxufVxuKGZ1bmN0aW9uIChDb21wbGV0aW9ucykge1xufSkoQ29tcGxldGlvbnMgfHwgKENvbXBsZXRpb25zID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbXBsZXRpb25zLm1qcy5tYXAiXSwibmFtZXMiOlsiQVBJUmVzb3VyY2UiLCJDb21wbGV0aW9ucyIsImNyZWF0ZSIsImJvZHkiLCJvcHRpb25zIiwiX2NsaWVudCIsInBvc3QiLCJzdHJlYW0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/openai/resources/chat/completions.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/openai/resources/chat/index.mjs":
/*!******************************************************!*\
  !*** ./node_modules/openai/resources/chat/index.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Chat: () => (/* reexport safe */ _chat_mjs__WEBPACK_IMPORTED_MODULE_0__.Chat),\n/* harmony export */   Completions: () => (/* reexport safe */ _completions_mjs__WEBPACK_IMPORTED_MODULE_1__.Completions)\n/* harmony export */ });\n/* harmony import */ var _chat_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chat.mjs */ \"(action-browser)/./node_modules/openai/resources/chat/chat.mjs\");\n/* harmony import */ var _completions_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./completions.mjs */ \"(action-browser)/./node_modules/openai/resources/chat/completions.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2NoYXQvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxxREFBcUQ7QUFDbkI7QUFDZSxDQUNqRCxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9jaGF0L2luZGV4Lm1qcz82MjNlIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuXG5leHBvcnQgeyBDaGF0IH0gZnJvbSBcIi4vY2hhdC5tanNcIjtcbmV4cG9ydCB7IENvbXBsZXRpb25zLCB9IGZyb20gXCIuL2NvbXBsZXRpb25zLm1qc1wiO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubWpzLm1hcCJdLCJuYW1lcyI6WyJDaGF0IiwiQ29tcGxldGlvbnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/openai/resources/chat/index.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/openai/resources/completions.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/openai/resources/completions.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Completions: () => (/* binding */ Completions)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(action-browser)/./node_modules/openai/resource.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\nclass Completions extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    create(body, options) {\n        return this._client.post(\"/completions\", {\n            body,\n            ...options,\n            stream: body.stream ?? false\n        });\n    }\n}\n(function(Completions) {})(Completions || (Completions = {})); //# sourceMappingURL=completions.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2NvbXBsZXRpb25zLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLHFEQUFxRDtBQUNQO0FBQ3ZDLE1BQU1DLG9CQUFvQkQsd0RBQVdBO0lBQ3hDRSxPQUFPQyxJQUFJLEVBQUVDLE9BQU8sRUFBRTtRQUNsQixPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxJQUFJLENBQUMsZ0JBQWdCO1lBQUVIO1lBQU0sR0FBR0MsT0FBTztZQUFFRyxRQUFRSixLQUFLSSxNQUFNLElBQUk7UUFBTTtJQUM5RjtBQUNKO0FBQ0MsVUFBVU4sV0FBVyxHQUN0QixHQUFHQSxlQUFnQkEsQ0FBQUEsY0FBYyxDQUFDLEtBQ2xDLHdDQUF3QyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2NvbXBsZXRpb25zLm1qcz9hNDgxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gJ29wZW5haS9yZXNvdXJjZSc7XG5leHBvcnQgY2xhc3MgQ29tcGxldGlvbnMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgY3JlYXRlKGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KCcvY29tcGxldGlvbnMnLCB7IGJvZHksIC4uLm9wdGlvbnMsIHN0cmVhbTogYm9keS5zdHJlYW0gPz8gZmFsc2UgfSk7XG4gICAgfVxufVxuKGZ1bmN0aW9uIChDb21wbGV0aW9ucykge1xufSkoQ29tcGxldGlvbnMgfHwgKENvbXBsZXRpb25zID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbXBsZXRpb25zLm1qcy5tYXAiXSwibmFtZXMiOlsiQVBJUmVzb3VyY2UiLCJDb21wbGV0aW9ucyIsImNyZWF0ZSIsImJvZHkiLCJvcHRpb25zIiwiX2NsaWVudCIsInBvc3QiLCJzdHJlYW0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/openai/resources/completions.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/openai/resources/edits.mjs":
/*!*************************************************!*\
  !*** ./node_modules/openai/resources/edits.mjs ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Edits: () => (/* binding */ Edits)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(action-browser)/./node_modules/openai/resource.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\nclass Edits extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Creates a new edit for the provided input, instruction, and parameters.\n     *\n     * @deprecated The Edits API is deprecated; please use Chat Completions instead.\n     *\n     * https://openai.com/blog/gpt-4-api-general-availability#deprecation-of-the-edits-api\n     */ create(body, options) {\n        return this._client.post(\"/edits\", {\n            body,\n            ...options\n        });\n    }\n}\n(function(Edits) {})(Edits || (Edits = {})); //# sourceMappingURL=edits.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2VkaXRzLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLHFEQUFxRDtBQUNQO0FBQ3ZDLE1BQU1DLGNBQWNELHdEQUFXQTtJQUNsQzs7Ozs7O0tBTUMsR0FDREUsT0FBT0MsSUFBSSxFQUFFQyxPQUFPLEVBQUU7UUFDbEIsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDLFVBQVU7WUFBRUg7WUFBTSxHQUFHQyxPQUFPO1FBQUM7SUFDMUQ7QUFDSjtBQUNDLFVBQVVILEtBQUssR0FDaEIsR0FBR0EsU0FBVUEsQ0FBQUEsUUFBUSxDQUFDLEtBQ3RCLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2VkaXRzLm1qcz81NmY4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gJ29wZW5haS9yZXNvdXJjZSc7XG5leHBvcnQgY2xhc3MgRWRpdHMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBlZGl0IGZvciB0aGUgcHJvdmlkZWQgaW5wdXQsIGluc3RydWN0aW9uLCBhbmQgcGFyYW1ldGVycy5cbiAgICAgKlxuICAgICAqIEBkZXByZWNhdGVkIFRoZSBFZGl0cyBBUEkgaXMgZGVwcmVjYXRlZDsgcGxlYXNlIHVzZSBDaGF0IENvbXBsZXRpb25zIGluc3RlYWQuXG4gICAgICpcbiAgICAgKiBodHRwczovL29wZW5haS5jb20vYmxvZy9ncHQtNC1hcGktZ2VuZXJhbC1hdmFpbGFiaWxpdHkjZGVwcmVjYXRpb24tb2YtdGhlLWVkaXRzLWFwaVxuICAgICAqL1xuICAgIGNyZWF0ZShib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdCgnL2VkaXRzJywgeyBib2R5LCAuLi5vcHRpb25zIH0pO1xuICAgIH1cbn1cbihmdW5jdGlvbiAoRWRpdHMpIHtcbn0pKEVkaXRzIHx8IChFZGl0cyA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lZGl0cy5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiRWRpdHMiLCJjcmVhdGUiLCJib2R5Iiwib3B0aW9ucyIsIl9jbGllbnQiLCJwb3N0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/openai/resources/edits.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/openai/resources/embeddings.mjs":
/*!******************************************************!*\
  !*** ./node_modules/openai/resources/embeddings.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Embeddings: () => (/* binding */ Embeddings)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(action-browser)/./node_modules/openai/resource.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\nclass Embeddings extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Creates an embedding vector representing the input text.\n     */ create(body, options) {\n        return this._client.post(\"/embeddings\", {\n            body,\n            ...options\n        });\n    }\n}\n(function(Embeddings) {})(Embeddings || (Embeddings = {})); //# sourceMappingURL=embeddings.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2VtYmVkZGluZ3MubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEscURBQXFEO0FBQ1A7QUFDdkMsTUFBTUMsbUJBQW1CRCx3REFBV0E7SUFDdkM7O0tBRUMsR0FDREUsT0FBT0MsSUFBSSxFQUFFQyxPQUFPLEVBQUU7UUFDbEIsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDLGVBQWU7WUFBRUg7WUFBTSxHQUFHQyxPQUFPO1FBQUM7SUFDL0Q7QUFDSjtBQUNDLFVBQVVILFVBQVUsR0FDckIsR0FBR0EsY0FBZUEsQ0FBQUEsYUFBYSxDQUFDLEtBQ2hDLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2VtYmVkZGluZ3MubWpzPzg3OTEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSAnb3BlbmFpL3Jlc291cmNlJztcbmV4cG9ydCBjbGFzcyBFbWJlZGRpbmdzIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gZW1iZWRkaW5nIHZlY3RvciByZXByZXNlbnRpbmcgdGhlIGlucHV0IHRleHQuXG4gICAgICovXG4gICAgY3JlYXRlKGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KCcvZW1iZWRkaW5ncycsIHsgYm9keSwgLi4ub3B0aW9ucyB9KTtcbiAgICB9XG59XG4oZnVuY3Rpb24gKEVtYmVkZGluZ3MpIHtcbn0pKEVtYmVkZGluZ3MgfHwgKEVtYmVkZGluZ3MgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW1iZWRkaW5ncy5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiRW1iZWRkaW5ncyIsImNyZWF0ZSIsImJvZHkiLCJvcHRpb25zIiwiX2NsaWVudCIsInBvc3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/openai/resources/embeddings.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/openai/resources/files.mjs":
/*!*************************************************!*\
  !*** ./node_modules/openai/resources/files.mjs ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FileObjectsPage: () => (/* binding */ FileObjectsPage),\n/* harmony export */   Files: () => (/* binding */ Files)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(action-browser)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var openai_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/core */ \"(action-browser)/./node_modules/openai/core.mjs\");\n/* harmony import */ var openai_error__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai/error */ \"(action-browser)/./node_modules/openai/error.mjs\");\n/* harmony import */ var openai_resources_files__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! openai/resources/files */ \"(action-browser)/./node_modules/openai/resources/files.mjs\");\n/* harmony import */ var openai_pagination__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! openai/pagination */ \"(action-browser)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n\n\n\n\n\n\nclass Files extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Upload a file that can be used across various endpoints/features. The size of\n     * all the files uploaded by one organization can be up to 100 GB.\n     *\n     * The size of individual files for can be a maximum of 512MB. See the\n     * [Assistants Tools guide](https://platform.openai.com/docs/assistants/tools) to\n     * learn more about the types of files supported. The Fine-tuning API only supports\n     * `.jsonl` files.\n     *\n     * Please [contact us](https://help.openai.com/) if you need to increase these\n     * storage limits.\n     */ create(body, options) {\n        return this._client.post(\"/files\", (0,openai_core__WEBPACK_IMPORTED_MODULE_1__.multipartFormRequestOptions)({\n            body,\n            ...options\n        }));\n    }\n    /**\n     * Returns information about a specific file.\n     */ retrieve(fileId, options) {\n        return this._client.get(`/files/${fileId}`, options);\n    }\n    list(query = {}, options) {\n        if ((0,openai_core__WEBPACK_IMPORTED_MODULE_1__.isRequestOptions)(query)) {\n            return this.list({}, query);\n        }\n        return this._client.getAPIList(\"/files\", FileObjectsPage, {\n            query,\n            ...options\n        });\n    }\n    /**\n     * Delete a file.\n     */ del(fileId, options) {\n        return this._client.delete(`/files/${fileId}`, options);\n    }\n    /**\n     * Returns the contents of the specified file.\n     */ content(fileId, options) {\n        return this._client.get(`/files/${fileId}/content`, {\n            ...options,\n            __binaryResponse: true\n        });\n    }\n    /**\n     * Returns the contents of the specified file.\n     *\n     * @deprecated The `.content()` method should be used instead\n     */ retrieveContent(fileId, options) {\n        return this._client.get(`/files/${fileId}/content`, {\n            ...options,\n            headers: {\n                Accept: \"application/json\",\n                ...options?.headers\n            }\n        });\n    }\n    /**\n     * Waits for the given file to be processed, default timeout is 30 mins.\n     */ async waitForProcessing(id, { pollInterval = 5000, maxWait = 30 * 60 * 1000 } = {}) {\n        const TERMINAL_STATES = new Set([\n            \"processed\",\n            \"error\",\n            \"deleted\"\n        ]);\n        const start = Date.now();\n        let file = await this.retrieve(id);\n        while(!file.status || !TERMINAL_STATES.has(file.status)){\n            await (0,openai_core__WEBPACK_IMPORTED_MODULE_1__.sleep)(pollInterval);\n            file = await this.retrieve(id);\n            if (Date.now() - start > maxWait) {\n                throw new openai_error__WEBPACK_IMPORTED_MODULE_2__.APIConnectionTimeoutError({\n                    message: `Giving up on waiting for file ${id} to finish processing after ${maxWait} milliseconds.`\n                });\n            }\n        }\n        return file;\n    }\n}\n/**\n * Note: no pagination actually occurs yet, this is for forwards-compatibility.\n */ class FileObjectsPage extends openai_pagination__WEBPACK_IMPORTED_MODULE_3__.Page {\n}\n(function(Files) {\n    Files.FileObjectsPage = openai_resources_files__WEBPACK_IMPORTED_MODULE_4__.FileObjectsPage;\n})(Files || (Files = {})); //# sourceMappingURL=files.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2ZpbGVzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEscURBQXFEO0FBQ1A7QUFDQztBQUNYO0FBQ3FCO0FBQ047QUFDTztBQUNqQjtBQUNsQyxNQUFNTyxjQUFjUCx3REFBV0E7SUFDbEM7Ozs7Ozs7Ozs7O0tBV0MsR0FDRFEsT0FBT0MsSUFBSSxFQUFFQyxPQUFPLEVBQUU7UUFDbEIsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDLFVBQVVQLHdFQUEyQkEsQ0FBQztZQUFFSTtZQUFNLEdBQUdDLE9BQU87UUFBQztJQUN0RjtJQUNBOztLQUVDLEdBQ0RHLFNBQVNDLE1BQU0sRUFBRUosT0FBTyxFQUFFO1FBQ3RCLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNJLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRUQsT0FBTyxDQUFDLEVBQUVKO0lBQ2hEO0lBQ0FNLEtBQUtDLFFBQVEsQ0FBQyxDQUFDLEVBQUVQLE9BQU8sRUFBRTtRQUN0QixJQUFJVCw2REFBZ0JBLENBQUNnQixRQUFRO1lBQ3pCLE9BQU8sSUFBSSxDQUFDRCxJQUFJLENBQUMsQ0FBQyxHQUFHQztRQUN6QjtRQUNBLE9BQU8sSUFBSSxDQUFDTixPQUFPLENBQUNPLFVBQVUsQ0FBQyxVQUFVQyxpQkFBaUI7WUFBRUY7WUFBTyxHQUFHUCxPQUFPO1FBQUM7SUFDbEY7SUFDQTs7S0FFQyxHQUNEVSxJQUFJTixNQUFNLEVBQUVKLE9BQU8sRUFBRTtRQUNqQixPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDVSxNQUFNLENBQUMsQ0FBQyxPQUFPLEVBQUVQLE9BQU8sQ0FBQyxFQUFFSjtJQUNuRDtJQUNBOztLQUVDLEdBQ0RZLFFBQVFSLE1BQU0sRUFBRUosT0FBTyxFQUFFO1FBQ3JCLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNJLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRUQsT0FBTyxRQUFRLENBQUMsRUFBRTtZQUFFLEdBQUdKLE9BQU87WUFBRWEsa0JBQWtCO1FBQUs7SUFDN0Y7SUFDQTs7OztLQUlDLEdBQ0RDLGdCQUFnQlYsTUFBTSxFQUFFSixPQUFPLEVBQUU7UUFDN0IsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0ksR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFRCxPQUFPLFFBQVEsQ0FBQyxFQUFFO1lBQ2hELEdBQUdKLE9BQU87WUFDVmUsU0FBUztnQkFBRUMsUUFBUTtnQkFBb0IsR0FBR2hCLFNBQVNlLE9BQU87WUFBQztRQUMvRDtJQUNKO0lBQ0E7O0tBRUMsR0FDRCxNQUFNRSxrQkFBa0JDLEVBQUUsRUFBRSxFQUFFQyxlQUFlLElBQUksRUFBRUMsVUFBVSxLQUFLLEtBQUssSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUU7UUFDaEYsTUFBTUMsa0JBQWtCLElBQUlDLElBQUk7WUFBQztZQUFhO1lBQVM7U0FBVTtRQUNqRSxNQUFNQyxRQUFRQyxLQUFLQyxHQUFHO1FBQ3RCLElBQUlDLE9BQU8sTUFBTSxJQUFJLENBQUN2QixRQUFRLENBQUNlO1FBQy9CLE1BQU8sQ0FBQ1EsS0FBS0MsTUFBTSxJQUFJLENBQUNOLGdCQUFnQk8sR0FBRyxDQUFDRixLQUFLQyxNQUFNLEVBQUc7WUFDdEQsTUFBTW5DLGtEQUFLQSxDQUFDMkI7WUFDWk8sT0FBTyxNQUFNLElBQUksQ0FBQ3ZCLFFBQVEsQ0FBQ2U7WUFDM0IsSUFBSU0sS0FBS0MsR0FBRyxLQUFLRixRQUFRSCxTQUFTO2dCQUM5QixNQUFNLElBQUkzQixtRUFBeUJBLENBQUM7b0JBQ2hDb0MsU0FBUyxDQUFDLDhCQUE4QixFQUFFWCxHQUFHLDRCQUE0QixFQUFFRSxRQUFRLGNBQWMsQ0FBQztnQkFDdEc7WUFDSjtRQUNKO1FBQ0EsT0FBT007SUFDWDtBQUNKO0FBQ0E7O0NBRUMsR0FDTSxNQUFNakIsd0JBQXdCYixtREFBSUE7QUFDekM7QUFDQyxVQUFVQyxLQUFLO0lBQ1pBLE1BQU1ZLGVBQWUsR0FBR2YsbUVBQXdCO0FBQ3BELEdBQUdHLFNBQVVBLENBQUFBLFFBQVEsQ0FBQyxLQUN0QixrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9maWxlcy5tanM/MmU0MiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tICdvcGVuYWkvcmVzb3VyY2UnO1xuaW1wb3J0IHsgaXNSZXF1ZXN0T3B0aW9ucyB9IGZyb20gJ29wZW5haS9jb3JlJztcbmltcG9ydCB7IHNsZWVwIH0gZnJvbSAnb3BlbmFpL2NvcmUnO1xuaW1wb3J0IHsgQVBJQ29ubmVjdGlvblRpbWVvdXRFcnJvciB9IGZyb20gJ29wZW5haS9lcnJvcic7XG5pbXBvcnQgKiBhcyBGaWxlc0FQSSBmcm9tICdvcGVuYWkvcmVzb3VyY2VzL2ZpbGVzJztcbmltcG9ydCB7IG11bHRpcGFydEZvcm1SZXF1ZXN0T3B0aW9ucyB9IGZyb20gJ29wZW5haS9jb3JlJztcbmltcG9ydCB7IFBhZ2UgfSBmcm9tICdvcGVuYWkvcGFnaW5hdGlvbic7XG5leHBvcnQgY2xhc3MgRmlsZXMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgLyoqXG4gICAgICogVXBsb2FkIGEgZmlsZSB0aGF0IGNhbiBiZSB1c2VkIGFjcm9zcyB2YXJpb3VzIGVuZHBvaW50cy9mZWF0dXJlcy4gVGhlIHNpemUgb2ZcbiAgICAgKiBhbGwgdGhlIGZpbGVzIHVwbG9hZGVkIGJ5IG9uZSBvcmdhbml6YXRpb24gY2FuIGJlIHVwIHRvIDEwMCBHQi5cbiAgICAgKlxuICAgICAqIFRoZSBzaXplIG9mIGluZGl2aWR1YWwgZmlsZXMgZm9yIGNhbiBiZSBhIG1heGltdW0gb2YgNTEyTUIuIFNlZSB0aGVcbiAgICAgKiBbQXNzaXN0YW50cyBUb29scyBndWlkZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXNzaXN0YW50cy90b29scykgdG9cbiAgICAgKiBsZWFybiBtb3JlIGFib3V0IHRoZSB0eXBlcyBvZiBmaWxlcyBzdXBwb3J0ZWQuIFRoZSBGaW5lLXR1bmluZyBBUEkgb25seSBzdXBwb3J0c1xuICAgICAqIGAuanNvbmxgIGZpbGVzLlxuICAgICAqXG4gICAgICogUGxlYXNlIFtjb250YWN0IHVzXShodHRwczovL2hlbHAub3BlbmFpLmNvbS8pIGlmIHlvdSBuZWVkIHRvIGluY3JlYXNlIHRoZXNlXG4gICAgICogc3RvcmFnZSBsaW1pdHMuXG4gICAgICovXG4gICAgY3JlYXRlKGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KCcvZmlsZXMnLCBtdWx0aXBhcnRGb3JtUmVxdWVzdE9wdGlvbnMoeyBib2R5LCAuLi5vcHRpb25zIH0pKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBpbmZvcm1hdGlvbiBhYm91dCBhIHNwZWNpZmljIGZpbGUuXG4gICAgICovXG4gICAgcmV0cmlldmUoZmlsZUlkLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0KGAvZmlsZXMvJHtmaWxlSWR9YCwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGxpc3QocXVlcnkgPSB7fSwgb3B0aW9ucykge1xuICAgICAgICBpZiAoaXNSZXF1ZXN0T3B0aW9ucyhxdWVyeSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxpc3Qoe30sIHF1ZXJ5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldEFQSUxpc3QoJy9maWxlcycsIEZpbGVPYmplY3RzUGFnZSwgeyBxdWVyeSwgLi4ub3B0aW9ucyB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVsZXRlIGEgZmlsZS5cbiAgICAgKi9cbiAgICBkZWwoZmlsZUlkLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZGVsZXRlKGAvZmlsZXMvJHtmaWxlSWR9YCwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGNvbnRlbnRzIG9mIHRoZSBzcGVjaWZpZWQgZmlsZS5cbiAgICAgKi9cbiAgICBjb250ZW50KGZpbGVJZCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldChgL2ZpbGVzLyR7ZmlsZUlkfS9jb250ZW50YCwgeyAuLi5vcHRpb25zLCBfX2JpbmFyeVJlc3BvbnNlOiB0cnVlIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjb250ZW50cyBvZiB0aGUgc3BlY2lmaWVkIGZpbGUuXG4gICAgICpcbiAgICAgKiBAZGVwcmVjYXRlZCBUaGUgYC5jb250ZW50KClgIG1ldGhvZCBzaG91bGQgYmUgdXNlZCBpbnN0ZWFkXG4gICAgICovXG4gICAgcmV0cmlldmVDb250ZW50KGZpbGVJZCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldChgL2ZpbGVzLyR7ZmlsZUlkfS9jb250ZW50YCwge1xuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHsgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicsIC4uLm9wdGlvbnM/LmhlYWRlcnMgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdhaXRzIGZvciB0aGUgZ2l2ZW4gZmlsZSB0byBiZSBwcm9jZXNzZWQsIGRlZmF1bHQgdGltZW91dCBpcyAzMCBtaW5zLlxuICAgICAqL1xuICAgIGFzeW5jIHdhaXRGb3JQcm9jZXNzaW5nKGlkLCB7IHBvbGxJbnRlcnZhbCA9IDUwMDAsIG1heFdhaXQgPSAzMCAqIDYwICogMTAwMCB9ID0ge30pIHtcbiAgICAgICAgY29uc3QgVEVSTUlOQUxfU1RBVEVTID0gbmV3IFNldChbJ3Byb2Nlc3NlZCcsICdlcnJvcicsICdkZWxldGVkJ10pO1xuICAgICAgICBjb25zdCBzdGFydCA9IERhdGUubm93KCk7XG4gICAgICAgIGxldCBmaWxlID0gYXdhaXQgdGhpcy5yZXRyaWV2ZShpZCk7XG4gICAgICAgIHdoaWxlICghZmlsZS5zdGF0dXMgfHwgIVRFUk1JTkFMX1NUQVRFUy5oYXMoZmlsZS5zdGF0dXMpKSB7XG4gICAgICAgICAgICBhd2FpdCBzbGVlcChwb2xsSW50ZXJ2YWwpO1xuICAgICAgICAgICAgZmlsZSA9IGF3YWl0IHRoaXMucmV0cmlldmUoaWQpO1xuICAgICAgICAgICAgaWYgKERhdGUubm93KCkgLSBzdGFydCA+IG1heFdhaXQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQVBJQ29ubmVjdGlvblRpbWVvdXRFcnJvcih7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBHaXZpbmcgdXAgb24gd2FpdGluZyBmb3IgZmlsZSAke2lkfSB0byBmaW5pc2ggcHJvY2Vzc2luZyBhZnRlciAke21heFdhaXR9IG1pbGxpc2Vjb25kcy5gLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmaWxlO1xuICAgIH1cbn1cbi8qKlxuICogTm90ZTogbm8gcGFnaW5hdGlvbiBhY3R1YWxseSBvY2N1cnMgeWV0LCB0aGlzIGlzIGZvciBmb3J3YXJkcy1jb21wYXRpYmlsaXR5LlxuICovXG5leHBvcnQgY2xhc3MgRmlsZU9iamVjdHNQYWdlIGV4dGVuZHMgUGFnZSB7XG59XG4oZnVuY3Rpb24gKEZpbGVzKSB7XG4gICAgRmlsZXMuRmlsZU9iamVjdHNQYWdlID0gRmlsZXNBUEkuRmlsZU9iamVjdHNQYWdlO1xufSkoRmlsZXMgfHwgKEZpbGVzID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpbGVzLm1qcy5tYXAiXSwibmFtZXMiOlsiQVBJUmVzb3VyY2UiLCJpc1JlcXVlc3RPcHRpb25zIiwic2xlZXAiLCJBUElDb25uZWN0aW9uVGltZW91dEVycm9yIiwiRmlsZXNBUEkiLCJtdWx0aXBhcnRGb3JtUmVxdWVzdE9wdGlvbnMiLCJQYWdlIiwiRmlsZXMiLCJjcmVhdGUiLCJib2R5Iiwib3B0aW9ucyIsIl9jbGllbnQiLCJwb3N0IiwicmV0cmlldmUiLCJmaWxlSWQiLCJnZXQiLCJsaXN0IiwicXVlcnkiLCJnZXRBUElMaXN0IiwiRmlsZU9iamVjdHNQYWdlIiwiZGVsIiwiZGVsZXRlIiwiY29udGVudCIsIl9fYmluYXJ5UmVzcG9uc2UiLCJyZXRyaWV2ZUNvbnRlbnQiLCJoZWFkZXJzIiwiQWNjZXB0Iiwid2FpdEZvclByb2Nlc3NpbmciLCJpZCIsInBvbGxJbnRlcnZhbCIsIm1heFdhaXQiLCJURVJNSU5BTF9TVEFURVMiLCJTZXQiLCJzdGFydCIsIkRhdGUiLCJub3ciLCJmaWxlIiwic3RhdHVzIiwiaGFzIiwibWVzc2FnZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/openai/resources/files.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/openai/resources/fine-tunes.mjs":
/*!******************************************************!*\
  !*** ./node_modules/openai/resources/fine-tunes.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FineTunes: () => (/* binding */ FineTunes),\n/* harmony export */   FineTunesPage: () => (/* binding */ FineTunesPage)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(action-browser)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var openai_resources_fine_tunes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai/resources/fine-tunes */ \"(action-browser)/./node_modules/openai/resources/fine-tunes.mjs\");\n/* harmony import */ var openai_pagination__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/pagination */ \"(action-browser)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n\n\nclass FineTunes extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Creates a job that fine-tunes a specified model from a given dataset.\n     *\n     * Response includes details of the enqueued job including job status and the name\n     * of the fine-tuned models once complete.\n     *\n     * [Learn more about fine-tuning](https://platform.openai.com/docs/guides/legacy-fine-tuning)\n     */ create(body, options) {\n        return this._client.post(\"/fine-tunes\", {\n            body,\n            ...options\n        });\n    }\n    /**\n     * Gets info about the fine-tune job.\n     *\n     * [Learn more about fine-tuning](https://platform.openai.com/docs/guides/legacy-fine-tuning)\n     */ retrieve(fineTuneId, options) {\n        return this._client.get(`/fine-tunes/${fineTuneId}`, options);\n    }\n    /**\n     * List your organization's fine-tuning jobs\n     */ list(options) {\n        return this._client.getAPIList(\"/fine-tunes\", FineTunesPage, options);\n    }\n    /**\n     * Immediately cancel a fine-tune job.\n     */ cancel(fineTuneId, options) {\n        return this._client.post(`/fine-tunes/${fineTuneId}/cancel`, options);\n    }\n    listEvents(fineTuneId, query, options) {\n        return this._client.get(`/fine-tunes/${fineTuneId}/events`, {\n            query,\n            timeout: 86400000,\n            ...options,\n            stream: query?.stream ?? false\n        });\n    }\n}\n/**\n * Note: no pagination actually occurs yet, this is for forwards-compatibility.\n */ class FineTunesPage extends openai_pagination__WEBPACK_IMPORTED_MODULE_1__.Page {\n}\n(function(FineTunes) {\n    FineTunes.FineTunesPage = openai_resources_fine_tunes__WEBPACK_IMPORTED_MODULE_2__.FineTunesPage;\n})(FineTunes || (FineTunes = {})); //# sourceMappingURL=fine-tunes.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2ZpbmUtdHVuZXMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEscURBQXFEO0FBQ1A7QUFDYztBQUNuQjtBQUNsQyxNQUFNRyxrQkFBa0JILHdEQUFXQTtJQUN0Qzs7Ozs7OztLQU9DLEdBQ0RJLE9BQU9DLElBQUksRUFBRUMsT0FBTyxFQUFFO1FBQ2xCLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNDLElBQUksQ0FBQyxlQUFlO1lBQUVIO1lBQU0sR0FBR0MsT0FBTztRQUFDO0lBQy9EO0lBQ0E7Ozs7S0FJQyxHQUNERyxTQUFTQyxVQUFVLEVBQUVKLE9BQU8sRUFBRTtRQUMxQixPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDSSxHQUFHLENBQUMsQ0FBQyxZQUFZLEVBQUVELFdBQVcsQ0FBQyxFQUFFSjtJQUN6RDtJQUNBOztLQUVDLEdBQ0RNLEtBQUtOLE9BQU8sRUFBRTtRQUNWLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNNLFVBQVUsQ0FBQyxlQUFlQyxlQUFlUjtJQUNqRTtJQUNBOztLQUVDLEdBQ0RTLE9BQU9MLFVBQVUsRUFBRUosT0FBTyxFQUFFO1FBQ3hCLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNDLElBQUksQ0FBQyxDQUFDLFlBQVksRUFBRUUsV0FBVyxPQUFPLENBQUMsRUFBRUo7SUFDakU7SUFDQVUsV0FBV04sVUFBVSxFQUFFTyxLQUFLLEVBQUVYLE9BQU8sRUFBRTtRQUNuQyxPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDSSxHQUFHLENBQUMsQ0FBQyxZQUFZLEVBQUVELFdBQVcsT0FBTyxDQUFDLEVBQUU7WUFDeERPO1lBQ0FDLFNBQVM7WUFDVCxHQUFHWixPQUFPO1lBQ1ZhLFFBQVFGLE9BQU9FLFVBQVU7UUFDN0I7SUFDSjtBQUNKO0FBQ0E7O0NBRUMsR0FDTSxNQUFNTCxzQkFBc0JaLG1EQUFJQTtBQUN2QztBQUNDLFVBQVVDLFNBQVM7SUFDaEJBLFVBQVVXLGFBQWEsR0FBR2Isc0VBQTBCO0FBQ3hELEdBQUdFLGFBQWNBLENBQUFBLFlBQVksQ0FBQyxLQUM5Qix1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9maW5lLXR1bmVzLm1qcz84ZmVkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gJ29wZW5haS9yZXNvdXJjZSc7XG5pbXBvcnQgKiBhcyBGaW5lVHVuZXNBUEkgZnJvbSAnb3BlbmFpL3Jlc291cmNlcy9maW5lLXR1bmVzJztcbmltcG9ydCB7IFBhZ2UgfSBmcm9tICdvcGVuYWkvcGFnaW5hdGlvbic7XG5leHBvcnQgY2xhc3MgRmluZVR1bmVzIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBqb2IgdGhhdCBmaW5lLXR1bmVzIGEgc3BlY2lmaWVkIG1vZGVsIGZyb20gYSBnaXZlbiBkYXRhc2V0LlxuICAgICAqXG4gICAgICogUmVzcG9uc2UgaW5jbHVkZXMgZGV0YWlscyBvZiB0aGUgZW5xdWV1ZWQgam9iIGluY2x1ZGluZyBqb2Igc3RhdHVzIGFuZCB0aGUgbmFtZVxuICAgICAqIG9mIHRoZSBmaW5lLXR1bmVkIG1vZGVscyBvbmNlIGNvbXBsZXRlLlxuICAgICAqXG4gICAgICogW0xlYXJuIG1vcmUgYWJvdXQgZmluZS10dW5pbmddKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy9sZWdhY3ktZmluZS10dW5pbmcpXG4gICAgICovXG4gICAgY3JlYXRlKGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KCcvZmluZS10dW5lcycsIHsgYm9keSwgLi4ub3B0aW9ucyB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0cyBpbmZvIGFib3V0IHRoZSBmaW5lLXR1bmUgam9iLlxuICAgICAqXG4gICAgICogW0xlYXJuIG1vcmUgYWJvdXQgZmluZS10dW5pbmddKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy9sZWdhY3ktZmluZS10dW5pbmcpXG4gICAgICovXG4gICAgcmV0cmlldmUoZmluZVR1bmVJZCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldChgL2ZpbmUtdHVuZXMvJHtmaW5lVHVuZUlkfWAsIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMaXN0IHlvdXIgb3JnYW5pemF0aW9uJ3MgZmluZS10dW5pbmcgam9ic1xuICAgICAqL1xuICAgIGxpc3Qob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldEFQSUxpc3QoJy9maW5lLXR1bmVzJywgRmluZVR1bmVzUGFnZSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEltbWVkaWF0ZWx5IGNhbmNlbCBhIGZpbmUtdHVuZSBqb2IuXG4gICAgICovXG4gICAgY2FuY2VsKGZpbmVUdW5lSWQsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KGAvZmluZS10dW5lcy8ke2ZpbmVUdW5lSWR9L2NhbmNlbGAsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBsaXN0RXZlbnRzKGZpbmVUdW5lSWQsIHF1ZXJ5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0KGAvZmluZS10dW5lcy8ke2ZpbmVUdW5lSWR9L2V2ZW50c2AsIHtcbiAgICAgICAgICAgIHF1ZXJ5LFxuICAgICAgICAgICAgdGltZW91dDogODY0MDAwMDAsXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgc3RyZWFtOiBxdWVyeT8uc3RyZWFtID8/IGZhbHNlLFxuICAgICAgICB9KTtcbiAgICB9XG59XG4vKipcbiAqIE5vdGU6IG5vIHBhZ2luYXRpb24gYWN0dWFsbHkgb2NjdXJzIHlldCwgdGhpcyBpcyBmb3IgZm9yd2FyZHMtY29tcGF0aWJpbGl0eS5cbiAqL1xuZXhwb3J0IGNsYXNzIEZpbmVUdW5lc1BhZ2UgZXh0ZW5kcyBQYWdlIHtcbn1cbihmdW5jdGlvbiAoRmluZVR1bmVzKSB7XG4gICAgRmluZVR1bmVzLkZpbmVUdW5lc1BhZ2UgPSBGaW5lVHVuZXNBUEkuRmluZVR1bmVzUGFnZTtcbn0pKEZpbmVUdW5lcyB8fCAoRmluZVR1bmVzID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpbmUtdHVuZXMubWpzLm1hcCJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsIkZpbmVUdW5lc0FQSSIsIlBhZ2UiLCJGaW5lVHVuZXMiLCJjcmVhdGUiLCJib2R5Iiwib3B0aW9ucyIsIl9jbGllbnQiLCJwb3N0IiwicmV0cmlldmUiLCJmaW5lVHVuZUlkIiwiZ2V0IiwibGlzdCIsImdldEFQSUxpc3QiLCJGaW5lVHVuZXNQYWdlIiwiY2FuY2VsIiwibGlzdEV2ZW50cyIsInF1ZXJ5IiwidGltZW91dCIsInN0cmVhbSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/openai/resources/fine-tunes.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/openai/resources/fine-tuning/fine-tuning.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/openai/resources/fine-tuning/fine-tuning.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FineTuning: () => (/* binding */ FineTuning)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(action-browser)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var openai_resources_fine_tuning_jobs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/resources/fine-tuning/jobs */ \"(action-browser)/./node_modules/openai/resources/fine-tuning/jobs.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n\nclass FineTuning extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    constructor(){\n        super(...arguments);\n        this.jobs = new openai_resources_fine_tuning_jobs__WEBPACK_IMPORTED_MODULE_1__.Jobs(this._client);\n    }\n}\n(function(FineTuning) {\n    FineTuning.Jobs = openai_resources_fine_tuning_jobs__WEBPACK_IMPORTED_MODULE_1__.Jobs;\n    FineTuning.FineTuningJobsPage = openai_resources_fine_tuning_jobs__WEBPACK_IMPORTED_MODULE_1__.FineTuningJobsPage;\n    FineTuning.FineTuningJobEventsPage = openai_resources_fine_tuning_jobs__WEBPACK_IMPORTED_MODULE_1__.FineTuningJobEventsPage;\n})(FineTuning || (FineTuning = {})); //# sourceMappingURL=fine-tuning.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2ZpbmUtdHVuaW5nL2ZpbmUtdHVuaW5nLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxxREFBcUQ7QUFDUDtBQUNlO0FBQ3RELE1BQU1FLG1CQUFtQkYsd0RBQVdBO0lBQ3ZDRyxhQUFjO1FBQ1YsS0FBSyxJQUFJQztRQUNULElBQUksQ0FBQ0MsSUFBSSxHQUFHLElBQUlKLG1FQUFZLENBQUMsSUFBSSxDQUFDTSxPQUFPO0lBQzdDO0FBQ0o7QUFDQyxVQUFVTCxVQUFVO0lBQ2pCQSxXQUFXSSxJQUFJLEdBQUdMLG1FQUFZO0lBQzlCQyxXQUFXTSxrQkFBa0IsR0FBR1AsaUZBQTBCO0lBQzFEQyxXQUFXTyx1QkFBdUIsR0FBR1Isc0ZBQStCO0FBQ3hFLEdBQUdDLGNBQWVBLENBQUFBLGFBQWEsQ0FBQyxLQUNoQyx3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9maW5lLXR1bmluZy9maW5lLXR1bmluZy5tanM/MjY3NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tICdvcGVuYWkvcmVzb3VyY2UnO1xuaW1wb3J0ICogYXMgSm9ic0FQSSBmcm9tICdvcGVuYWkvcmVzb3VyY2VzL2ZpbmUtdHVuaW5nL2pvYnMnO1xuZXhwb3J0IGNsYXNzIEZpbmVUdW5pbmcgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuam9icyA9IG5ldyBKb2JzQVBJLkpvYnModGhpcy5fY2xpZW50KTtcbiAgICB9XG59XG4oZnVuY3Rpb24gKEZpbmVUdW5pbmcpIHtcbiAgICBGaW5lVHVuaW5nLkpvYnMgPSBKb2JzQVBJLkpvYnM7XG4gICAgRmluZVR1bmluZy5GaW5lVHVuaW5nSm9ic1BhZ2UgPSBKb2JzQVBJLkZpbmVUdW5pbmdKb2JzUGFnZTtcbiAgICBGaW5lVHVuaW5nLkZpbmVUdW5pbmdKb2JFdmVudHNQYWdlID0gSm9ic0FQSS5GaW5lVHVuaW5nSm9iRXZlbnRzUGFnZTtcbn0pKEZpbmVUdW5pbmcgfHwgKEZpbmVUdW5pbmcgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmluZS10dW5pbmcubWpzLm1hcCJdLCJuYW1lcyI6WyJBUElSZXNvdXJjZSIsIkpvYnNBUEkiLCJGaW5lVHVuaW5nIiwiY29uc3RydWN0b3IiLCJhcmd1bWVudHMiLCJqb2JzIiwiSm9icyIsIl9jbGllbnQiLCJGaW5lVHVuaW5nSm9ic1BhZ2UiLCJGaW5lVHVuaW5nSm9iRXZlbnRzUGFnZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/openai/resources/fine-tuning/fine-tuning.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/openai/resources/fine-tuning/jobs.mjs":
/*!************************************************************!*\
  !*** ./node_modules/openai/resources/fine-tuning/jobs.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FineTuningJobEventsPage: () => (/* binding */ FineTuningJobEventsPage),\n/* harmony export */   FineTuningJobsPage: () => (/* binding */ FineTuningJobsPage),\n/* harmony export */   Jobs: () => (/* binding */ Jobs)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(action-browser)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var openai_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/core */ \"(action-browser)/./node_modules/openai/core.mjs\");\n/* harmony import */ var openai_resources_fine_tuning_jobs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! openai/resources/fine-tuning/jobs */ \"(action-browser)/./node_modules/openai/resources/fine-tuning/jobs.mjs\");\n/* harmony import */ var openai_pagination__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai/pagination */ \"(action-browser)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n\n\n\nclass Jobs extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Creates a job that fine-tunes a specified model from a given dataset.\n     *\n     * Response includes details of the enqueued job including job status and the name\n     * of the fine-tuned models once complete.\n     *\n     * [Learn more about fine-tuning](https://platform.openai.com/docs/guides/fine-tuning)\n     */ create(body, options) {\n        return this._client.post(\"/fine_tuning/jobs\", {\n            body,\n            ...options\n        });\n    }\n    /**\n     * Get info about a fine-tuning job.\n     *\n     * [Learn more about fine-tuning](https://platform.openai.com/docs/guides/fine-tuning)\n     */ retrieve(fineTuningJobId, options) {\n        return this._client.get(`/fine_tuning/jobs/${fineTuningJobId}`, options);\n    }\n    list(query = {}, options) {\n        if ((0,openai_core__WEBPACK_IMPORTED_MODULE_1__.isRequestOptions)(query)) {\n            return this.list({}, query);\n        }\n        return this._client.getAPIList(\"/fine_tuning/jobs\", FineTuningJobsPage, {\n            query,\n            ...options\n        });\n    }\n    /**\n     * Immediately cancel a fine-tune job.\n     */ cancel(fineTuningJobId, options) {\n        return this._client.post(`/fine_tuning/jobs/${fineTuningJobId}/cancel`, options);\n    }\n    listEvents(fineTuningJobId, query = {}, options) {\n        if ((0,openai_core__WEBPACK_IMPORTED_MODULE_1__.isRequestOptions)(query)) {\n            return this.listEvents(fineTuningJobId, {}, query);\n        }\n        return this._client.getAPIList(`/fine_tuning/jobs/${fineTuningJobId}/events`, FineTuningJobEventsPage, {\n            query,\n            ...options\n        });\n    }\n}\nclass FineTuningJobsPage extends openai_pagination__WEBPACK_IMPORTED_MODULE_2__.CursorPage {\n}\nclass FineTuningJobEventsPage extends openai_pagination__WEBPACK_IMPORTED_MODULE_2__.CursorPage {\n}\n(function(Jobs) {\n    Jobs.FineTuningJobsPage = openai_resources_fine_tuning_jobs__WEBPACK_IMPORTED_MODULE_3__.FineTuningJobsPage;\n    Jobs.FineTuningJobEventsPage = openai_resources_fine_tuning_jobs__WEBPACK_IMPORTED_MODULE_3__.FineTuningJobEventsPage;\n})(Jobs || (Jobs = {})); //# sourceMappingURL=jobs.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2ZpbmUtdHVuaW5nL2pvYnMubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxxREFBcUQ7QUFDUDtBQUNDO0FBQ2M7QUFDZDtBQUN4QyxNQUFNSSxhQUFhSix3REFBV0E7SUFDakM7Ozs7Ozs7S0FPQyxHQUNESyxPQUFPQyxJQUFJLEVBQUVDLE9BQU8sRUFBRTtRQUNsQixPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxJQUFJLENBQUMscUJBQXFCO1lBQUVIO1lBQU0sR0FBR0MsT0FBTztRQUFDO0lBQ3JFO0lBQ0E7Ozs7S0FJQyxHQUNERyxTQUFTQyxlQUFlLEVBQUVKLE9BQU8sRUFBRTtRQUMvQixPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDSSxHQUFHLENBQUMsQ0FBQyxrQkFBa0IsRUFBRUQsZ0JBQWdCLENBQUMsRUFBRUo7SUFDcEU7SUFDQU0sS0FBS0MsUUFBUSxDQUFDLENBQUMsRUFBRVAsT0FBTyxFQUFFO1FBQ3RCLElBQUlOLDZEQUFnQkEsQ0FBQ2EsUUFBUTtZQUN6QixPQUFPLElBQUksQ0FBQ0QsSUFBSSxDQUFDLENBQUMsR0FBR0M7UUFDekI7UUFDQSxPQUFPLElBQUksQ0FBQ04sT0FBTyxDQUFDTyxVQUFVLENBQUMscUJBQXFCQyxvQkFBb0I7WUFBRUY7WUFBTyxHQUFHUCxPQUFPO1FBQUM7SUFDaEc7SUFDQTs7S0FFQyxHQUNEVSxPQUFPTixlQUFlLEVBQUVKLE9BQU8sRUFBRTtRQUM3QixPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxJQUFJLENBQUMsQ0FBQyxrQkFBa0IsRUFBRUUsZ0JBQWdCLE9BQU8sQ0FBQyxFQUFFSjtJQUM1RTtJQUNBVyxXQUFXUCxlQUFlLEVBQUVHLFFBQVEsQ0FBQyxDQUFDLEVBQUVQLE9BQU8sRUFBRTtRQUM3QyxJQUFJTiw2REFBZ0JBLENBQUNhLFFBQVE7WUFDekIsT0FBTyxJQUFJLENBQUNJLFVBQVUsQ0FBQ1AsaUJBQWlCLENBQUMsR0FBR0c7UUFDaEQ7UUFDQSxPQUFPLElBQUksQ0FBQ04sT0FBTyxDQUFDTyxVQUFVLENBQUMsQ0FBQyxrQkFBa0IsRUFBRUosZ0JBQWdCLE9BQU8sQ0FBQyxFQUFFUSx5QkFBeUI7WUFDbkdMO1lBQ0EsR0FBR1AsT0FBTztRQUNkO0lBQ0o7QUFDSjtBQUNPLE1BQU1TLDJCQUEyQmIseURBQVVBO0FBQ2xEO0FBQ08sTUFBTWdCLGdDQUFnQ2hCLHlEQUFVQTtBQUN2RDtBQUNDLFVBQVVDLElBQUk7SUFDWEEsS0FBS1ksa0JBQWtCLEdBQUdkLGlGQUEwQjtJQUNwREUsS0FBS2UsdUJBQXVCLEdBQUdqQixzRkFBK0I7QUFDbEUsR0FBR0UsUUFBU0EsQ0FBQUEsT0FBTyxDQUFDLEtBQ3BCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2ZpbmUtdHVuaW5nL2pvYnMubWpzPzQ5NzEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSAnb3BlbmFpL3Jlc291cmNlJztcbmltcG9ydCB7IGlzUmVxdWVzdE9wdGlvbnMgfSBmcm9tICdvcGVuYWkvY29yZSc7XG5pbXBvcnQgKiBhcyBKb2JzQVBJIGZyb20gJ29wZW5haS9yZXNvdXJjZXMvZmluZS10dW5pbmcvam9icyc7XG5pbXBvcnQgeyBDdXJzb3JQYWdlIH0gZnJvbSAnb3BlbmFpL3BhZ2luYXRpb24nO1xuZXhwb3J0IGNsYXNzIEpvYnMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGpvYiB0aGF0IGZpbmUtdHVuZXMgYSBzcGVjaWZpZWQgbW9kZWwgZnJvbSBhIGdpdmVuIGRhdGFzZXQuXG4gICAgICpcbiAgICAgKiBSZXNwb25zZSBpbmNsdWRlcyBkZXRhaWxzIG9mIHRoZSBlbnF1ZXVlZCBqb2IgaW5jbHVkaW5nIGpvYiBzdGF0dXMgYW5kIHRoZSBuYW1lXG4gICAgICogb2YgdGhlIGZpbmUtdHVuZWQgbW9kZWxzIG9uY2UgY29tcGxldGUuXG4gICAgICpcbiAgICAgKiBbTGVhcm4gbW9yZSBhYm91dCBmaW5lLXR1bmluZ10oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvZ3VpZGVzL2ZpbmUtdHVuaW5nKVxuICAgICAqL1xuICAgIGNyZWF0ZShib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdCgnL2ZpbmVfdHVuaW5nL2pvYnMnLCB7IGJvZHksIC4uLm9wdGlvbnMgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBpbmZvIGFib3V0IGEgZmluZS10dW5pbmcgam9iLlxuICAgICAqXG4gICAgICogW0xlYXJuIG1vcmUgYWJvdXQgZmluZS10dW5pbmddKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy9maW5lLXR1bmluZylcbiAgICAgKi9cbiAgICByZXRyaWV2ZShmaW5lVHVuaW5nSm9iSWQsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXQoYC9maW5lX3R1bmluZy9qb2JzLyR7ZmluZVR1bmluZ0pvYklkfWAsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBsaXN0KHF1ZXJ5ID0ge30sIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKGlzUmVxdWVzdE9wdGlvbnMocXVlcnkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5saXN0KHt9LCBxdWVyeSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXRBUElMaXN0KCcvZmluZV90dW5pbmcvam9icycsIEZpbmVUdW5pbmdKb2JzUGFnZSwgeyBxdWVyeSwgLi4ub3B0aW9ucyB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW1tZWRpYXRlbHkgY2FuY2VsIGEgZmluZS10dW5lIGpvYi5cbiAgICAgKi9cbiAgICBjYW5jZWwoZmluZVR1bmluZ0pvYklkLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdChgL2ZpbmVfdHVuaW5nL2pvYnMvJHtmaW5lVHVuaW5nSm9iSWR9L2NhbmNlbGAsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBsaXN0RXZlbnRzKGZpbmVUdW5pbmdKb2JJZCwgcXVlcnkgPSB7fSwgb3B0aW9ucykge1xuICAgICAgICBpZiAoaXNSZXF1ZXN0T3B0aW9ucyhxdWVyeSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxpc3RFdmVudHMoZmluZVR1bmluZ0pvYklkLCB7fSwgcXVlcnkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0QVBJTGlzdChgL2ZpbmVfdHVuaW5nL2pvYnMvJHtmaW5lVHVuaW5nSm9iSWR9L2V2ZW50c2AsIEZpbmVUdW5pbmdKb2JFdmVudHNQYWdlLCB7XG4gICAgICAgICAgICBxdWVyeSxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBGaW5lVHVuaW5nSm9ic1BhZ2UgZXh0ZW5kcyBDdXJzb3JQYWdlIHtcbn1cbmV4cG9ydCBjbGFzcyBGaW5lVHVuaW5nSm9iRXZlbnRzUGFnZSBleHRlbmRzIEN1cnNvclBhZ2Uge1xufVxuKGZ1bmN0aW9uIChKb2JzKSB7XG4gICAgSm9icy5GaW5lVHVuaW5nSm9ic1BhZ2UgPSBKb2JzQVBJLkZpbmVUdW5pbmdKb2JzUGFnZTtcbiAgICBKb2JzLkZpbmVUdW5pbmdKb2JFdmVudHNQYWdlID0gSm9ic0FQSS5GaW5lVHVuaW5nSm9iRXZlbnRzUGFnZTtcbn0pKEpvYnMgfHwgKEpvYnMgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9am9icy5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiaXNSZXF1ZXN0T3B0aW9ucyIsIkpvYnNBUEkiLCJDdXJzb3JQYWdlIiwiSm9icyIsImNyZWF0ZSIsImJvZHkiLCJvcHRpb25zIiwiX2NsaWVudCIsInBvc3QiLCJyZXRyaWV2ZSIsImZpbmVUdW5pbmdKb2JJZCIsImdldCIsImxpc3QiLCJxdWVyeSIsImdldEFQSUxpc3QiLCJGaW5lVHVuaW5nSm9ic1BhZ2UiLCJjYW5jZWwiLCJsaXN0RXZlbnRzIiwiRmluZVR1bmluZ0pvYkV2ZW50c1BhZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/openai/resources/fine-tuning/jobs.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/openai/resources/images.mjs":
/*!**************************************************!*\
  !*** ./node_modules/openai/resources/images.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Images: () => (/* binding */ Images)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(action-browser)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var openai_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/core */ \"(action-browser)/./node_modules/openai/core.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n\nclass Images extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Creates a variation of a given image.\n     */ createVariation(body, options) {\n        return this._client.post(\"/images/variations\", (0,openai_core__WEBPACK_IMPORTED_MODULE_1__.multipartFormRequestOptions)({\n            body,\n            ...options\n        }));\n    }\n    /**\n     * Creates an edited or extended image given an original image and a prompt.\n     */ edit(body, options) {\n        return this._client.post(\"/images/edits\", (0,openai_core__WEBPACK_IMPORTED_MODULE_1__.multipartFormRequestOptions)({\n            body,\n            ...options\n        }));\n    }\n    /**\n     * Creates an image given a prompt.\n     */ generate(body, options) {\n        return this._client.post(\"/images/generations\", {\n            body,\n            ...options\n        });\n    }\n}\n(function(Images) {})(Images || (Images = {})); //# sourceMappingURL=images.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2ltYWdlcy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEscURBQXFEO0FBQ1A7QUFDWTtBQUNuRCxNQUFNRSxlQUFlRix3REFBV0E7SUFDbkM7O0tBRUMsR0FDREcsZ0JBQWdCQyxJQUFJLEVBQUVDLE9BQU8sRUFBRTtRQUMzQixPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxJQUFJLENBQUMsc0JBQXNCTix3RUFBMkJBLENBQUM7WUFBRUc7WUFBTSxHQUFHQyxPQUFPO1FBQUM7SUFDbEc7SUFDQTs7S0FFQyxHQUNERyxLQUFLSixJQUFJLEVBQUVDLE9BQU8sRUFBRTtRQUNoQixPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxJQUFJLENBQUMsaUJBQWlCTix3RUFBMkJBLENBQUM7WUFBRUc7WUFBTSxHQUFHQyxPQUFPO1FBQUM7SUFDN0Y7SUFDQTs7S0FFQyxHQUNESSxTQUFTTCxJQUFJLEVBQUVDLE9BQU8sRUFBRTtRQUNwQixPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxJQUFJLENBQUMsdUJBQXVCO1lBQUVIO1lBQU0sR0FBR0MsT0FBTztRQUFDO0lBQ3ZFO0FBQ0o7QUFDQyxVQUFVSCxNQUFNLEdBQ2pCLEdBQUdBLFVBQVdBLENBQUFBLFNBQVMsQ0FBQyxLQUN4QixtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9pbWFnZXMubWpzPzZmN2UiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSAnb3BlbmFpL3Jlc291cmNlJztcbmltcG9ydCB7IG11bHRpcGFydEZvcm1SZXF1ZXN0T3B0aW9ucyB9IGZyb20gJ29wZW5haS9jb3JlJztcbmV4cG9ydCBjbGFzcyBJbWFnZXMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHZhcmlhdGlvbiBvZiBhIGdpdmVuIGltYWdlLlxuICAgICAqL1xuICAgIGNyZWF0ZVZhcmlhdGlvbihib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdCgnL2ltYWdlcy92YXJpYXRpb25zJywgbXVsdGlwYXJ0Rm9ybVJlcXVlc3RPcHRpb25zKHsgYm9keSwgLi4ub3B0aW9ucyB9KSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gZWRpdGVkIG9yIGV4dGVuZGVkIGltYWdlIGdpdmVuIGFuIG9yaWdpbmFsIGltYWdlIGFuZCBhIHByb21wdC5cbiAgICAgKi9cbiAgICBlZGl0KGJvZHksIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KCcvaW1hZ2VzL2VkaXRzJywgbXVsdGlwYXJ0Rm9ybVJlcXVlc3RPcHRpb25zKHsgYm9keSwgLi4ub3B0aW9ucyB9KSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gaW1hZ2UgZ2l2ZW4gYSBwcm9tcHQuXG4gICAgICovXG4gICAgZ2VuZXJhdGUoYm9keSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoJy9pbWFnZXMvZ2VuZXJhdGlvbnMnLCB7IGJvZHksIC4uLm9wdGlvbnMgfSk7XG4gICAgfVxufVxuKGZ1bmN0aW9uIChJbWFnZXMpIHtcbn0pKEltYWdlcyB8fCAoSW1hZ2VzID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWltYWdlcy5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwibXVsdGlwYXJ0Rm9ybVJlcXVlc3RPcHRpb25zIiwiSW1hZ2VzIiwiY3JlYXRlVmFyaWF0aW9uIiwiYm9keSIsIm9wdGlvbnMiLCJfY2xpZW50IiwicG9zdCIsImVkaXQiLCJnZW5lcmF0ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/openai/resources/images.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/openai/resources/index.mjs":
/*!*************************************************!*\
  !*** ./node_modules/openai/resources/index.mjs ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Audio: () => (/* reexport safe */ _audio_audio_mjs__WEBPACK_IMPORTED_MODULE_2__.Audio),\n/* harmony export */   Beta: () => (/* reexport safe */ _beta_beta_mjs__WEBPACK_IMPORTED_MODULE_3__.Beta),\n/* harmony export */   Completions: () => (/* reexport safe */ _completions_mjs__WEBPACK_IMPORTED_MODULE_4__.Completions),\n/* harmony export */   Edits: () => (/* reexport safe */ _edits_mjs__WEBPACK_IMPORTED_MODULE_6__.Edits),\n/* harmony export */   Embeddings: () => (/* reexport safe */ _embeddings_mjs__WEBPACK_IMPORTED_MODULE_5__.Embeddings),\n/* harmony export */   FileObjectsPage: () => (/* reexport safe */ _files_mjs__WEBPACK_IMPORTED_MODULE_7__.FileObjectsPage),\n/* harmony export */   Files: () => (/* reexport safe */ _files_mjs__WEBPACK_IMPORTED_MODULE_7__.Files),\n/* harmony export */   FineTunes: () => (/* reexport safe */ _fine_tunes_mjs__WEBPACK_IMPORTED_MODULE_8__.FineTunes),\n/* harmony export */   FineTunesPage: () => (/* reexport safe */ _fine_tunes_mjs__WEBPACK_IMPORTED_MODULE_8__.FineTunesPage),\n/* harmony export */   FineTuning: () => (/* reexport safe */ _fine_tuning_fine_tuning_mjs__WEBPACK_IMPORTED_MODULE_9__.FineTuning),\n/* harmony export */   Images: () => (/* reexport safe */ _images_mjs__WEBPACK_IMPORTED_MODULE_10__.Images),\n/* harmony export */   Models: () => (/* reexport safe */ _models_mjs__WEBPACK_IMPORTED_MODULE_11__.Models),\n/* harmony export */   ModelsPage: () => (/* reexport safe */ _models_mjs__WEBPACK_IMPORTED_MODULE_11__.ModelsPage),\n/* harmony export */   Moderations: () => (/* reexport safe */ _moderations_mjs__WEBPACK_IMPORTED_MODULE_12__.Moderations)\n/* harmony export */ });\n/* harmony import */ var _chat_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chat/index.mjs */ \"(action-browser)/./node_modules/openai/resources/chat/index.mjs\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _chat_index_mjs__WEBPACK_IMPORTED_MODULE_0__) if([\"default\",\"Audio\",\"Beta\",\"Completions\",\"Embeddings\",\"Edits\",\"FileObjectsPage\",\"Files\",\"FineTunesPage\",\"FineTunes\",\"FineTuning\",\"Images\",\"ModelsPage\",\"Models\",\"Moderations\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _chat_index_mjs__WEBPACK_IMPORTED_MODULE_0__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _shared_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shared.mjs */ \"(action-browser)/./node_modules/openai/resources/shared.mjs\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _shared_mjs__WEBPACK_IMPORTED_MODULE_1__) if([\"default\",\"Audio\",\"Beta\",\"Completions\",\"Embeddings\",\"Edits\",\"FileObjectsPage\",\"Files\",\"FineTunesPage\",\"FineTunes\",\"FineTuning\",\"Images\",\"ModelsPage\",\"Models\",\"Moderations\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _shared_mjs__WEBPACK_IMPORTED_MODULE_1__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _audio_audio_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./audio/audio.mjs */ \"(action-browser)/./node_modules/openai/resources/audio/audio.mjs\");\n/* harmony import */ var _beta_beta_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./beta/beta.mjs */ \"(action-browser)/./node_modules/openai/resources/beta/beta.mjs\");\n/* harmony import */ var _completions_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./completions.mjs */ \"(action-browser)/./node_modules/openai/resources/completions.mjs\");\n/* harmony import */ var _embeddings_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./embeddings.mjs */ \"(action-browser)/./node_modules/openai/resources/embeddings.mjs\");\n/* harmony import */ var _edits_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./edits.mjs */ \"(action-browser)/./node_modules/openai/resources/edits.mjs\");\n/* harmony import */ var _files_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./files.mjs */ \"(action-browser)/./node_modules/openai/resources/files.mjs\");\n/* harmony import */ var _fine_tunes_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./fine-tunes.mjs */ \"(action-browser)/./node_modules/openai/resources/fine-tunes.mjs\");\n/* harmony import */ var _fine_tuning_fine_tuning_mjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./fine-tuning/fine-tuning.mjs */ \"(action-browser)/./node_modules/openai/resources/fine-tuning/fine-tuning.mjs\");\n/* harmony import */ var _images_mjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./images.mjs */ \"(action-browser)/./node_modules/openai/resources/images.mjs\");\n/* harmony import */ var _models_mjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./models.mjs */ \"(action-browser)/./node_modules/openai/resources/models.mjs\");\n/* harmony import */ var _moderations_mjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./moderations.mjs */ \"(action-browser)/./node_modules/openai/resources/moderations.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n\n\n\n\n\n\n\n\n\n\n\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxxREFBcUQ7QUFDcEI7QUFDSjtBQUNhO0FBQ0g7QUFDVTtBQUNIO0FBQ1Y7QUFDa0I7QUFDTztBQUNGO0FBQ3BCO0FBQ1c7QUFDRixDQUNoRCxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9pbmRleC5tanM/ZmQxNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLlxuZXhwb3J0ICogZnJvbSBcIi4vY2hhdC9pbmRleC5tanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3NoYXJlZC5tanNcIjtcbmV4cG9ydCB7IEF1ZGlvIH0gZnJvbSBcIi4vYXVkaW8vYXVkaW8ubWpzXCI7XG5leHBvcnQgeyBCZXRhIH0gZnJvbSBcIi4vYmV0YS9iZXRhLm1qc1wiO1xuZXhwb3J0IHsgQ29tcGxldGlvbnMsIH0gZnJvbSBcIi4vY29tcGxldGlvbnMubWpzXCI7XG5leHBvcnQgeyBFbWJlZGRpbmdzIH0gZnJvbSBcIi4vZW1iZWRkaW5ncy5tanNcIjtcbmV4cG9ydCB7IEVkaXRzIH0gZnJvbSBcIi4vZWRpdHMubWpzXCI7XG5leHBvcnQgeyBGaWxlT2JqZWN0c1BhZ2UsIEZpbGVzLCB9IGZyb20gXCIuL2ZpbGVzLm1qc1wiO1xuZXhwb3J0IHsgRmluZVR1bmVzUGFnZSwgRmluZVR1bmVzLCB9IGZyb20gXCIuL2ZpbmUtdHVuZXMubWpzXCI7XG5leHBvcnQgeyBGaW5lVHVuaW5nIH0gZnJvbSBcIi4vZmluZS10dW5pbmcvZmluZS10dW5pbmcubWpzXCI7XG5leHBvcnQgeyBJbWFnZXMsIH0gZnJvbSBcIi4vaW1hZ2VzLm1qc1wiO1xuZXhwb3J0IHsgTW9kZWxzUGFnZSwgTW9kZWxzIH0gZnJvbSBcIi4vbW9kZWxzLm1qc1wiO1xuZXhwb3J0IHsgTW9kZXJhdGlvbnMgfSBmcm9tIFwiLi9tb2RlcmF0aW9ucy5tanNcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXAiXSwibmFtZXMiOlsiQXVkaW8iLCJCZXRhIiwiQ29tcGxldGlvbnMiLCJFbWJlZGRpbmdzIiwiRWRpdHMiLCJGaWxlT2JqZWN0c1BhZ2UiLCJGaWxlcyIsIkZpbmVUdW5lc1BhZ2UiLCJGaW5lVHVuZXMiLCJGaW5lVHVuaW5nIiwiSW1hZ2VzIiwiTW9kZWxzUGFnZSIsIk1vZGVscyIsIk1vZGVyYXRpb25zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/openai/resources/index.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/openai/resources/models.mjs":
/*!**************************************************!*\
  !*** ./node_modules/openai/resources/models.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Models: () => (/* binding */ Models),\n/* harmony export */   ModelsPage: () => (/* binding */ ModelsPage)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(action-browser)/./node_modules/openai/resource.mjs\");\n/* harmony import */ var openai_resources_models__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai/resources/models */ \"(action-browser)/./node_modules/openai/resources/models.mjs\");\n/* harmony import */ var openai_pagination__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/pagination */ \"(action-browser)/./node_modules/openai/pagination.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\n\n\nclass Models extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Retrieves a model instance, providing basic information about the model such as\n     * the owner and permissioning.\n     */ retrieve(model, options) {\n        return this._client.get(`/models/${model}`, options);\n    }\n    /**\n     * Lists the currently available models, and provides basic information about each\n     * one such as the owner and availability.\n     */ list(options) {\n        return this._client.getAPIList(\"/models\", ModelsPage, options);\n    }\n    /**\n     * Delete a fine-tuned model. You must have the Owner role in your organization to\n     * delete a model.\n     */ del(model, options) {\n        return this._client.delete(`/models/${model}`, options);\n    }\n}\n/**\n * Note: no pagination actually occurs yet, this is for forwards-compatibility.\n */ class ModelsPage extends openai_pagination__WEBPACK_IMPORTED_MODULE_1__.Page {\n}\n(function(Models) {\n    Models.ModelsPage = openai_resources_models__WEBPACK_IMPORTED_MODULE_2__.ModelsPage;\n})(Models || (Models = {})); //# sourceMappingURL=models.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL21vZGVscy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxxREFBcUQ7QUFDUDtBQUNPO0FBQ1o7QUFDbEMsTUFBTUcsZUFBZUgsd0RBQVdBO0lBQ25DOzs7S0FHQyxHQUNESSxTQUFTQyxLQUFLLEVBQUVDLE9BQU8sRUFBRTtRQUNyQixPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUVILE1BQU0sQ0FBQyxFQUFFQztJQUNoRDtJQUNBOzs7S0FHQyxHQUNERyxLQUFLSCxPQUFPLEVBQUU7UUFDVixPQUFPLElBQUksQ0FBQ0MsT0FBTyxDQUFDRyxVQUFVLENBQUMsV0FBV0MsWUFBWUw7SUFDMUQ7SUFDQTs7O0tBR0MsR0FDRE0sSUFBSVAsS0FBSyxFQUFFQyxPQUFPLEVBQUU7UUFDaEIsT0FBTyxJQUFJLENBQUNDLE9BQU8sQ0FBQ00sTUFBTSxDQUFDLENBQUMsUUFBUSxFQUFFUixNQUFNLENBQUMsRUFBRUM7SUFDbkQ7QUFDSjtBQUNBOztDQUVDLEdBQ00sTUFBTUssbUJBQW1CVCxtREFBSUE7QUFDcEM7QUFDQyxVQUFVQyxNQUFNO0lBQ2JBLE9BQU9RLFVBQVUsR0FBR1YsK0RBQW9CO0FBQzVDLEdBQUdFLFVBQVdBLENBQUFBLFNBQVMsQ0FBQyxLQUN4QixtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9tb2RlbHMubWpzP2Y3YTIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSAnb3BlbmFpL3Jlc291cmNlJztcbmltcG9ydCAqIGFzIE1vZGVsc0FQSSBmcm9tICdvcGVuYWkvcmVzb3VyY2VzL21vZGVscyc7XG5pbXBvcnQgeyBQYWdlIH0gZnJvbSAnb3BlbmFpL3BhZ2luYXRpb24nO1xuZXhwb3J0IGNsYXNzIE1vZGVscyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgYSBtb2RlbCBpbnN0YW5jZSwgcHJvdmlkaW5nIGJhc2ljIGluZm9ybWF0aW9uIGFib3V0IHRoZSBtb2RlbCBzdWNoIGFzXG4gICAgICogdGhlIG93bmVyIGFuZCBwZXJtaXNzaW9uaW5nLlxuICAgICAqL1xuICAgIHJldHJpZXZlKG1vZGVsLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0KGAvbW9kZWxzLyR7bW9kZWx9YCwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIExpc3RzIHRoZSBjdXJyZW50bHkgYXZhaWxhYmxlIG1vZGVscywgYW5kIHByb3ZpZGVzIGJhc2ljIGluZm9ybWF0aW9uIGFib3V0IGVhY2hcbiAgICAgKiBvbmUgc3VjaCBhcyB0aGUgb3duZXIgYW5kIGF2YWlsYWJpbGl0eS5cbiAgICAgKi9cbiAgICBsaXN0KG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXRBUElMaXN0KCcvbW9kZWxzJywgTW9kZWxzUGFnZSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlbGV0ZSBhIGZpbmUtdHVuZWQgbW9kZWwuIFlvdSBtdXN0IGhhdmUgdGhlIE93bmVyIHJvbGUgaW4geW91ciBvcmdhbml6YXRpb24gdG9cbiAgICAgKiBkZWxldGUgYSBtb2RlbC5cbiAgICAgKi9cbiAgICBkZWwobW9kZWwsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudC5kZWxldGUoYC9tb2RlbHMvJHttb2RlbH1gLCBvcHRpb25zKTtcbiAgICB9XG59XG4vKipcbiAqIE5vdGU6IG5vIHBhZ2luYXRpb24gYWN0dWFsbHkgb2NjdXJzIHlldCwgdGhpcyBpcyBmb3IgZm9yd2FyZHMtY29tcGF0aWJpbGl0eS5cbiAqL1xuZXhwb3J0IGNsYXNzIE1vZGVsc1BhZ2UgZXh0ZW5kcyBQYWdlIHtcbn1cbihmdW5jdGlvbiAoTW9kZWxzKSB7XG4gICAgTW9kZWxzLk1vZGVsc1BhZ2UgPSBNb2RlbHNBUEkuTW9kZWxzUGFnZTtcbn0pKE1vZGVscyB8fCAoTW9kZWxzID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vZGVscy5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiTW9kZWxzQVBJIiwiUGFnZSIsIk1vZGVscyIsInJldHJpZXZlIiwibW9kZWwiLCJvcHRpb25zIiwiX2NsaWVudCIsImdldCIsImxpc3QiLCJnZXRBUElMaXN0IiwiTW9kZWxzUGFnZSIsImRlbCIsImRlbGV0ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/openai/resources/models.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/openai/resources/moderations.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/openai/resources/moderations.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Moderations: () => (/* binding */ Moderations)\n/* harmony export */ });\n/* harmony import */ var openai_resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai/resource */ \"(action-browser)/./node_modules/openai/resource.mjs\");\n// File generated from our OpenAPI spec by Stainless.\n\nclass Moderations extends openai_resource__WEBPACK_IMPORTED_MODULE_0__.APIResource {\n    /**\n     * Classifies if text violates OpenAI's Content Policy\n     */ create(body, options) {\n        return this._client.post(\"/moderations\", {\n            body,\n            ...options\n        });\n    }\n}\n(function(Moderations) {})(Moderations || (Moderations = {})); //# sourceMappingURL=moderations.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL21vZGVyYXRpb25zLm1qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLHFEQUFxRDtBQUNQO0FBQ3ZDLE1BQU1DLG9CQUFvQkQsd0RBQVdBO0lBQ3hDOztLQUVDLEdBQ0RFLE9BQU9DLElBQUksRUFBRUMsT0FBTyxFQUFFO1FBQ2xCLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNDLElBQUksQ0FBQyxnQkFBZ0I7WUFBRUg7WUFBTSxHQUFHQyxPQUFPO1FBQUM7SUFDaEU7QUFDSjtBQUNDLFVBQVVILFdBQVcsR0FDdEIsR0FBR0EsZUFBZ0JBLENBQUFBLGNBQWMsQ0FBQyxLQUNsQyx3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb3BlbmFpL3Jlc291cmNlcy9tb2RlcmF0aW9ucy5tanM/YWZlNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLlxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tICdvcGVuYWkvcmVzb3VyY2UnO1xuZXhwb3J0IGNsYXNzIE1vZGVyYXRpb25zIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAgIC8qKlxuICAgICAqIENsYXNzaWZpZXMgaWYgdGV4dCB2aW9sYXRlcyBPcGVuQUkncyBDb250ZW50IFBvbGljeVxuICAgICAqL1xuICAgIGNyZWF0ZShib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdCgnL21vZGVyYXRpb25zJywgeyBib2R5LCAuLi5vcHRpb25zIH0pO1xuICAgIH1cbn1cbihmdW5jdGlvbiAoTW9kZXJhdGlvbnMpIHtcbn0pKE1vZGVyYXRpb25zIHx8IChNb2RlcmF0aW9ucyA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tb2RlcmF0aW9ucy5tanMubWFwIl0sIm5hbWVzIjpbIkFQSVJlc291cmNlIiwiTW9kZXJhdGlvbnMiLCJjcmVhdGUiLCJib2R5Iiwib3B0aW9ucyIsIl9jbGllbnQiLCJwb3N0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/openai/resources/moderations.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/openai/resources/shared.mjs":
/*!**************************************************!*\
  !*** ./node_modules/openai/resources/shared.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// File generated from our OpenAPI spec by Stainless.\n //# sourceMappingURL=shared.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL3NoYXJlZC5tanMiLCJtYXBwaW5ncyI6IjtBQUFBLHFEQUFxRDtBQUMzQyxDQUNWLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vcGVuYWkvcmVzb3VyY2VzL3NoYXJlZC5tanM/OWNiNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLlxuZXhwb3J0IHt9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2hhcmVkLm1qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/openai/resources/shared.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/openai/streaming.mjs":
/*!*******************************************!*\
  !*** ./node_modules/openai/streaming.mjs ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Stream: () => (/* binding */ Stream)\n/* harmony export */ });\n/* harmony import */ var _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_shims/index.mjs */ \"(action-browser)/./node_modules/openai/_shims/index.mjs\");\n/* harmony import */ var _error_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/error */ \"(action-browser)/./node_modules/openai/error.mjs\");\n\n\n\nclass Stream {\n    constructor(iterator, controller){\n        this.iterator = iterator;\n        this.controller = controller;\n    }\n    static fromSSEResponse(response, controller) {\n        let consumed = false;\n        const decoder = new SSEDecoder();\n        async function* iterMessages() {\n            if (!response.body) {\n                controller.abort();\n                throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`Attempted to iterate over a response with no body`);\n            }\n            const lineDecoder = new LineDecoder();\n            const iter = readableStreamAsyncIterable(response.body);\n            for await (const chunk of iter){\n                for (const line of lineDecoder.decode(chunk)){\n                    const sse = decoder.decode(line);\n                    if (sse) yield sse;\n                }\n            }\n            for (const line of lineDecoder.flush()){\n                const sse = decoder.decode(line);\n                if (sse) yield sse;\n            }\n        }\n        async function* iterator() {\n            if (consumed) {\n                throw new Error(\"Cannot iterate over a consumed stream, use `.tee()` to split the stream.\");\n            }\n            consumed = true;\n            let done = false;\n            try {\n                for await (const sse of iterMessages()){\n                    if (done) continue;\n                    if (sse.data.startsWith(\"[DONE]\")) {\n                        done = true;\n                        continue;\n                    }\n                    if (sse.event === null) {\n                        let data;\n                        try {\n                            data = JSON.parse(sse.data);\n                        } catch (e) {\n                            console.error(`Could not parse message into JSON:`, sse.data);\n                            console.error(`From chunk:`, sse.raw);\n                            throw e;\n                        }\n                        if (data && data.error) {\n                            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.APIError(undefined, data.error, undefined, undefined);\n                        }\n                        yield data;\n                    }\n                }\n                done = true;\n            } catch (e) {\n                // If the user calls `stream.controller.abort()`, we should exit without throwing.\n                if (e instanceof Error && e.name === \"AbortError\") return;\n                throw e;\n            } finally{\n                // If the user `break`s, abort the ongoing request.\n                if (!done) controller.abort();\n            }\n        }\n        return new Stream(iterator, controller);\n    }\n    /**\n     * Generates a Stream from a newline-separated ReadableStream\n     * where each item is a JSON value.\n     */ static fromReadableStream(readableStream, controller) {\n        let consumed = false;\n        async function* iterLines() {\n            const lineDecoder = new LineDecoder();\n            const iter = readableStreamAsyncIterable(readableStream);\n            for await (const chunk of iter){\n                for (const line of lineDecoder.decode(chunk)){\n                    yield line;\n                }\n            }\n            for (const line of lineDecoder.flush()){\n                yield line;\n            }\n        }\n        async function* iterator() {\n            if (consumed) {\n                throw new Error(\"Cannot iterate over a consumed stream, use `.tee()` to split the stream.\");\n            }\n            consumed = true;\n            let done = false;\n            try {\n                for await (const line of iterLines()){\n                    if (done) continue;\n                    if (line) yield JSON.parse(line);\n                }\n                done = true;\n            } catch (e) {\n                // If the user calls `stream.controller.abort()`, we should exit without throwing.\n                if (e instanceof Error && e.name === \"AbortError\") return;\n                throw e;\n            } finally{\n                // If the user `break`s, abort the ongoing request.\n                if (!done) controller.abort();\n            }\n        }\n        return new Stream(iterator, controller);\n    }\n    [Symbol.asyncIterator]() {\n        return this.iterator();\n    }\n    /**\n     * Splits the stream into two streams which can be\n     * independently read from at different speeds.\n     */ tee() {\n        const left = [];\n        const right = [];\n        const iterator = this.iterator();\n        const teeIterator = (queue)=>{\n            return {\n                next: ()=>{\n                    if (queue.length === 0) {\n                        const result = iterator.next();\n                        left.push(result);\n                        right.push(result);\n                    }\n                    return queue.shift();\n                }\n            };\n        };\n        return [\n            new Stream(()=>teeIterator(left), this.controller),\n            new Stream(()=>teeIterator(right), this.controller)\n        ];\n    }\n    /**\n     * Converts this stream to a newline-separated ReadableStream of\n     * JSON stringified values in the stream\n     * which can be turned back into a Stream with `Stream.fromReadableStream()`.\n     */ toReadableStream() {\n        const self = this;\n        let iter;\n        const encoder = new TextEncoder();\n        return new _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.ReadableStream({\n            async start () {\n                iter = self[Symbol.asyncIterator]();\n            },\n            async pull (ctrl) {\n                try {\n                    const { value, done } = await iter.next();\n                    if (done) return ctrl.close();\n                    const bytes = encoder.encode(JSON.stringify(value) + \"\\n\");\n                    ctrl.enqueue(bytes);\n                } catch (err) {\n                    ctrl.error(err);\n                }\n            },\n            async cancel () {\n                await iter.return?.();\n            }\n        });\n    }\n}\nclass SSEDecoder {\n    constructor(){\n        this.event = null;\n        this.data = [];\n        this.chunks = [];\n    }\n    decode(line) {\n        if (line.endsWith(\"\\r\")) {\n            line = line.substring(0, line.length - 1);\n        }\n        if (!line) {\n            // empty line and we didn't previously encounter any messages\n            if (!this.event && !this.data.length) return null;\n            const sse = {\n                event: this.event,\n                data: this.data.join(\"\\n\"),\n                raw: this.chunks\n            };\n            this.event = null;\n            this.data = [];\n            this.chunks = [];\n            return sse;\n        }\n        this.chunks.push(line);\n        if (line.startsWith(\":\")) {\n            return null;\n        }\n        let [fieldname, _, value] = partition(line, \":\");\n        if (value.startsWith(\" \")) {\n            value = value.substring(1);\n        }\n        if (fieldname === \"event\") {\n            this.event = value;\n        } else if (fieldname === \"data\") {\n            this.data.push(value);\n        }\n        return null;\n    }\n}\n/**\n * A re-implementation of httpx's `LineDecoder` in Python that handles incrementally\n * reading lines from text.\n *\n * https://github.com/encode/httpx/blob/920333ea98118e9cf617f246905d7b202510941c/httpx/_decoders.py#L258\n */ class LineDecoder {\n    constructor(){\n        this.buffer = [];\n        this.trailingCR = false;\n    }\n    decode(chunk) {\n        let text = this.decodeText(chunk);\n        if (this.trailingCR) {\n            text = \"\\r\" + text;\n            this.trailingCR = false;\n        }\n        if (text.endsWith(\"\\r\")) {\n            this.trailingCR = true;\n            text = text.slice(0, -1);\n        }\n        if (!text) {\n            return [];\n        }\n        const trailingNewline = LineDecoder.NEWLINE_CHARS.has(text[text.length - 1] || \"\");\n        let lines = text.split(LineDecoder.NEWLINE_REGEXP);\n        if (lines.length === 1 && !trailingNewline) {\n            this.buffer.push(lines[0]);\n            return [];\n        }\n        if (this.buffer.length > 0) {\n            lines = [\n                this.buffer.join(\"\") + lines[0],\n                ...lines.slice(1)\n            ];\n            this.buffer = [];\n        }\n        if (!trailingNewline) {\n            this.buffer = [\n                lines.pop() || \"\"\n            ];\n        }\n        return lines;\n    }\n    decodeText(bytes) {\n        if (bytes == null) return \"\";\n        if (typeof bytes === \"string\") return bytes;\n        // Node:\n        if (typeof Buffer !== \"undefined\") {\n            if (bytes instanceof Buffer) {\n                return bytes.toString();\n            }\n            if (bytes instanceof Uint8Array) {\n                return Buffer.from(bytes).toString();\n            }\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`Unexpected: received non-Uint8Array (${bytes.constructor.name}) stream chunk in an environment with a global \"Buffer\" defined, which this library assumes to be Node. Please report this error.`);\n        }\n        // Browser\n        if (typeof TextDecoder !== \"undefined\") {\n            if (bytes instanceof Uint8Array || bytes instanceof ArrayBuffer) {\n                this.textDecoder ?? (this.textDecoder = new TextDecoder(\"utf8\"));\n                return this.textDecoder.decode(bytes);\n            }\n            throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`Unexpected: received non-Uint8Array/ArrayBuffer (${bytes.constructor.name}) in a web platform. Please report this error.`);\n        }\n        throw new _error_mjs__WEBPACK_IMPORTED_MODULE_1__.OpenAIError(`Unexpected: neither Buffer nor TextDecoder are available as globals. Please report this error.`);\n    }\n    flush() {\n        if (!this.buffer.length && !this.trailingCR) {\n            return [];\n        }\n        const lines = [\n            this.buffer.join(\"\")\n        ];\n        this.buffer = [];\n        this.trailingCR = false;\n        return lines;\n    }\n}\n// prettier-ignore\nLineDecoder.NEWLINE_CHARS = new Set([\n    \"\\n\",\n    \"\\r\",\n    \"\\v\",\n    \"\\f\",\n    \"\\x1c\",\n    \"\\x1d\",\n    \"\\x1e\",\n    \"\\x85\",\n    \"\\u2028\",\n    \"\\u2029\"\n]);\nLineDecoder.NEWLINE_REGEXP = /\\r\\n|[\\n\\r\\x0b\\x0c\\x1c\\x1d\\x1e\\x85\\u2028\\u2029]/g;\nfunction partition(str, delimiter) {\n    const index = str.indexOf(delimiter);\n    if (index !== -1) {\n        return [\n            str.substring(0, index),\n            delimiter,\n            str.substring(index + delimiter.length)\n        ];\n    }\n    return [\n        str,\n        \"\",\n        \"\"\n    ];\n}\n/**\n * Most browsers don't yet have async iterable support for ReadableStream,\n * and Node has a very different way of reading bytes from its \"ReadableStream\".\n *\n * This polyfill was pulled from https://github.com/MattiasBuelens/web-streams-polyfill/pull/122#issuecomment-1627354490\n */ function readableStreamAsyncIterable(stream) {\n    if (stream[Symbol.asyncIterator]) return stream;\n    const reader = stream.getReader();\n    return {\n        async next () {\n            try {\n                const result = await reader.read();\n                if (result?.done) reader.releaseLock(); // release lock when stream becomes closed\n                return result;\n            } catch (e) {\n                reader.releaseLock(); // release lock when stream becomes errored\n                throw e;\n            }\n        },\n        async return () {\n            const cancelPromise = reader.cancel();\n            reader.releaseLock();\n            await cancelPromise;\n            return {\n                done: true,\n                value: undefined\n            };\n        },\n        [Symbol.asyncIterator] () {\n            return this;\n        }\n    };\n} //# sourceMappingURL=streaming.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvc3RyZWFtaW5nLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBb0Q7QUFDVjtBQUNGO0FBQ2pDLE1BQU1HO0lBQ1RDLFlBQVlDLFFBQVEsRUFBRUMsVUFBVSxDQUFFO1FBQzlCLElBQUksQ0FBQ0QsUUFBUSxHQUFHQTtRQUNoQixJQUFJLENBQUNDLFVBQVUsR0FBR0E7SUFDdEI7SUFDQSxPQUFPQyxnQkFBZ0JDLFFBQVEsRUFBRUYsVUFBVSxFQUFFO1FBQ3pDLElBQUlHLFdBQVc7UUFDZixNQUFNQyxVQUFVLElBQUlDO1FBQ3BCLGdCQUFnQkM7WUFDWixJQUFJLENBQUNKLFNBQVNLLElBQUksRUFBRTtnQkFDaEJQLFdBQVdRLEtBQUs7Z0JBQ2hCLE1BQU0sSUFBSWIsbURBQVdBLENBQUMsQ0FBQyxpREFBaUQsQ0FBQztZQUM3RTtZQUNBLE1BQU1jLGNBQWMsSUFBSUM7WUFDeEIsTUFBTUMsT0FBT0MsNEJBQTRCVixTQUFTSyxJQUFJO1lBQ3RELFdBQVcsTUFBTU0sU0FBU0YsS0FBTTtnQkFDNUIsS0FBSyxNQUFNRyxRQUFRTCxZQUFZTSxNQUFNLENBQUNGLE9BQVE7b0JBQzFDLE1BQU1HLE1BQU1aLFFBQVFXLE1BQU0sQ0FBQ0Q7b0JBQzNCLElBQUlFLEtBQ0EsTUFBTUE7Z0JBQ2Q7WUFDSjtZQUNBLEtBQUssTUFBTUYsUUFBUUwsWUFBWVEsS0FBSyxHQUFJO2dCQUNwQyxNQUFNRCxNQUFNWixRQUFRVyxNQUFNLENBQUNEO2dCQUMzQixJQUFJRSxLQUNBLE1BQU1BO1lBQ2Q7UUFDSjtRQUNBLGdCQUFnQmpCO1lBQ1osSUFBSUksVUFBVTtnQkFDVixNQUFNLElBQUllLE1BQU07WUFDcEI7WUFDQWYsV0FBVztZQUNYLElBQUlnQixPQUFPO1lBQ1gsSUFBSTtnQkFDQSxXQUFXLE1BQU1ILE9BQU9WLGVBQWdCO29CQUNwQyxJQUFJYSxNQUNBO29CQUNKLElBQUlILElBQUlJLElBQUksQ0FBQ0MsVUFBVSxDQUFDLFdBQVc7d0JBQy9CRixPQUFPO3dCQUNQO29CQUNKO29CQUNBLElBQUlILElBQUlNLEtBQUssS0FBSyxNQUFNO3dCQUNwQixJQUFJRjt3QkFDSixJQUFJOzRCQUNBQSxPQUFPRyxLQUFLQyxLQUFLLENBQUNSLElBQUlJLElBQUk7d0JBQzlCLEVBQ0EsT0FBT0ssR0FBRzs0QkFDTkMsUUFBUUMsS0FBSyxDQUFDLENBQUMsa0NBQWtDLENBQUMsRUFBRVgsSUFBSUksSUFBSTs0QkFDNURNLFFBQVFDLEtBQUssQ0FBQyxDQUFDLFdBQVcsQ0FBQyxFQUFFWCxJQUFJWSxHQUFHOzRCQUNwQyxNQUFNSDt3QkFDVjt3QkFDQSxJQUFJTCxRQUFRQSxLQUFLTyxLQUFLLEVBQUU7NEJBQ3BCLE1BQU0sSUFBSS9CLGdEQUFRQSxDQUFDaUMsV0FBV1QsS0FBS08sS0FBSyxFQUFFRSxXQUFXQTt3QkFDekQ7d0JBQ0EsTUFBTVQ7b0JBQ1Y7Z0JBQ0o7Z0JBQ0FELE9BQU87WUFDWCxFQUNBLE9BQU9NLEdBQUc7Z0JBQ04sa0ZBQWtGO2dCQUNsRixJQUFJQSxhQUFhUCxTQUFTTyxFQUFFSyxJQUFJLEtBQUssY0FDakM7Z0JBQ0osTUFBTUw7WUFDVixTQUNRO2dCQUNKLG1EQUFtRDtnQkFDbkQsSUFBSSxDQUFDTixNQUNEbkIsV0FBV1EsS0FBSztZQUN4QjtRQUNKO1FBQ0EsT0FBTyxJQUFJWCxPQUFPRSxVQUFVQztJQUNoQztJQUNBOzs7S0FHQyxHQUNELE9BQU8rQixtQkFBbUJDLGNBQWMsRUFBRWhDLFVBQVUsRUFBRTtRQUNsRCxJQUFJRyxXQUFXO1FBQ2YsZ0JBQWdCOEI7WUFDWixNQUFNeEIsY0FBYyxJQUFJQztZQUN4QixNQUFNQyxPQUFPQyw0QkFBNEJvQjtZQUN6QyxXQUFXLE1BQU1uQixTQUFTRixLQUFNO2dCQUM1QixLQUFLLE1BQU1HLFFBQVFMLFlBQVlNLE1BQU0sQ0FBQ0YsT0FBUTtvQkFDMUMsTUFBTUM7Z0JBQ1Y7WUFDSjtZQUNBLEtBQUssTUFBTUEsUUFBUUwsWUFBWVEsS0FBSyxHQUFJO2dCQUNwQyxNQUFNSDtZQUNWO1FBQ0o7UUFDQSxnQkFBZ0JmO1lBQ1osSUFBSUksVUFBVTtnQkFDVixNQUFNLElBQUllLE1BQU07WUFDcEI7WUFDQWYsV0FBVztZQUNYLElBQUlnQixPQUFPO1lBQ1gsSUFBSTtnQkFDQSxXQUFXLE1BQU1MLFFBQVFtQixZQUFhO29CQUNsQyxJQUFJZCxNQUNBO29CQUNKLElBQUlMLE1BQ0EsTUFBTVMsS0FBS0MsS0FBSyxDQUFDVjtnQkFDekI7Z0JBQ0FLLE9BQU87WUFDWCxFQUNBLE9BQU9NLEdBQUc7Z0JBQ04sa0ZBQWtGO2dCQUNsRixJQUFJQSxhQUFhUCxTQUFTTyxFQUFFSyxJQUFJLEtBQUssY0FDakM7Z0JBQ0osTUFBTUw7WUFDVixTQUNRO2dCQUNKLG1EQUFtRDtnQkFDbkQsSUFBSSxDQUFDTixNQUNEbkIsV0FBV1EsS0FBSztZQUN4QjtRQUNKO1FBQ0EsT0FBTyxJQUFJWCxPQUFPRSxVQUFVQztJQUNoQztJQUNBLENBQUNrQyxPQUFPQyxhQUFhLENBQUMsR0FBRztRQUNyQixPQUFPLElBQUksQ0FBQ3BDLFFBQVE7SUFDeEI7SUFDQTs7O0tBR0MsR0FDRHFDLE1BQU07UUFDRixNQUFNQyxPQUFPLEVBQUU7UUFDZixNQUFNQyxRQUFRLEVBQUU7UUFDaEIsTUFBTXZDLFdBQVcsSUFBSSxDQUFDQSxRQUFRO1FBQzlCLE1BQU13QyxjQUFjLENBQUNDO1lBQ2pCLE9BQU87Z0JBQ0hDLE1BQU07b0JBQ0YsSUFBSUQsTUFBTUUsTUFBTSxLQUFLLEdBQUc7d0JBQ3BCLE1BQU1DLFNBQVM1QyxTQUFTMEMsSUFBSTt3QkFDNUJKLEtBQUtPLElBQUksQ0FBQ0Q7d0JBQ1ZMLE1BQU1NLElBQUksQ0FBQ0Q7b0JBQ2Y7b0JBQ0EsT0FBT0gsTUFBTUssS0FBSztnQkFDdEI7WUFDSjtRQUNKO1FBQ0EsT0FBTztZQUNILElBQUloRCxPQUFPLElBQU0wQyxZQUFZRixPQUFPLElBQUksQ0FBQ3JDLFVBQVU7WUFDbkQsSUFBSUgsT0FBTyxJQUFNMEMsWUFBWUQsUUFBUSxJQUFJLENBQUN0QyxVQUFVO1NBQ3ZEO0lBQ0w7SUFDQTs7OztLQUlDLEdBQ0Q4QyxtQkFBbUI7UUFDZixNQUFNQyxPQUFPLElBQUk7UUFDakIsSUFBSXBDO1FBQ0osTUFBTXFDLFVBQVUsSUFBSUM7UUFDcEIsT0FBTyxJQUFJdkQsNERBQWNBLENBQUM7WUFDdEIsTUFBTXdEO2dCQUNGdkMsT0FBT29DLElBQUksQ0FBQ2IsT0FBT0MsYUFBYSxDQUFDO1lBQ3JDO1lBQ0EsTUFBTWdCLE1BQUtDLElBQUk7Z0JBQ1gsSUFBSTtvQkFDQSxNQUFNLEVBQUVDLEtBQUssRUFBRWxDLElBQUksRUFBRSxHQUFHLE1BQU1SLEtBQUs4QixJQUFJO29CQUN2QyxJQUFJdEIsTUFDQSxPQUFPaUMsS0FBS0UsS0FBSztvQkFDckIsTUFBTUMsUUFBUVAsUUFBUVEsTUFBTSxDQUFDakMsS0FBS2tDLFNBQVMsQ0FBQ0osU0FBUztvQkFDckRELEtBQUtNLE9BQU8sQ0FBQ0g7Z0JBQ2pCLEVBQ0EsT0FBT0ksS0FBSztvQkFDUlAsS0FBS3pCLEtBQUssQ0FBQ2dDO2dCQUNmO1lBQ0o7WUFDQSxNQUFNQztnQkFDRixNQUFNakQsS0FBS2tELE1BQU07WUFDckI7UUFDSjtJQUNKO0FBQ0o7QUFDQSxNQUFNeEQ7SUFDRlAsYUFBYztRQUNWLElBQUksQ0FBQ3dCLEtBQUssR0FBRztRQUNiLElBQUksQ0FBQ0YsSUFBSSxHQUFHLEVBQUU7UUFDZCxJQUFJLENBQUMwQyxNQUFNLEdBQUcsRUFBRTtJQUNwQjtJQUNBL0MsT0FBT0QsSUFBSSxFQUFFO1FBQ1QsSUFBSUEsS0FBS2lELFFBQVEsQ0FBQyxPQUFPO1lBQ3JCakQsT0FBT0EsS0FBS2tELFNBQVMsQ0FBQyxHQUFHbEQsS0FBSzRCLE1BQU0sR0FBRztRQUMzQztRQUNBLElBQUksQ0FBQzVCLE1BQU07WUFDUCw2REFBNkQ7WUFDN0QsSUFBSSxDQUFDLElBQUksQ0FBQ1EsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDRixJQUFJLENBQUNzQixNQUFNLEVBQ2hDLE9BQU87WUFDWCxNQUFNMUIsTUFBTTtnQkFDUk0sT0FBTyxJQUFJLENBQUNBLEtBQUs7Z0JBQ2pCRixNQUFNLElBQUksQ0FBQ0EsSUFBSSxDQUFDNkMsSUFBSSxDQUFDO2dCQUNyQnJDLEtBQUssSUFBSSxDQUFDa0MsTUFBTTtZQUNwQjtZQUNBLElBQUksQ0FBQ3hDLEtBQUssR0FBRztZQUNiLElBQUksQ0FBQ0YsSUFBSSxHQUFHLEVBQUU7WUFDZCxJQUFJLENBQUMwQyxNQUFNLEdBQUcsRUFBRTtZQUNoQixPQUFPOUM7UUFDWDtRQUNBLElBQUksQ0FBQzhDLE1BQU0sQ0FBQ2xCLElBQUksQ0FBQzlCO1FBQ2pCLElBQUlBLEtBQUtPLFVBQVUsQ0FBQyxNQUFNO1lBQ3RCLE9BQU87UUFDWDtRQUNBLElBQUksQ0FBQzZDLFdBQVdDLEdBQUdkLE1BQU0sR0FBR2UsVUFBVXRELE1BQU07UUFDNUMsSUFBSXVDLE1BQU1oQyxVQUFVLENBQUMsTUFBTTtZQUN2QmdDLFFBQVFBLE1BQU1XLFNBQVMsQ0FBQztRQUM1QjtRQUNBLElBQUlFLGNBQWMsU0FBUztZQUN2QixJQUFJLENBQUM1QyxLQUFLLEdBQUcrQjtRQUNqQixPQUNLLElBQUlhLGNBQWMsUUFBUTtZQUMzQixJQUFJLENBQUM5QyxJQUFJLENBQUN3QixJQUFJLENBQUNTO1FBQ25CO1FBQ0EsT0FBTztJQUNYO0FBQ0o7QUFDQTs7Ozs7Q0FLQyxHQUNELE1BQU0zQztJQUNGWixhQUFjO1FBQ1YsSUFBSSxDQUFDdUUsTUFBTSxHQUFHLEVBQUU7UUFDaEIsSUFBSSxDQUFDQyxVQUFVLEdBQUc7SUFDdEI7SUFDQXZELE9BQU9GLEtBQUssRUFBRTtRQUNWLElBQUkwRCxPQUFPLElBQUksQ0FBQ0MsVUFBVSxDQUFDM0Q7UUFDM0IsSUFBSSxJQUFJLENBQUN5RCxVQUFVLEVBQUU7WUFDakJDLE9BQU8sT0FBT0E7WUFDZCxJQUFJLENBQUNELFVBQVUsR0FBRztRQUN0QjtRQUNBLElBQUlDLEtBQUtSLFFBQVEsQ0FBQyxPQUFPO1lBQ3JCLElBQUksQ0FBQ08sVUFBVSxHQUFHO1lBQ2xCQyxPQUFPQSxLQUFLRSxLQUFLLENBQUMsR0FBRyxDQUFDO1FBQzFCO1FBQ0EsSUFBSSxDQUFDRixNQUFNO1lBQ1AsT0FBTyxFQUFFO1FBQ2I7UUFDQSxNQUFNRyxrQkFBa0JoRSxZQUFZaUUsYUFBYSxDQUFDQyxHQUFHLENBQUNMLElBQUksQ0FBQ0EsS0FBSzdCLE1BQU0sR0FBRyxFQUFFLElBQUk7UUFDL0UsSUFBSW1DLFFBQVFOLEtBQUtPLEtBQUssQ0FBQ3BFLFlBQVlxRSxjQUFjO1FBQ2pELElBQUlGLE1BQU1uQyxNQUFNLEtBQUssS0FBSyxDQUFDZ0MsaUJBQWlCO1lBQ3hDLElBQUksQ0FBQ0wsTUFBTSxDQUFDekIsSUFBSSxDQUFDaUMsS0FBSyxDQUFDLEVBQUU7WUFDekIsT0FBTyxFQUFFO1FBQ2I7UUFDQSxJQUFJLElBQUksQ0FBQ1IsTUFBTSxDQUFDM0IsTUFBTSxHQUFHLEdBQUc7WUFDeEJtQyxRQUFRO2dCQUFDLElBQUksQ0FBQ1IsTUFBTSxDQUFDSixJQUFJLENBQUMsTUFBTVksS0FBSyxDQUFDLEVBQUU7bUJBQUtBLE1BQU1KLEtBQUssQ0FBQzthQUFHO1lBQzVELElBQUksQ0FBQ0osTUFBTSxHQUFHLEVBQUU7UUFDcEI7UUFDQSxJQUFJLENBQUNLLGlCQUFpQjtZQUNsQixJQUFJLENBQUNMLE1BQU0sR0FBRztnQkFBQ1EsTUFBTUcsR0FBRyxNQUFNO2FBQUc7UUFDckM7UUFDQSxPQUFPSDtJQUNYO0lBQ0FMLFdBQVdqQixLQUFLLEVBQUU7UUFDZCxJQUFJQSxTQUFTLE1BQ1QsT0FBTztRQUNYLElBQUksT0FBT0EsVUFBVSxVQUNqQixPQUFPQTtRQUNYLFFBQVE7UUFDUixJQUFJLE9BQU8wQixXQUFXLGFBQWE7WUFDL0IsSUFBSTFCLGlCQUFpQjBCLFFBQVE7Z0JBQ3pCLE9BQU8xQixNQUFNMkIsUUFBUTtZQUN6QjtZQUNBLElBQUkzQixpQkFBaUI0QixZQUFZO2dCQUM3QixPQUFPRixPQUFPRyxJQUFJLENBQUM3QixPQUFPMkIsUUFBUTtZQUN0QztZQUNBLE1BQU0sSUFBSXZGLG1EQUFXQSxDQUFDLENBQUMscUNBQXFDLEVBQUU0RCxNQUFNekQsV0FBVyxDQUFDZ0MsSUFBSSxDQUFDLGlJQUFpSSxDQUFDO1FBQzNOO1FBQ0EsVUFBVTtRQUNWLElBQUksT0FBT3VELGdCQUFnQixhQUFhO1lBQ3BDLElBQUk5QixpQkFBaUI0QixjQUFjNUIsaUJBQWlCK0IsYUFBYTtnQkFDN0QsSUFBSSxDQUFDQyxXQUFXLElBQUssS0FBSSxDQUFDQSxXQUFXLEdBQUcsSUFBSUYsWUFBWSxPQUFNO2dCQUM5RCxPQUFPLElBQUksQ0FBQ0UsV0FBVyxDQUFDeEUsTUFBTSxDQUFDd0M7WUFDbkM7WUFDQSxNQUFNLElBQUk1RCxtREFBV0EsQ0FBQyxDQUFDLGlEQUFpRCxFQUFFNEQsTUFBTXpELFdBQVcsQ0FBQ2dDLElBQUksQ0FBQyw4Q0FBOEMsQ0FBQztRQUNwSjtRQUNBLE1BQU0sSUFBSW5DLG1EQUFXQSxDQUFDLENBQUMsOEZBQThGLENBQUM7SUFDMUg7SUFDQXNCLFFBQVE7UUFDSixJQUFJLENBQUMsSUFBSSxDQUFDb0QsTUFBTSxDQUFDM0IsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDNEIsVUFBVSxFQUFFO1lBQ3pDLE9BQU8sRUFBRTtRQUNiO1FBQ0EsTUFBTU8sUUFBUTtZQUFDLElBQUksQ0FBQ1IsTUFBTSxDQUFDSixJQUFJLENBQUM7U0FBSTtRQUNwQyxJQUFJLENBQUNJLE1BQU0sR0FBRyxFQUFFO1FBQ2hCLElBQUksQ0FBQ0MsVUFBVSxHQUFHO1FBQ2xCLE9BQU9PO0lBQ1g7QUFDSjtBQUNBLGtCQUFrQjtBQUNsQm5FLFlBQVlpRSxhQUFhLEdBQUcsSUFBSWEsSUFBSTtJQUFDO0lBQU07SUFBTTtJQUFRO0lBQVE7SUFBUTtJQUFRO0lBQVE7SUFBUTtJQUFVO0NBQVM7QUFDcEg5RSxZQUFZcUUsY0FBYyxHQUFHO0FBQzdCLFNBQVNYLFVBQVVxQixHQUFHLEVBQUVDLFNBQVM7SUFDN0IsTUFBTUMsUUFBUUYsSUFBSUcsT0FBTyxDQUFDRjtJQUMxQixJQUFJQyxVQUFVLENBQUMsR0FBRztRQUNkLE9BQU87WUFBQ0YsSUFBSXpCLFNBQVMsQ0FBQyxHQUFHMkI7WUFBUUQ7WUFBV0QsSUFBSXpCLFNBQVMsQ0FBQzJCLFFBQVFELFVBQVVoRCxNQUFNO1NBQUU7SUFDeEY7SUFDQSxPQUFPO1FBQUMrQztRQUFLO1FBQUk7S0FBRztBQUN4QjtBQUNBOzs7OztDQUtDLEdBQ0QsU0FBUzdFLDRCQUE0QmlGLE1BQU07SUFDdkMsSUFBSUEsTUFBTSxDQUFDM0QsT0FBT0MsYUFBYSxDQUFDLEVBQzVCLE9BQU8wRDtJQUNYLE1BQU1DLFNBQVNELE9BQU9FLFNBQVM7SUFDL0IsT0FBTztRQUNILE1BQU10RDtZQUNGLElBQUk7Z0JBQ0EsTUFBTUUsU0FBUyxNQUFNbUQsT0FBT0UsSUFBSTtnQkFDaEMsSUFBSXJELFFBQVF4QixNQUNSMkUsT0FBT0csV0FBVyxJQUFJLDBDQUEwQztnQkFDcEUsT0FBT3REO1lBQ1gsRUFDQSxPQUFPbEIsR0FBRztnQkFDTnFFLE9BQU9HLFdBQVcsSUFBSSwyQ0FBMkM7Z0JBQ2pFLE1BQU14RTtZQUNWO1FBQ0o7UUFDQSxNQUFNb0M7WUFDRixNQUFNcUMsZ0JBQWdCSixPQUFPbEMsTUFBTTtZQUNuQ2tDLE9BQU9HLFdBQVc7WUFDbEIsTUFBTUM7WUFDTixPQUFPO2dCQUFFL0UsTUFBTTtnQkFBTWtDLE9BQU94QjtZQUFVO1FBQzFDO1FBQ0EsQ0FBQ0ssT0FBT0MsYUFBYSxDQUFDO1lBQ2xCLE9BQU8sSUFBSTtRQUNmO0lBQ0o7QUFDSixFQUNBLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vcGVuYWkvc3RyZWFtaW5nLm1qcz9hNzc5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlYWRhYmxlU3RyZWFtIH0gZnJvbSBcIi4vX3NoaW1zL2luZGV4Lm1qc1wiO1xuaW1wb3J0IHsgT3BlbkFJRXJyb3IgfSBmcm9tIFwiLi9lcnJvci5tanNcIjtcbmltcG9ydCB7IEFQSUVycm9yIH0gZnJvbSAnb3BlbmFpL2Vycm9yJztcbmV4cG9ydCBjbGFzcyBTdHJlYW0ge1xuICAgIGNvbnN0cnVjdG9yKGl0ZXJhdG9yLCBjb250cm9sbGVyKSB7XG4gICAgICAgIHRoaXMuaXRlcmF0b3IgPSBpdGVyYXRvcjtcbiAgICAgICAgdGhpcy5jb250cm9sbGVyID0gY29udHJvbGxlcjtcbiAgICB9XG4gICAgc3RhdGljIGZyb21TU0VSZXNwb25zZShyZXNwb25zZSwgY29udHJvbGxlcikge1xuICAgICAgICBsZXQgY29uc3VtZWQgPSBmYWxzZTtcbiAgICAgICAgY29uc3QgZGVjb2RlciA9IG5ldyBTU0VEZWNvZGVyKCk7XG4gICAgICAgIGFzeW5jIGZ1bmN0aW9uKiBpdGVyTWVzc2FnZXMoKSB7XG4gICAgICAgICAgICBpZiAoIXJlc3BvbnNlLmJvZHkpIHtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLmFib3J0KCk7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IE9wZW5BSUVycm9yKGBBdHRlbXB0ZWQgdG8gaXRlcmF0ZSBvdmVyIGEgcmVzcG9uc2Ugd2l0aCBubyBib2R5YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsaW5lRGVjb2RlciA9IG5ldyBMaW5lRGVjb2RlcigpO1xuICAgICAgICAgICAgY29uc3QgaXRlciA9IHJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYWJsZShyZXNwb25zZS5ib2R5KTtcbiAgICAgICAgICAgIGZvciBhd2FpdCAoY29uc3QgY2h1bmsgb2YgaXRlcikge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbGluZSBvZiBsaW5lRGVjb2Rlci5kZWNvZGUoY2h1bmspKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNzZSA9IGRlY29kZXIuZGVjb2RlKGxpbmUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3NlKVxuICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgc3NlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoY29uc3QgbGluZSBvZiBsaW5lRGVjb2Rlci5mbHVzaCgpKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3NlID0gZGVjb2Rlci5kZWNvZGUobGluZSk7XG4gICAgICAgICAgICAgICAgaWYgKHNzZSlcbiAgICAgICAgICAgICAgICAgICAgeWllbGQgc3NlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGFzeW5jIGZ1bmN0aW9uKiBpdGVyYXRvcigpIHtcbiAgICAgICAgICAgIGlmIChjb25zdW1lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGl0ZXJhdGUgb3ZlciBhIGNvbnN1bWVkIHN0cmVhbSwgdXNlIGAudGVlKClgIHRvIHNwbGl0IHRoZSBzdHJlYW0uJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdW1lZCA9IHRydWU7XG4gICAgICAgICAgICBsZXQgZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3IgYXdhaXQgKGNvbnN0IHNzZSBvZiBpdGVyTWVzc2FnZXMoKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZG9uZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3NlLmRhdGEuc3RhcnRzV2l0aCgnW0RPTkVdJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNzZS5ldmVudCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKHNzZS5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgQ291bGQgbm90IHBhcnNlIG1lc3NhZ2UgaW50byBKU09OOmAsIHNzZS5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBGcm9tIGNodW5rOmAsIHNzZS5yYXcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEFQSUVycm9yKHVuZGVmaW5lZCwgZGF0YS5lcnJvciwgdW5kZWZpbmVkLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIHVzZXIgY2FsbHMgYHN0cmVhbS5jb250cm9sbGVyLmFib3J0KClgLCB3ZSBzaG91bGQgZXhpdCB3aXRob3V0IHRocm93aW5nLlxuICAgICAgICAgICAgICAgIGlmIChlIGluc3RhbmNlb2YgRXJyb3IgJiYgZS5uYW1lID09PSAnQWJvcnRFcnJvcicpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIHVzZXIgYGJyZWFrYHMsIGFib3J0IHRoZSBvbmdvaW5nIHJlcXVlc3QuXG4gICAgICAgICAgICAgICAgaWYgKCFkb25lKVxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyLmFib3J0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBTdHJlYW0oaXRlcmF0b3IsIGNvbnRyb2xsZXIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYSBTdHJlYW0gZnJvbSBhIG5ld2xpbmUtc2VwYXJhdGVkIFJlYWRhYmxlU3RyZWFtXG4gICAgICogd2hlcmUgZWFjaCBpdGVtIGlzIGEgSlNPTiB2YWx1ZS5cbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbVJlYWRhYmxlU3RyZWFtKHJlYWRhYmxlU3RyZWFtLCBjb250cm9sbGVyKSB7XG4gICAgICAgIGxldCBjb25zdW1lZCA9IGZhbHNlO1xuICAgICAgICBhc3luYyBmdW5jdGlvbiogaXRlckxpbmVzKCkge1xuICAgICAgICAgICAgY29uc3QgbGluZURlY29kZXIgPSBuZXcgTGluZURlY29kZXIoKTtcbiAgICAgICAgICAgIGNvbnN0IGl0ZXIgPSByZWFkYWJsZVN0cmVhbUFzeW5jSXRlcmFibGUocmVhZGFibGVTdHJlYW0pO1xuICAgICAgICAgICAgZm9yIGF3YWl0IChjb25zdCBjaHVuayBvZiBpdGVyKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBsaW5lIG9mIGxpbmVEZWNvZGVyLmRlY29kZShjaHVuaykpIHtcbiAgICAgICAgICAgICAgICAgICAgeWllbGQgbGluZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGxpbmUgb2YgbGluZURlY29kZXIuZmx1c2goKSkge1xuICAgICAgICAgICAgICAgIHlpZWxkIGxpbmU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYXN5bmMgZnVuY3Rpb24qIGl0ZXJhdG9yKCkge1xuICAgICAgICAgICAgaWYgKGNvbnN1bWVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgaXRlcmF0ZSBvdmVyIGEgY29uc3VtZWQgc3RyZWFtLCB1c2UgYC50ZWUoKWAgdG8gc3BsaXQgdGhlIHN0cmVhbS4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN1bWVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGxldCBkb25lID0gZmFsc2U7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvciBhd2FpdCAoY29uc3QgbGluZSBvZiBpdGVyTGluZXMoKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZG9uZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAobGluZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkIEpTT04ucGFyc2UobGluZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgdXNlciBjYWxscyBgc3RyZWFtLmNvbnRyb2xsZXIuYWJvcnQoKWAsIHdlIHNob3VsZCBleGl0IHdpdGhvdXQgdGhyb3dpbmcuXG4gICAgICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBFcnJvciAmJiBlLm5hbWUgPT09ICdBYm9ydEVycm9yJylcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgdXNlciBgYnJlYWtgcywgYWJvcnQgdGhlIG9uZ29pbmcgcmVxdWVzdC5cbiAgICAgICAgICAgICAgICBpZiAoIWRvbmUpXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFN0cmVhbShpdGVyYXRvciwgY29udHJvbGxlcik7XG4gICAgfVxuICAgIFtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLml0ZXJhdG9yKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNwbGl0cyB0aGUgc3RyZWFtIGludG8gdHdvIHN0cmVhbXMgd2hpY2ggY2FuIGJlXG4gICAgICogaW5kZXBlbmRlbnRseSByZWFkIGZyb20gYXQgZGlmZmVyZW50IHNwZWVkcy5cbiAgICAgKi9cbiAgICB0ZWUoKSB7XG4gICAgICAgIGNvbnN0IGxlZnQgPSBbXTtcbiAgICAgICAgY29uc3QgcmlnaHQgPSBbXTtcbiAgICAgICAgY29uc3QgaXRlcmF0b3IgPSB0aGlzLml0ZXJhdG9yKCk7XG4gICAgICAgIGNvbnN0IHRlZUl0ZXJhdG9yID0gKHF1ZXVlKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG5leHQ6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdC5wdXNoKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByaWdodC5wdXNoKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHF1ZXVlLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBuZXcgU3RyZWFtKCgpID0+IHRlZUl0ZXJhdG9yKGxlZnQpLCB0aGlzLmNvbnRyb2xsZXIpLFxuICAgICAgICAgICAgbmV3IFN0cmVhbSgoKSA9PiB0ZWVJdGVyYXRvcihyaWdodCksIHRoaXMuY29udHJvbGxlciksXG4gICAgICAgIF07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoaXMgc3RyZWFtIHRvIGEgbmV3bGluZS1zZXBhcmF0ZWQgUmVhZGFibGVTdHJlYW0gb2ZcbiAgICAgKiBKU09OIHN0cmluZ2lmaWVkIHZhbHVlcyBpbiB0aGUgc3RyZWFtXG4gICAgICogd2hpY2ggY2FuIGJlIHR1cm5lZCBiYWNrIGludG8gYSBTdHJlYW0gd2l0aCBgU3RyZWFtLmZyb21SZWFkYWJsZVN0cmVhbSgpYC5cbiAgICAgKi9cbiAgICB0b1JlYWRhYmxlU3RyZWFtKCkge1xuICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICAgICAgbGV0IGl0ZXI7XG4gICAgICAgIGNvbnN0IGVuY29kZXIgPSBuZXcgVGV4dEVuY29kZXIoKTtcbiAgICAgICAgcmV0dXJuIG5ldyBSZWFkYWJsZVN0cmVhbSh7XG4gICAgICAgICAgICBhc3luYyBzdGFydCgpIHtcbiAgICAgICAgICAgICAgICBpdGVyID0gc2VsZltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhc3luYyBwdWxsKGN0cmwpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IHZhbHVlLCBkb25lIH0gPSBhd2FpdCBpdGVyLm5leHQoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRvbmUpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3RybC5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBieXRlcyA9IGVuY29kZXIuZW5jb2RlKEpTT04uc3RyaW5naWZ5KHZhbHVlKSArICdcXG4nKTtcbiAgICAgICAgICAgICAgICAgICAgY3RybC5lbnF1ZXVlKGJ5dGVzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBjdHJsLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFzeW5jIGNhbmNlbCgpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCBpdGVyLnJldHVybj8uKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9XG59XG5jbGFzcyBTU0VEZWNvZGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5ldmVudCA9IG51bGw7XG4gICAgICAgIHRoaXMuZGF0YSA9IFtdO1xuICAgICAgICB0aGlzLmNodW5rcyA9IFtdO1xuICAgIH1cbiAgICBkZWNvZGUobGluZSkge1xuICAgICAgICBpZiAobGluZS5lbmRzV2l0aCgnXFxyJykpIHtcbiAgICAgICAgICAgIGxpbmUgPSBsaW5lLnN1YnN0cmluZygwLCBsaW5lLmxlbmd0aCAtIDEpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghbGluZSkge1xuICAgICAgICAgICAgLy8gZW1wdHkgbGluZSBhbmQgd2UgZGlkbid0IHByZXZpb3VzbHkgZW5jb3VudGVyIGFueSBtZXNzYWdlc1xuICAgICAgICAgICAgaWYgKCF0aGlzLmV2ZW50ICYmICF0aGlzLmRhdGEubGVuZ3RoKVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgY29uc3Qgc3NlID0ge1xuICAgICAgICAgICAgICAgIGV2ZW50OiB0aGlzLmV2ZW50LFxuICAgICAgICAgICAgICAgIGRhdGE6IHRoaXMuZGF0YS5qb2luKCdcXG4nKSxcbiAgICAgICAgICAgICAgICByYXc6IHRoaXMuY2h1bmtzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuZXZlbnQgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5kYXRhID0gW107XG4gICAgICAgICAgICB0aGlzLmNodW5rcyA9IFtdO1xuICAgICAgICAgICAgcmV0dXJuIHNzZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNodW5rcy5wdXNoKGxpbmUpO1xuICAgICAgICBpZiAobGluZS5zdGFydHNXaXRoKCc6JykpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGxldCBbZmllbGRuYW1lLCBfLCB2YWx1ZV0gPSBwYXJ0aXRpb24obGluZSwgJzonKTtcbiAgICAgICAgaWYgKHZhbHVlLnN0YXJ0c1dpdGgoJyAnKSkge1xuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5zdWJzdHJpbmcoMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZpZWxkbmFtZSA9PT0gJ2V2ZW50Jykge1xuICAgICAgICAgICAgdGhpcy5ldmVudCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGZpZWxkbmFtZSA9PT0gJ2RhdGEnKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGEucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufVxuLyoqXG4gKiBBIHJlLWltcGxlbWVudGF0aW9uIG9mIGh0dHB4J3MgYExpbmVEZWNvZGVyYCBpbiBQeXRob24gdGhhdCBoYW5kbGVzIGluY3JlbWVudGFsbHlcbiAqIHJlYWRpbmcgbGluZXMgZnJvbSB0ZXh0LlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9lbmNvZGUvaHR0cHgvYmxvYi85MjAzMzNlYTk4MTE4ZTljZjYxN2YyNDY5MDVkN2IyMDI1MTA5NDFjL2h0dHB4L19kZWNvZGVycy5weSNMMjU4XG4gKi9cbmNsYXNzIExpbmVEZWNvZGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5idWZmZXIgPSBbXTtcbiAgICAgICAgdGhpcy50cmFpbGluZ0NSID0gZmFsc2U7XG4gICAgfVxuICAgIGRlY29kZShjaHVuaykge1xuICAgICAgICBsZXQgdGV4dCA9IHRoaXMuZGVjb2RlVGV4dChjaHVuayk7XG4gICAgICAgIGlmICh0aGlzLnRyYWlsaW5nQ1IpIHtcbiAgICAgICAgICAgIHRleHQgPSAnXFxyJyArIHRleHQ7XG4gICAgICAgICAgICB0aGlzLnRyYWlsaW5nQ1IgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGV4dC5lbmRzV2l0aCgnXFxyJykpIHtcbiAgICAgICAgICAgIHRoaXMudHJhaWxpbmdDUiA9IHRydWU7XG4gICAgICAgICAgICB0ZXh0ID0gdGV4dC5zbGljZSgwLCAtMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0ZXh0KSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdHJhaWxpbmdOZXdsaW5lID0gTGluZURlY29kZXIuTkVXTElORV9DSEFSUy5oYXModGV4dFt0ZXh0Lmxlbmd0aCAtIDFdIHx8ICcnKTtcbiAgICAgICAgbGV0IGxpbmVzID0gdGV4dC5zcGxpdChMaW5lRGVjb2Rlci5ORVdMSU5FX1JFR0VYUCk7XG4gICAgICAgIGlmIChsaW5lcy5sZW5ndGggPT09IDEgJiYgIXRyYWlsaW5nTmV3bGluZSkge1xuICAgICAgICAgICAgdGhpcy5idWZmZXIucHVzaChsaW5lc1swXSk7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuYnVmZmVyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGxpbmVzID0gW3RoaXMuYnVmZmVyLmpvaW4oJycpICsgbGluZXNbMF0sIC4uLmxpbmVzLnNsaWNlKDEpXTtcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyID0gW107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0cmFpbGluZ05ld2xpbmUpIHtcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyID0gW2xpbmVzLnBvcCgpIHx8ICcnXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGluZXM7XG4gICAgfVxuICAgIGRlY29kZVRleHQoYnl0ZXMpIHtcbiAgICAgICAgaWYgKGJ5dGVzID09IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIGlmICh0eXBlb2YgYnl0ZXMgPT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgcmV0dXJuIGJ5dGVzO1xuICAgICAgICAvLyBOb2RlOlxuICAgICAgICBpZiAodHlwZW9mIEJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGlmIChieXRlcyBpbnN0YW5jZW9mIEJ1ZmZlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBieXRlcy50b1N0cmluZygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJ5dGVzIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBCdWZmZXIuZnJvbShieXRlcykudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IG5ldyBPcGVuQUlFcnJvcihgVW5leHBlY3RlZDogcmVjZWl2ZWQgbm9uLVVpbnQ4QXJyYXkgKCR7Ynl0ZXMuY29uc3RydWN0b3IubmFtZX0pIHN0cmVhbSBjaHVuayBpbiBhbiBlbnZpcm9ubWVudCB3aXRoIGEgZ2xvYmFsIFwiQnVmZmVyXCIgZGVmaW5lZCwgd2hpY2ggdGhpcyBsaWJyYXJ5IGFzc3VtZXMgdG8gYmUgTm9kZS4gUGxlYXNlIHJlcG9ydCB0aGlzIGVycm9yLmApO1xuICAgICAgICB9XG4gICAgICAgIC8vIEJyb3dzZXJcbiAgICAgICAgaWYgKHR5cGVvZiBUZXh0RGVjb2RlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGlmIChieXRlcyBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgfHwgYnl0ZXMgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgICAgICAgICAgICAgIHRoaXMudGV4dERlY29kZXIgPz8gKHRoaXMudGV4dERlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoJ3V0ZjgnKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudGV4dERlY29kZXIuZGVjb2RlKGJ5dGVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IG5ldyBPcGVuQUlFcnJvcihgVW5leHBlY3RlZDogcmVjZWl2ZWQgbm9uLVVpbnQ4QXJyYXkvQXJyYXlCdWZmZXIgKCR7Ynl0ZXMuY29uc3RydWN0b3IubmFtZX0pIGluIGEgd2ViIHBsYXRmb3JtLiBQbGVhc2UgcmVwb3J0IHRoaXMgZXJyb3IuYCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IE9wZW5BSUVycm9yKGBVbmV4cGVjdGVkOiBuZWl0aGVyIEJ1ZmZlciBub3IgVGV4dERlY29kZXIgYXJlIGF2YWlsYWJsZSBhcyBnbG9iYWxzLiBQbGVhc2UgcmVwb3J0IHRoaXMgZXJyb3IuYCk7XG4gICAgfVxuICAgIGZsdXNoKCkge1xuICAgICAgICBpZiAoIXRoaXMuYnVmZmVyLmxlbmd0aCAmJiAhdGhpcy50cmFpbGluZ0NSKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbGluZXMgPSBbdGhpcy5idWZmZXIuam9pbignJyldO1xuICAgICAgICB0aGlzLmJ1ZmZlciA9IFtdO1xuICAgICAgICB0aGlzLnRyYWlsaW5nQ1IgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIGxpbmVzO1xuICAgIH1cbn1cbi8vIHByZXR0aWVyLWlnbm9yZVxuTGluZURlY29kZXIuTkVXTElORV9DSEFSUyA9IG5ldyBTZXQoWydcXG4nLCAnXFxyJywgJ1xceDBiJywgJ1xceDBjJywgJ1xceDFjJywgJ1xceDFkJywgJ1xceDFlJywgJ1xceDg1JywgJ1xcdTIwMjgnLCAnXFx1MjAyOSddKTtcbkxpbmVEZWNvZGVyLk5FV0xJTkVfUkVHRVhQID0gL1xcclxcbnxbXFxuXFxyXFx4MGJcXHgwY1xceDFjXFx4MWRcXHgxZVxceDg1XFx1MjAyOFxcdTIwMjldL2c7XG5mdW5jdGlvbiBwYXJ0aXRpb24oc3RyLCBkZWxpbWl0ZXIpIHtcbiAgICBjb25zdCBpbmRleCA9IHN0ci5pbmRleE9mKGRlbGltaXRlcik7XG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICByZXR1cm4gW3N0ci5zdWJzdHJpbmcoMCwgaW5kZXgpLCBkZWxpbWl0ZXIsIHN0ci5zdWJzdHJpbmcoaW5kZXggKyBkZWxpbWl0ZXIubGVuZ3RoKV07XG4gICAgfVxuICAgIHJldHVybiBbc3RyLCAnJywgJyddO1xufVxuLyoqXG4gKiBNb3N0IGJyb3dzZXJzIGRvbid0IHlldCBoYXZlIGFzeW5jIGl0ZXJhYmxlIHN1cHBvcnQgZm9yIFJlYWRhYmxlU3RyZWFtLFxuICogYW5kIE5vZGUgaGFzIGEgdmVyeSBkaWZmZXJlbnQgd2F5IG9mIHJlYWRpbmcgYnl0ZXMgZnJvbSBpdHMgXCJSZWFkYWJsZVN0cmVhbVwiLlxuICpcbiAqIFRoaXMgcG9seWZpbGwgd2FzIHB1bGxlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9NYXR0aWFzQnVlbGVucy93ZWItc3RyZWFtcy1wb2x5ZmlsbC9wdWxsLzEyMiNpc3N1ZWNvbW1lbnQtMTYyNzM1NDQ5MFxuICovXG5mdW5jdGlvbiByZWFkYWJsZVN0cmVhbUFzeW5jSXRlcmFibGUoc3RyZWFtKSB7XG4gICAgaWYgKHN0cmVhbVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0pXG4gICAgICAgIHJldHVybiBzdHJlYW07XG4gICAgY29uc3QgcmVhZGVyID0gc3RyZWFtLmdldFJlYWRlcigpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGFzeW5jIG5leHQoKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJlYWRlci5yZWFkKCk7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdD8uZG9uZSlcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnJlbGVhc2VMb2NrKCk7IC8vIHJlbGVhc2UgbG9jayB3aGVuIHN0cmVhbSBiZWNvbWVzIGNsb3NlZFxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHJlYWRlci5yZWxlYXNlTG9jaygpOyAvLyByZWxlYXNlIGxvY2sgd2hlbiBzdHJlYW0gYmVjb21lcyBlcnJvcmVkXG4gICAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgYXN5bmMgcmV0dXJuKCkge1xuICAgICAgICAgICAgY29uc3QgY2FuY2VsUHJvbWlzZSA9IHJlYWRlci5jYW5jZWwoKTtcbiAgICAgICAgICAgIHJlYWRlci5yZWxlYXNlTG9jaygpO1xuICAgICAgICAgICAgYXdhaXQgY2FuY2VsUHJvbWlzZTtcbiAgICAgICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiB1bmRlZmluZWQgfTtcbiAgICAgICAgfSxcbiAgICAgICAgW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdHJlYW1pbmcubWpzLm1hcCJdLCJuYW1lcyI6WyJSZWFkYWJsZVN0cmVhbSIsIk9wZW5BSUVycm9yIiwiQVBJRXJyb3IiLCJTdHJlYW0iLCJjb25zdHJ1Y3RvciIsIml0ZXJhdG9yIiwiY29udHJvbGxlciIsImZyb21TU0VSZXNwb25zZSIsInJlc3BvbnNlIiwiY29uc3VtZWQiLCJkZWNvZGVyIiwiU1NFRGVjb2RlciIsIml0ZXJNZXNzYWdlcyIsImJvZHkiLCJhYm9ydCIsImxpbmVEZWNvZGVyIiwiTGluZURlY29kZXIiLCJpdGVyIiwicmVhZGFibGVTdHJlYW1Bc3luY0l0ZXJhYmxlIiwiY2h1bmsiLCJsaW5lIiwiZGVjb2RlIiwic3NlIiwiZmx1c2giLCJFcnJvciIsImRvbmUiLCJkYXRhIiwic3RhcnRzV2l0aCIsImV2ZW50IiwiSlNPTiIsInBhcnNlIiwiZSIsImNvbnNvbGUiLCJlcnJvciIsInJhdyIsInVuZGVmaW5lZCIsIm5hbWUiLCJmcm9tUmVhZGFibGVTdHJlYW0iLCJyZWFkYWJsZVN0cmVhbSIsIml0ZXJMaW5lcyIsIlN5bWJvbCIsImFzeW5jSXRlcmF0b3IiLCJ0ZWUiLCJsZWZ0IiwicmlnaHQiLCJ0ZWVJdGVyYXRvciIsInF1ZXVlIiwibmV4dCIsImxlbmd0aCIsInJlc3VsdCIsInB1c2giLCJzaGlmdCIsInRvUmVhZGFibGVTdHJlYW0iLCJzZWxmIiwiZW5jb2RlciIsIlRleHRFbmNvZGVyIiwic3RhcnQiLCJwdWxsIiwiY3RybCIsInZhbHVlIiwiY2xvc2UiLCJieXRlcyIsImVuY29kZSIsInN0cmluZ2lmeSIsImVucXVldWUiLCJlcnIiLCJjYW5jZWwiLCJyZXR1cm4iLCJjaHVua3MiLCJlbmRzV2l0aCIsInN1YnN0cmluZyIsImpvaW4iLCJmaWVsZG5hbWUiLCJfIiwicGFydGl0aW9uIiwiYnVmZmVyIiwidHJhaWxpbmdDUiIsInRleHQiLCJkZWNvZGVUZXh0Iiwic2xpY2UiLCJ0cmFpbGluZ05ld2xpbmUiLCJORVdMSU5FX0NIQVJTIiwiaGFzIiwibGluZXMiLCJzcGxpdCIsIk5FV0xJTkVfUkVHRVhQIiwicG9wIiwiQnVmZmVyIiwidG9TdHJpbmciLCJVaW50OEFycmF5IiwiZnJvbSIsIlRleHREZWNvZGVyIiwiQXJyYXlCdWZmZXIiLCJ0ZXh0RGVjb2RlciIsIlNldCIsInN0ciIsImRlbGltaXRlciIsImluZGV4IiwiaW5kZXhPZiIsInN0cmVhbSIsInJlYWRlciIsImdldFJlYWRlciIsInJlYWQiLCJyZWxlYXNlTG9jayIsImNhbmNlbFByb21pc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/openai/streaming.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/openai/uploads.mjs":
/*!*****************************************!*\
  !*** ./node_modules/openai/uploads.mjs ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createForm: () => (/* binding */ createForm),\n/* harmony export */   fileFromPath: () => (/* reexport safe */ _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.fileFromPath),\n/* harmony export */   isBlobLike: () => (/* binding */ isBlobLike),\n/* harmony export */   isFileLike: () => (/* binding */ isFileLike),\n/* harmony export */   isMultipartBody: () => (/* binding */ isMultipartBody),\n/* harmony export */   isResponseLike: () => (/* binding */ isResponseLike),\n/* harmony export */   isUploadable: () => (/* binding */ isUploadable),\n/* harmony export */   maybeMultipartFormRequestOptions: () => (/* binding */ maybeMultipartFormRequestOptions),\n/* harmony export */   multipartFormRequestOptions: () => (/* binding */ multipartFormRequestOptions),\n/* harmony export */   toFile: () => (/* binding */ toFile)\n/* harmony export */ });\n/* harmony import */ var _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_shims/index.mjs */ \"(action-browser)/./node_modules/openai/_shims/index.mjs\");\n\n\nconst isResponseLike = (value)=>value != null && typeof value === \"object\" && typeof value.url === \"string\" && typeof value.blob === \"function\";\nconst isFileLike = (value)=>value != null && typeof value === \"object\" && typeof value.name === \"string\" && typeof value.lastModified === \"number\" && isBlobLike(value);\n/**\n * The BlobLike type omits arrayBuffer() because @types/node-fetch@^2.6.4 lacks it; but this check\n * adds the arrayBuffer() method type because it is available and used at runtime\n */ const isBlobLike = (value)=>value != null && typeof value === \"object\" && typeof value.size === \"number\" && typeof value.type === \"string\" && typeof value.text === \"function\" && typeof value.slice === \"function\" && typeof value.arrayBuffer === \"function\";\nconst isUploadable = (value)=>{\n    return isFileLike(value) || isResponseLike(value) || (0,_shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.isFsReadStream)(value);\n};\n/**\n * Helper for creating a {@link File} to pass to an SDK upload method from a variety of different data formats\n * @param value the raw content of the file.  Can be an {@link Uploadable}, {@link BlobLikePart}, or {@link AsyncIterable} of {@link BlobLikePart}s\n * @param {string=} name the name of the file. If omitted, toFile will try to determine a file name from bits if possible\n * @param {Object=} options additional properties\n * @param {string=} options.type the MIME type of the content\n * @param {number=} options.lastModified the last modified timestamp\n * @returns a {@link File} with the given properties\n */ async function toFile(value, name, options = {}) {\n    // If it's a promise, resolve it.\n    value = await value;\n    if (isResponseLike(value)) {\n        const blob = await value.blob();\n        name || (name = new URL(value.url).pathname.split(/[\\\\/]/).pop() ?? \"unknown_file\");\n        return new _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.File([\n            blob\n        ], name, options);\n    }\n    const bits = await getBytes(value);\n    name || (name = getName(value) ?? \"unknown_file\");\n    if (!options.type) {\n        const type = bits[0]?.type;\n        if (typeof type === \"string\") {\n            options = {\n                ...options,\n                type\n            };\n        }\n    }\n    return new _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.File(bits, name, options);\n}\nasync function getBytes(value) {\n    let parts = [];\n    if (typeof value === \"string\" || ArrayBuffer.isView(value) || // includes Uint8Array, Buffer, etc.\n    value instanceof ArrayBuffer) {\n        parts.push(value);\n    } else if (isBlobLike(value)) {\n        parts.push(await value.arrayBuffer());\n    } else if (isAsyncIterableIterator(value) // includes Readable, ReadableStream, etc.\n    ) {\n        for await (const chunk of value){\n            parts.push(chunk); // TODO, consider validating?\n        }\n    } else {\n        throw new Error(`Unexpected data type: ${typeof value}; constructor: ${value?.constructor?.name}; props: ${propsForError(value)}`);\n    }\n    return parts;\n}\nfunction propsForError(value) {\n    const props = Object.getOwnPropertyNames(value);\n    return `[${props.map((p)=>`\"${p}\"`).join(\", \")}]`;\n}\nfunction getName(value) {\n    return getStringFromMaybeBuffer(value.name) || getStringFromMaybeBuffer(value.filename) || // For fs.ReadStream\n    getStringFromMaybeBuffer(value.path)?.split(/[\\\\/]/).pop();\n}\nconst getStringFromMaybeBuffer = (x)=>{\n    if (typeof x === \"string\") return x;\n    if (typeof Buffer !== \"undefined\" && x instanceof Buffer) return String(x);\n    return undefined;\n};\nconst isAsyncIterableIterator = (value)=>value != null && typeof value === \"object\" && typeof value[Symbol.asyncIterator] === \"function\";\nconst isMultipartBody = (body)=>body && typeof body === \"object\" && body.body && body[Symbol.toStringTag] === \"MultipartBody\";\n/**\n * Returns a multipart/form-data request if any part of the given request body contains a File / Blob value.\n * Otherwise returns the request as is.\n */ const maybeMultipartFormRequestOptions = async (opts)=>{\n    if (!hasUploadableValue(opts.body)) return opts;\n    const form = await createForm(opts.body);\n    return (0,_shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.getMultipartRequestOptions)(form, opts);\n};\nconst multipartFormRequestOptions = async (opts)=>{\n    const form = await createForm(opts.body);\n    return (0,_shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.getMultipartRequestOptions)(form, opts);\n};\nconst createForm = async (body)=>{\n    const form = new _shims_index_mjs__WEBPACK_IMPORTED_MODULE_0__.FormData();\n    await Promise.all(Object.entries(body || {}).map(([key, value])=>addFormValue(form, key, value)));\n    return form;\n};\nconst hasUploadableValue = (value)=>{\n    if (isUploadable(value)) return true;\n    if (Array.isArray(value)) return value.some(hasUploadableValue);\n    if (value && typeof value === \"object\") {\n        for(const k in value){\n            if (hasUploadableValue(value[k])) return true;\n        }\n    }\n    return false;\n};\nconst addFormValue = async (form, key, value)=>{\n    if (value === undefined) return;\n    if (value == null) {\n        throw new TypeError(`Received null for \"${key}\"; to pass null in FormData, you must use the string 'null'`);\n    }\n    // TODO: make nested formats configurable\n    if (typeof value === \"string\" || typeof value === \"number\" || typeof value === \"boolean\") {\n        form.append(key, String(value));\n    } else if (isUploadable(value)) {\n        const file = await toFile(value);\n        form.append(key, file);\n    } else if (Array.isArray(value)) {\n        await Promise.all(value.map((entry)=>addFormValue(form, key + \"[]\", entry)));\n    } else if (typeof value === \"object\") {\n        await Promise.all(Object.entries(value).map(([name, prop])=>addFormValue(form, `${key}[${name}]`, prop)));\n    } else {\n        throw new TypeError(`Invalid value given to form, expected a string, number, boolean, object, Array, File or Blob but got ${value} instead`);\n    }\n}; //# sourceMappingURL=uploads.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/openai/uploads.mjs\n");

/***/ }),

/***/ "(action-browser)/./node_modules/openai/version.mjs":
/*!*****************************************!*\
  !*** ./node_modules/openai/version.mjs ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VERSION: () => (/* binding */ VERSION)\n/* harmony export */ });\nconst VERSION = \"4.20.1\"; // x-release-please-version\n //# sourceMappingURL=version.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9vcGVuYWkvdmVyc2lvbi5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU1BLFVBQVUsU0FBUyxDQUFDLDJCQUEyQjtDQUM1RCxvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb3BlbmFpL3ZlcnNpb24ubWpzP2RjMmYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IFZFUlNJT04gPSAnNC4yMC4xJzsgLy8geC1yZWxlYXNlLXBsZWFzZS12ZXJzaW9uXG4vLyMgc291cmNlTWFwcGluZ1VSTD12ZXJzaW9uLm1qcy5tYXAiXSwibmFtZXMiOlsiVkVSU0lPTiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/openai/version.mjs\n");

/***/ })

};
;