'use client'

import { useState, useEffect, SetStateAction} from "react";
import Button from "@mui/joy/Button";
import Typography from "@mui/joy/Typography";
import {useRouter} from "next/navigation";
import Grid from '@mui/material/Grid';
import Box from '@mui/material/Box';
import Header from "../discover/header";
import "../discover/discover.css";
import Likert from 'likert-react';

export default function Categories({provider_token}: { provider_token: string }) {
    const router = useRouter();
    const [categories, setCategories] = useState<Category[]>([]);
    const [loading, setLoading] = useState(false);
    const [showPopup, setShowPopup] = useState(false);
    // Slider Parameters
    const [happy, setHappy] = useState(50);
    const [sad, setSad] = useState(50);
    const [angry, setAngry] = useState(50);
    const [calm, setCalm] = useState(50);
    const [energetic, setEnergetic] = useState(50);
    const [uplifting, setUplifting] = useState(50);

    // Feedback Parameters
    const [happyRes, setHappyRes] = useState(3);
    const [sadRes, setSadRes] = useState(3);
    const [angryRes, setAngryRes] = useState(3);
    const [calmRes, setCalmRes] = useState(3);
    const [energeticRes, setEnergeticRes] = useState(3);
    const [upliftingRes, setUpliftingRes] = useState(3);

    const headers = new Headers();
    headers.append('Authorization', `Bearer ${provider_token}`);
    const params = new URLSearchParams();
    params.append('country', 'US');
    params.append('offset', '0');
    params.append('limit', '50');

    const fetchCategories = async (url: string) => {
        const response = await fetch(url, {
            method: 'GET',
            headers: headers,
        });
        if (response.status === 401) {
            router.push('/login');
            return [];
        }
        const {categories: data} = await response.json();
        return data;
    };

    const likertScale = (type: string, change: (f : number)=>void) => {
        const likertOptions = {
            question: "How " + type + " did you find the playlist?",
            responses: [
                {value: 1, text: "Not " + type +  " enough"},
                {value: 2, text: "Could be more " + type},
                {value: 3, text: "Perfect", checked: true},
                {value: 4, text: "A little too " + type},
                {value: 5, text: "Way too " + type}
            ],
            onChange: (val: number) => {
                change(val);
            }
        };

        return (
            <Likert {...likertOptions} />
        )
    }

    const getRecc = () => {

        // Same function as used in the discover page

        return;
    }

    // This function adjusts weights based on feedback, so then the next reccomendation will be different
    // Adapts and learns
    const evalFeedback = () => {

        // Perform this on each parameter/vibe : Four cases

        // Case 1: Feedback leans towards the side of the user data
        // Adjust average func to take in user params more than slider

        // Case 2: Feedback leans towards slider

        // Case 3: Feedback is less than both, lower initial value of parameter

        // Case 4: Feedback is greater than both, raise initial value of parameter

        return;
    }

    const getCategories = async () => {
        setLoading(true);
        let nextPage = `https://api.spotify.com/v1/browse/categories?${params.toString()}`;

        const allCategories: Category[] = [];

        while (nextPage) {
            const data = await fetchCategories(nextPage);
            allCategories.push(...data.items);

            if (data.next) {
                nextPage = data.next;
            } else {
                nextPage = '';
            }
        }

        setCategories(allCategories);
        setLoading(false)
    };

    return (
        <div className="App">
            <Header></Header>
            <div className="box">
                <h1>Recommendation Generator with Feedback:</h1>
                <h2>Give us your feedback on the playlists generated by our AI and we will
                    readjust our parameters to better fit your needs!</h2>
            </div>

            <Box className="box">
                <div className="slide-text">
                    <h2>Happy:&nbsp;&nbsp;</h2>
                    <input type="range" min="0" max="100" step="1" className="slider" value={happy} onChange={e => setHappy(e.target.value)}></input>
                </div>
                <Grid container spacing={2}>
                </Grid>
                <div className="slide-text">
                    <h2>Sad:&nbsp;&nbsp;</h2>
                    <input type="range" min="0" max="100" step="1" className="slider" value={sad} onChange={e => setSad(e.target.value)}></input>
                </div>
                <Grid container spacing={2} >
                </Grid>
                <div className="slide-text">
                    <h2>Angry:&nbsp;&nbsp;</h2>
                    <input type="range" min="0" max="100" step="1" className="slider" value={angry} onChange={e => setAngry(e.target.value)}></input>
                </div>
                <Grid container spacing={2} >
                </Grid>
                <div className="slide-text">
                    <h2>Calm:&nbsp;&nbsp;</h2>
                    <input type="range" min="0" max="100" step="1" className="slider" value={calm} onChange={e => setCalm(e.target.value)}></input>
                </div>
                <div className="slide-text">
                    <h2>Energetic:&nbsp;&nbsp;</h2>
                    <input type="range" min="0" max="100" step="1" className="slider" value={energetic} onChange={e => setEnergetic(e.target.value)}></input>
                </div>
                <div className="slide-text">
                    <h2>Uplifting:&nbsp;&nbsp;</h2>
                    <input type="range" min="0" max="100" step="1" className="slider" value={uplifting} onChange={e => setUplifting(e.target.value)}></input>
                </div>
                <Grid container spacing={2} >
                </Grid>
            </Box>
            <Button onClick={() => setShowPopup(true)} className="button">Submit</Button>
            {showPopup &&
                (<div>
                    <Box className="box" id="results">
                        <h2>Show results here</h2>
                    </Box>
                    <Box className="box">
                        <h2>Tell us how you think we did:</h2>
                        {likertScale("happy", setHappyRes)}
                        {likertScale("sad", setSadRes)}
                        {likertScale("angry", setAngryRes)}
                        {likertScale("calm", setCalmRes)}
                        {likertScale("energetic", setEnergeticRes)}
                        {likertScale("uplifting", setUpliftingRes)}
                    </Box>
                    <Button className="button" onClick={evalFeedback}>Submit</Button>
                </div>)}
        </div>)
}